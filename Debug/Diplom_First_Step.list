
Diplom_First_Step.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d98  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000798  08007ea8  08007ea8  00017ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008640  08008640  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08008640  08008640  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008640  08008640  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008640  08008640  00018640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008644  08008644  00018644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045b4  20000078  080086c0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  2000462c  080086c0  0002462c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d864  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040ec  00000000  00000000  0003d905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001660  00000000  00000000  000419f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d8  00000000  00000000  00043058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bc5b  00000000  00000000  00044530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001984d  00000000  00000000  0006018b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097819  00000000  00000000  000799d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001111f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006264  00000000  00000000  00111244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08007e90 	.word	0x08007e90

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08007e90 	.word	0x08007e90

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000094 	.word	0x20000094
 800018c:	20000148 	.word	0x20000148

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b5b0      	push	{r4, r5, r7, lr}
 8000192:	b088      	sub	sp, #32
 8000194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 fcbf 	bl	8000b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 f823 	bl	80001e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f90f 	bl	80003c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001a2:	f000 f8a1 	bl	80002e8 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80001a6:	f000 f8c9 	bl	800033c <MX_DMA_Init>
  MX_SPI2_Init();
 80001aa:	f000 f861 	bl	8000270 <MX_SPI2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, ADXL345_Data_Collector_Task, osPriorityNormal, 0, 2048);
 80001ae:	4b0b      	ldr	r3, [pc, #44]	; (80001dc <main+0x4c>)
 80001b0:	1d3c      	adds	r4, r7, #4
 80001b2:	461d      	mov	r5, r3
 80001b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001c0:	1d3b      	adds	r3, r7, #4
 80001c2:	2100      	movs	r1, #0
 80001c4:	4618      	mov	r0, r3
 80001c6:	f004 fc71 	bl	8004aac <osThreadCreate>
 80001ca:	4603      	mov	r3, r0
 80001cc:	4a04      	ldr	r2, [pc, #16]	; (80001e0 <main+0x50>)
 80001ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  UART_Cobs_Config();
 80001d0:	f000 f9ce 	bl	8000570 <UART_Cobs_Config>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001d4:	f004 fc63 	bl	8004a9e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d8:	e7fe      	b.n	80001d8 <main+0x48>
 80001da:	bf00      	nop
 80001dc:	08007eb4 	.word	0x08007eb4
 80001e0:	200044ac 	.word	0x200044ac

080001e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b090      	sub	sp, #64	; 0x40
 80001e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ea:	f107 0318 	add.w	r3, r7, #24
 80001ee:	2228      	movs	r2, #40	; 0x28
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f007 f903 	bl	80073fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]
 8000204:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000206:	2301      	movs	r3, #1
 8000208:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800020a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800020e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000210:	2300      	movs	r3, #0
 8000212:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000214:	2301      	movs	r3, #1
 8000216:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000218:	2302      	movs	r3, #2
 800021a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800021c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000220:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000222:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000226:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000228:	f107 0318 	add.w	r3, r7, #24
 800022c:	4618      	mov	r0, r3
 800022e:	f001 f9e1 	bl	80015f4 <HAL_RCC_OscConfig>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000238:	f000 fa16 	bl	8000668 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023c:	230f      	movs	r3, #15
 800023e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000240:	2302      	movs	r3, #2
 8000242:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000244:	2300      	movs	r3, #0
 8000246:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800024c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	2102      	movs	r1, #2
 8000256:	4618      	mov	r0, r3
 8000258:	f001 fc4c 	bl	8001af4 <HAL_RCC_ClockConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000262:	f000 fa01 	bl	8000668 <Error_Handler>
  }
}
 8000266:	bf00      	nop
 8000268:	3740      	adds	r7, #64	; 0x40
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000274:	4b19      	ldr	r3, [pc, #100]	; (80002dc <MX_SPI2_Init+0x6c>)
 8000276:	4a1a      	ldr	r2, [pc, #104]	; (80002e0 <MX_SPI2_Init+0x70>)
 8000278:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800027a:	4b18      	ldr	r3, [pc, #96]	; (80002dc <MX_SPI2_Init+0x6c>)
 800027c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000280:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000282:	4b16      	ldr	r3, [pc, #88]	; (80002dc <MX_SPI2_Init+0x6c>)
 8000284:	2200      	movs	r2, #0
 8000286:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000288:	4b14      	ldr	r3, [pc, #80]	; (80002dc <MX_SPI2_Init+0x6c>)
 800028a:	2200      	movs	r2, #0
 800028c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800028e:	4b13      	ldr	r3, [pc, #76]	; (80002dc <MX_SPI2_Init+0x6c>)
 8000290:	2202      	movs	r2, #2
 8000292:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <MX_SPI2_Init+0x6c>)
 8000296:	2201      	movs	r2, #1
 8000298:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800029a:	4b10      	ldr	r3, [pc, #64]	; (80002dc <MX_SPI2_Init+0x6c>)
 800029c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002a0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80002a2:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <MX_SPI2_Init+0x6c>)
 80002a4:	2218      	movs	r2, #24
 80002a6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002a8:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <MX_SPI2_Init+0x6c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <MX_SPI2_Init+0x6c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002b4:	4b09      	ldr	r3, [pc, #36]	; (80002dc <MX_SPI2_Init+0x6c>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80002ba:	4b08      	ldr	r3, [pc, #32]	; (80002dc <MX_SPI2_Init+0x6c>)
 80002bc:	220a      	movs	r2, #10
 80002be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80002c0:	4806      	ldr	r0, [pc, #24]	; (80002dc <MX_SPI2_Init+0x6c>)
 80002c2:	f001 fde1 	bl	8001e88 <HAL_SPI_Init>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80002cc:	f000 f9cc 	bl	8000668 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.hdmarx				=	&hdma_spi2_rx;
 80002d0:	4b02      	ldr	r3, [pc, #8]	; (80002dc <MX_SPI2_Init+0x6c>)
 80002d2:	4a04      	ldr	r2, [pc, #16]	; (80002e4 <MX_SPI2_Init+0x74>)
 80002d4:	64da      	str	r2, [r3, #76]	; 0x4c
  /* USER CODE END SPI2_Init 2 */

}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	200044b0 	.word	0x200044b0
 80002e0:	40003800 	.word	0x40003800
 80002e4:	20004530 	.word	0x20004530

080002e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002ec:	4b11      	ldr	r3, [pc, #68]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 80002ee:	4a12      	ldr	r2, [pc, #72]	; (8000338 <MX_USART2_UART_Init+0x50>)
 80002f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002f2:	4b10      	ldr	r3, [pc, #64]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 80002f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000300:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000306:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 8000308:	2200      	movs	r2, #0
 800030a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 800030e:	220c      	movs	r2, #12
 8000310:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000312:	4b08      	ldr	r3, [pc, #32]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 8000314:	2200      	movs	r2, #0
 8000316:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 800031a:	2200      	movs	r2, #0
 800031c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800031e:	4805      	ldr	r0, [pc, #20]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 8000320:	f003 f83c 	bl	800339c <HAL_UART_Init>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800032a:	f000 f99d 	bl	8000668 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	20004574 	.word	0x20004574
 8000338:	40004400 	.word	0x40004400

0800033c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
  hdma_spi2_rx.Instance							=	DMA1_Channel4;
 8000342:	4b1c      	ldr	r3, [pc, #112]	; (80003b4 <MX_DMA_Init+0x78>)
 8000344:	4a1c      	ldr	r2, [pc, #112]	; (80003b8 <MX_DMA_Init+0x7c>)
 8000346:	601a      	str	r2, [r3, #0]
  hdma_spi2_rx.Init.Direction					=	DMA_PERIPH_TO_MEMORY;
 8000348:	4b1a      	ldr	r3, [pc, #104]	; (80003b4 <MX_DMA_Init+0x78>)
 800034a:	2200      	movs	r2, #0
 800034c:	605a      	str	r2, [r3, #4]
  hdma_spi2_rx.Init.PeriphInc					=	DMA_PINC_DISABLE;
 800034e:	4b19      	ldr	r3, [pc, #100]	; (80003b4 <MX_DMA_Init+0x78>)
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  hdma_spi2_rx.Init.MemInc						=	DMA_MINC_ENABLE;
 8000354:	4b17      	ldr	r3, [pc, #92]	; (80003b4 <MX_DMA_Init+0x78>)
 8000356:	2280      	movs	r2, #128	; 0x80
 8000358:	60da      	str	r2, [r3, #12]
  hdma_spi2_rx.Init.PeriphDataAlignment			=	DMA_PDATAALIGN_BYTE;
 800035a:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <MX_DMA_Init+0x78>)
 800035c:	2200      	movs	r2, #0
 800035e:	611a      	str	r2, [r3, #16]
  hdma_spi2_rx.Init.MemDataAlignment			=	DMA_MDATAALIGN_HALFWORD;
 8000360:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <MX_DMA_Init+0x78>)
 8000362:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000366:	615a      	str	r2, [r3, #20]
  hdma_spi2_rx.Init.Mode						=	DMA_NORMAL;
 8000368:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <MX_DMA_Init+0x78>)
 800036a:	2200      	movs	r2, #0
 800036c:	619a      	str	r2, [r3, #24]
  hdma_spi2_rx.Init.Priority					=	DMA_PRIORITY_LOW;
 800036e:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <MX_DMA_Init+0x78>)
 8000370:	2200      	movs	r2, #0
 8000372:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000374:	480f      	ldr	r0, [pc, #60]	; (80003b4 <MX_DMA_Init+0x78>)
 8000376:	f000 fce1 	bl	8000d3c <HAL_DMA_Init>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_DMA_Init+0x48>
  {
    Error_Handler();
 8000380:	f000 f972 	bl	8000668 <Error_Handler>
  }
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000384:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <MX_DMA_Init+0x80>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	4a0c      	ldr	r2, [pc, #48]	; (80003bc <MX_DMA_Init+0x80>)
 800038a:	f043 0301 	orr.w	r3, r3, #1
 800038e:	6153      	str	r3, [r2, #20]
 8000390:	4b0a      	ldr	r3, [pc, #40]	; (80003bc <MX_DMA_Init+0x80>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	f003 0301 	and.w	r3, r3, #1
 8000398:	607b      	str	r3, [r7, #4]
 800039a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800039c:	2200      	movs	r2, #0
 800039e:	2105      	movs	r1, #5
 80003a0:	200e      	movs	r0, #14
 80003a2:	f000 fca0 	bl	8000ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80003a6:	200e      	movs	r0, #14
 80003a8:	f000 fcb9 	bl	8000d1e <HAL_NVIC_EnableIRQ>

}
 80003ac:	bf00      	nop
 80003ae:	3708      	adds	r7, #8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20004530 	.word	0x20004530
 80003b8:	40020044 	.word	0x40020044
 80003bc:	40021000 	.word	0x40021000

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b088      	sub	sp, #32
 80003c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	f107 0310 	add.w	r3, r7, #16
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d4:	4b3d      	ldr	r3, [pc, #244]	; (80004cc <MX_GPIO_Init+0x10c>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a3c      	ldr	r2, [pc, #240]	; (80004cc <MX_GPIO_Init+0x10c>)
 80003da:	f043 0310 	orr.w	r3, r3, #16
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b3a      	ldr	r3, [pc, #232]	; (80004cc <MX_GPIO_Init+0x10c>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0310 	and.w	r3, r3, #16
 80003e8:	60fb      	str	r3, [r7, #12]
 80003ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ec:	4b37      	ldr	r3, [pc, #220]	; (80004cc <MX_GPIO_Init+0x10c>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a36      	ldr	r2, [pc, #216]	; (80004cc <MX_GPIO_Init+0x10c>)
 80003f2:	f043 0320 	orr.w	r3, r3, #32
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b34      	ldr	r3, [pc, #208]	; (80004cc <MX_GPIO_Init+0x10c>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0320 	and.w	r3, r3, #32
 8000400:	60bb      	str	r3, [r7, #8]
 8000402:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000404:	4b31      	ldr	r3, [pc, #196]	; (80004cc <MX_GPIO_Init+0x10c>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a30      	ldr	r2, [pc, #192]	; (80004cc <MX_GPIO_Init+0x10c>)
 800040a:	f043 0304 	orr.w	r3, r3, #4
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b2e      	ldr	r3, [pc, #184]	; (80004cc <MX_GPIO_Init+0x10c>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0304 	and.w	r3, r3, #4
 8000418:	607b      	str	r3, [r7, #4]
 800041a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800041c:	4b2b      	ldr	r3, [pc, #172]	; (80004cc <MX_GPIO_Init+0x10c>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a2a      	ldr	r2, [pc, #168]	; (80004cc <MX_GPIO_Init+0x10c>)
 8000422:	f043 0308 	orr.w	r3, r3, #8
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b28      	ldr	r3, [pc, #160]	; (80004cc <MX_GPIO_Init+0x10c>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0308 	and.w	r3, r3, #8
 8000430:	603b      	str	r3, [r7, #0]
 8000432:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, GPIO_PIN_RESET);
 8000434:	2200      	movs	r2, #0
 8000436:	2120      	movs	r1, #32
 8000438:	4825      	ldr	r0, [pc, #148]	; (80004d0 <MX_GPIO_Init+0x110>)
 800043a:	f001 f8a1 	bl	8001580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800043e:	2200      	movs	r2, #0
 8000440:	2140      	movs	r1, #64	; 0x40
 8000442:	4824      	ldr	r0, [pc, #144]	; (80004d4 <MX_GPIO_Init+0x114>)
 8000444:	f001 f89c 	bl	8001580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000448:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800044c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800044e:	4b22      	ldr	r3, [pc, #136]	; (80004d8 <MX_GPIO_Init+0x118>)
 8000450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000452:	2300      	movs	r3, #0
 8000454:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000456:	f107 0310 	add.w	r3, r7, #16
 800045a:	4619      	mov	r1, r3
 800045c:	481f      	ldr	r0, [pc, #124]	; (80004dc <MX_GPIO_Init+0x11c>)
 800045e:	f000 ff0b 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : Green_Pin */
  GPIO_InitStruct.Pin = Green_Pin;
 8000462:	2320      	movs	r3, #32
 8000464:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000466:	2301      	movs	r3, #1
 8000468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	2300      	movs	r3, #0
 800046c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046e:	2302      	movs	r3, #2
 8000470:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Green_GPIO_Port, &GPIO_InitStruct);
 8000472:	f107 0310 	add.w	r3, r7, #16
 8000476:	4619      	mov	r1, r3
 8000478:	4815      	ldr	r0, [pc, #84]	; (80004d0 <MX_GPIO_Init+0x110>)
 800047a:	f000 fefd 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800047e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000482:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000484:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <MX_GPIO_Init+0x118>)
 8000486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	2300      	movs	r3, #0
 800048a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048c:	f107 0310 	add.w	r3, r7, #16
 8000490:	4619      	mov	r1, r3
 8000492:	480f      	ldr	r0, [pc, #60]	; (80004d0 <MX_GPIO_Init+0x110>)
 8000494:	f000 fef0 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000498:	2340      	movs	r3, #64	; 0x40
 800049a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049c:	2301      	movs	r3, #1
 800049e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a4:	2303      	movs	r3, #3
 80004a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80004a8:	f107 0310 	add.w	r3, r7, #16
 80004ac:	4619      	mov	r1, r3
 80004ae:	4809      	ldr	r0, [pc, #36]	; (80004d4 <MX_GPIO_Init+0x114>)
 80004b0:	f000 fee2 	bl	8001278 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2105      	movs	r1, #5
 80004b8:	2028      	movs	r0, #40	; 0x28
 80004ba:	f000 fc14 	bl	8000ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004be:	2028      	movs	r0, #40	; 0x28
 80004c0:	f000 fc2d 	bl	8000d1e <HAL_NVIC_EnableIRQ>

}
 80004c4:	bf00      	nop
 80004c6:	3720      	adds	r7, #32
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40010800 	.word	0x40010800
 80004d4:	40010c00 	.word	0x40010c00
 80004d8:	10110000 	.word	0x10110000
 80004dc:	40011000 	.word	0x40011000

080004e0 <ADXL345_Config>:

/* USER CODE BEGIN 4 */
void ADXL345_Config()
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
	ADXL_ConfigTypeDef_t ADXL 					=	{0};
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	811a      	strh	r2, [r3, #8]

	ADXL.PowerMode 								= 	NormalPower;
 80004f0:	2300      	movs	r3, #0
 80004f2:	713b      	strb	r3, [r7, #4]
	ADXL.BWRate	 								=	BWRATE_400;
 80004f4:	230c      	movs	r3, #12
 80004f6:	717b      	strb	r3, [r7, #5]
	ADXL.WakeUpRate 							=	WakeUpRate_8;
 80004f8:	2300      	movs	r3, #0
 80004fa:	71bb      	strb	r3, [r7, #6]
	ADXL.AutoSleepConfig.AutoSleep 				=	AutoSleepOFF;
 80004fc:	2300      	movs	r3, #0
 80004fe:	71fb      	strb	r3, [r7, #7]
	ADXL.AutoSleepConfig.ThreshInact 			=	10;
 8000500:	230a      	movs	r3, #10
 8000502:	723b      	strb	r3, [r7, #8]
	ADXL.AutoSleepConfig.TimeInact				=	10;
 8000504:	230a      	movs	r3, #10
 8000506:	727b      	strb	r3, [r7, #9]
	ADXL.Format.Resolution 						=	RESFULL;
 8000508:	2308      	movs	r3, #8
 800050a:	72bb      	strb	r3, [r7, #10]
	ADXL.Format.Range	 						=	RANGE_16G;
 800050c:	2303      	movs	r3, #3
 800050e:	72fb      	strb	r3, [r7, #11]
	ADXL.Format.IntInvert 						=	ACTIVE_HIGH;
 8000510:	2300      	movs	r3, #0
 8000512:	733b      	strb	r3, [r7, #12]
	ADXL.Format.SPI_Mode 						=	FORE_WIRE_MODE;
 8000514:	2300      	movs	r3, #0
 8000516:	737b      	strb	r3, [r7, #13]
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	2140      	movs	r1, #64	; 0x40
 800051c:	4811      	ldr	r0, [pc, #68]	; (8000564 <ADXL345_Config+0x84>)
 800051e:	f001 f82f 	bl	8001580 <HAL_GPIO_WritePin>
#ifdef 	Debug_Active
	ADXL_Status ADXLStatus 						= 	ADXL345_Init(&ADXL, &hspi2);
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	4910      	ldr	r1, [pc, #64]	; (8000568 <ADXL345_Config+0x88>)
 8000526:	4618      	mov	r0, r3
 8000528:	f003 fe0c 	bl	8004144 <ADXL345_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	73fb      	strb	r3, [r7, #15]
	if (ADXLStatus == ADXL_ERR)
 8000530:	7bfb      	ldrb	r3, [r7, #15]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d103      	bne.n	800053e <ADXL345_Config+0x5e>
	{
		perror("Error: Accelerometer is not found");
 8000536:	480d      	ldr	r0, [pc, #52]	; (800056c <ADXL345_Config+0x8c>)
 8000538:	f007 f85e 	bl	80075f8 <perror>
		while(1)
 800053c:	e7fe      	b.n	800053c <ADXL345_Config+0x5c>
#endif

	/*	FIFO Register Config	*/
#define	FIFO_Mode 		((uint8_t) (1<<6u))
#define	FIFO_Samples	((uint8_t) (0x1F))
	regWrite(FIFO_CTL, FIFO_Mode | FIFO_Samples);
 800053e:	215f      	movs	r1, #95	; 0x5f
 8000540:	2038      	movs	r0, #56	; 0x38
 8000542:	f003 fd41 	bl	8003fc8 <regWrite>

	/*	Interupt Config	*/
	ADXL345_INTMapping(INT2, 	Watermark);
 8000546:	2102      	movs	r1, #2
 8000548:	2001      	movs	r0, #1
 800054a:	f003 fefb 	bl	8004344 <ADXL345_INTMapping>
	ADXL345_INTEnable(ON, 		Watermark);
 800054e:	2102      	movs	r1, #2
 8000550:	2001      	movs	r0, #1
 8000552:	f003 febb 	bl	80042cc <ADXL345_INTEnable>

	ADXL345_MeasureON();
 8000556:	f003 fe9b 	bl	8004290 <ADXL345_MeasureON>

}
 800055a:	bf00      	nop
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40010c00 	.word	0x40010c00
 8000568:	200044b0 	.word	0x200044b0
 800056c:	08007ed0 	.word	0x08007ed0

08000570 <UART_Cobs_Config>:

void UART_Cobs_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af02      	add	r7, sp, #8

	uart_cobs_service_tx_create(					"Task_uart_cobs_service_tx",
 8000576:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <UART_Cobs_Config+0x60>)
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	f44f 7335 	mov.w	r3, #724	; 0x2d4
 800057e:	2200      	movs	r2, #0
 8000580:	2100      	movs	r1, #0
 8000582:	4814      	ldr	r0, [pc, #80]	; (80005d4 <UART_Cobs_Config+0x64>)
 8000584:	f004 f8a0 	bl	80046c8 <uart_cobs_service_tx_create>
													osPriorityNormal,
													0,
													724,
													&Cobs_UART
								);
	Cobs_UART.huart 								=	(uart_freertos_t*) pvPortMalloc(sizeof(uart_freertos_t));
 8000588:	2014      	movs	r0, #20
 800058a:	f006 fc2f 	bl	8006dec <pvPortMalloc>
 800058e:	4603      	mov	r3, r0
 8000590:	4a0f      	ldr	r2, [pc, #60]	; (80005d0 <UART_Cobs_Config+0x60>)
 8000592:	6013      	str	r3, [r2, #0]
	uart_freertos_init(								Cobs_UART.huart
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <UART_Cobs_Config+0x60>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4618      	mov	r0, r3
 800059a:	f004 f917 	bl	80047cc <uart_freertos_init>
					  );
	Cobs_UART.max_frame_size 						=	(size_t) Length_Realization;
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <UART_Cobs_Config+0x60>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	711a      	strb	r2, [r3, #4]
 80005a4:	2200      	movs	r2, #0
 80005a6:	f042 0204 	orr.w	r2, r2, #4
 80005aa:	715a      	strb	r2, [r3, #5]
 80005ac:	2200      	movs	r2, #0
 80005ae:	719a      	strb	r2, [r3, #6]
 80005b0:	2200      	movs	r2, #0
 80005b2:	71da      	strb	r2, [r3, #7]
	Cobs_UART.huart -> huart						=	(UART_HandleTypeDef *) &huart2;
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <UART_Cobs_Config+0x60>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <UART_Cobs_Config+0x68>)
 80005ba:	601a      	str	r2, [r3, #0]
	Cobs_UART.queue_depth 							=	1;
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <UART_Cobs_Config+0x60>)
 80005be:	2201      	movs	r2, #1
 80005c0:	721a      	strb	r2, [r3, #8]
	Cobs_UART.mode 									=	UART_COBS_INTERRUPT;
 80005c2:	4b03      	ldr	r3, [pc, #12]	; (80005d0 <UART_Cobs_Config+0x60>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	725a      	strb	r2, [r3, #9]

}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200045b8 	.word	0x200045b8
 80005d4:	08007ef4 	.word	0x08007ef4
 80005d8:	20004574 	.word	0x20004574

080005dc <ADXL345_Data_Collector_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ADXL345_Data_Collector_Task */
void ADXL345_Data_Collector_Task(void const * argument)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */

	ADXL345_Config();
 80005e8:	f7ff ff7a 	bl	80004e0 <ADXL345_Config>

	uint16_t	Signal[Length_Realization] 			=	{0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	4618      	mov	r0, r3
 80005f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005f6:	461a      	mov	r2, r3
 80005f8:	2100      	movs	r1, #0
 80005fa:	f006 ff00 	bl	80073fe <memset>

	/* Infinite loop */
	for(uint16_t Index_Count = 0;; Index_Count++)
 80005fe:	2300      	movs	r3, #0
 8000600:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
	{
		//	Записать данные в очередь, когда буфер переполниться
		if (Index_Count > Length_Realization)
 8000604:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 8000608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800060c:	d90a      	bls.n	8000624 <ADXL345_Data_Collector_Task+0x48>
		{
			Index_Count = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
			uart_cobs_send(&Cobs_UART, &Signal, Length_Realization, 10 * portTICK_PERIOD_MS);
 8000614:	f107 010c 	add.w	r1, r7, #12
 8000618:	230a      	movs	r3, #10
 800061a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800061e:	4808      	ldr	r0, [pc, #32]	; (8000640 <ADXL345_Data_Collector_Task+0x64>)
 8000620:	f003 ffb4 	bl	800458c <uart_cobs_send>
		}

		ADXL345_GetValue_from_DMA((uint8_t *) &Signal, 32, Yaxis);
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2234      	movs	r2, #52	; 0x34
 800062a:	2120      	movs	r1, #32
 800062c:	4618      	mov	r0, r3
 800062e:	f003 fee9 	bl	8004404 <ADXL345_GetValue_from_DMA>
	for(uint16_t Index_Count = 0;; Index_Count++)
 8000632:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 8000636:	3301      	adds	r3, #1
 8000638:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
		if (Index_Count > Length_Realization)
 800063c:	e7e2      	b.n	8000604 <ADXL345_Data_Collector_Task+0x28>
 800063e:	bf00      	nop
 8000640:	200045b8 	.word	0x200045b8

08000644 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a04      	ldr	r2, [pc, #16]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d101      	bne.n	800065a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000656:	f000 fa75 	bl	8000b44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40000800 	.word	0x40000800

08000668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800066c:	b672      	cpsid	i
}
 800066e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000670:	e7fe      	b.n	8000670 <Error_Handler+0x8>
	...

08000674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <HAL_MspInit+0x68>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	4a17      	ldr	r2, [pc, #92]	; (80006dc <HAL_MspInit+0x68>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6193      	str	r3, [r2, #24]
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <HAL_MspInit+0x68>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <HAL_MspInit+0x68>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	4a11      	ldr	r2, [pc, #68]	; (80006dc <HAL_MspInit+0x68>)
 8000698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069c:	61d3      	str	r3, [r2, #28]
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <HAL_MspInit+0x68>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	210f      	movs	r1, #15
 80006ae:	f06f 0001 	mvn.w	r0, #1
 80006b2:	f000 fb18 	bl	8000ce6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <HAL_MspInit+0x6c>)
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <HAL_MspInit+0x6c>)
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40010000 	.word	0x40010000

080006e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a34      	ldr	r2, [pc, #208]	; (80007d0 <HAL_SPI_MspInit+0xec>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d160      	bne.n	80007c6 <HAL_SPI_MspInit+0xe2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000704:	4b33      	ldr	r3, [pc, #204]	; (80007d4 <HAL_SPI_MspInit+0xf0>)
 8000706:	69db      	ldr	r3, [r3, #28]
 8000708:	4a32      	ldr	r2, [pc, #200]	; (80007d4 <HAL_SPI_MspInit+0xf0>)
 800070a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070e:	61d3      	str	r3, [r2, #28]
 8000710:	4b30      	ldr	r3, [pc, #192]	; (80007d4 <HAL_SPI_MspInit+0xf0>)
 8000712:	69db      	ldr	r3, [r3, #28]
 8000714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071c:	4b2d      	ldr	r3, [pc, #180]	; (80007d4 <HAL_SPI_MspInit+0xf0>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a2c      	ldr	r2, [pc, #176]	; (80007d4 <HAL_SPI_MspInit+0xf0>)
 8000722:	f043 0308 	orr.w	r3, r3, #8
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b2a      	ldr	r3, [pc, #168]	; (80007d4 <HAL_SPI_MspInit+0xf0>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f003 0308 	and.w	r3, r3, #8
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000734:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000738:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073a:	2302      	movs	r3, #2
 800073c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800073e:	2303      	movs	r3, #3
 8000740:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000742:	f107 0310 	add.w	r3, r7, #16
 8000746:	4619      	mov	r1, r3
 8000748:	4823      	ldr	r0, [pc, #140]	; (80007d8 <HAL_SPI_MspInit+0xf4>)
 800074a:	f000 fd95 	bl	8001278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800074e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000752:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	4619      	mov	r1, r3
 8000762:	481d      	ldr	r0, [pc, #116]	; (80007d8 <HAL_SPI_MspInit+0xf4>)
 8000764:	f000 fd88 	bl	8001278 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8000768:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <HAL_SPI_MspInit+0xf8>)
 800076a:	4a1d      	ldr	r2, [pc, #116]	; (80007e0 <HAL_SPI_MspInit+0xfc>)
 800076c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800076e:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <HAL_SPI_MspInit+0xf8>)
 8000770:	2200      	movs	r2, #0
 8000772:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <HAL_SPI_MspInit+0xf8>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <HAL_SPI_MspInit+0xf8>)
 800077c:	2280      	movs	r2, #128	; 0x80
 800077e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000780:	4b16      	ldr	r3, [pc, #88]	; (80007dc <HAL_SPI_MspInit+0xf8>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <HAL_SPI_MspInit+0xf8>)
 8000788:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800078c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <HAL_SPI_MspInit+0xf8>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <HAL_SPI_MspInit+0xf8>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800079a:	4810      	ldr	r0, [pc, #64]	; (80007dc <HAL_SPI_MspInit+0xf8>)
 800079c:	f000 face 	bl	8000d3c <HAL_DMA_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 80007a6:	f7ff ff5f 	bl	8000668 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4a0b      	ldr	r2, [pc, #44]	; (80007dc <HAL_SPI_MspInit+0xf8>)
 80007ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80007b0:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <HAL_SPI_MspInit+0xf8>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2105      	movs	r1, #5
 80007ba:	2024      	movs	r0, #36	; 0x24
 80007bc:	f000 fa93 	bl	8000ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80007c0:	2024      	movs	r0, #36	; 0x24
 80007c2:	f000 faac 	bl	8000d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80007c6:	bf00      	nop
 80007c8:	3720      	adds	r7, #32
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40003800 	.word	0x40003800
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40010c00 	.word	0x40010c00
 80007dc:	20004530 	.word	0x20004530
 80007e0:	40020044 	.word	0x40020044

080007e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a19      	ldr	r2, [pc, #100]	; (8000864 <HAL_UART_MspInit+0x80>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d12b      	bne.n	800085c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <HAL_UART_MspInit+0x84>)
 8000806:	69db      	ldr	r3, [r3, #28]
 8000808:	4a17      	ldr	r2, [pc, #92]	; (8000868 <HAL_UART_MspInit+0x84>)
 800080a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800080e:	61d3      	str	r3, [r2, #28]
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <HAL_UART_MspInit+0x84>)
 8000812:	69db      	ldr	r3, [r3, #28]
 8000814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <HAL_UART_MspInit+0x84>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a11      	ldr	r2, [pc, #68]	; (8000868 <HAL_UART_MspInit+0x84>)
 8000822:	f043 0304 	orr.w	r3, r3, #4
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <HAL_UART_MspInit+0x84>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f003 0304 	and.w	r3, r3, #4
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000834:	230c      	movs	r3, #12
 8000836:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2302      	movs	r3, #2
 800083e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	4619      	mov	r1, r3
 8000846:	4809      	ldr	r0, [pc, #36]	; (800086c <HAL_UART_MspInit+0x88>)
 8000848:	f000 fd16 	bl	8001278 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2105      	movs	r1, #5
 8000850:	2026      	movs	r0, #38	; 0x26
 8000852:	f000 fa48 	bl	8000ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000856:	2026      	movs	r0, #38	; 0x26
 8000858:	f000 fa61 	bl	8000d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800085c:	bf00      	nop
 800085e:	3720      	adds	r7, #32
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40004400 	.word	0x40004400
 8000868:	40021000 	.word	0x40021000
 800086c:	40010800 	.word	0x40010800

08000870 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08c      	sub	sp, #48	; 0x30
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000880:	2200      	movs	r2, #0
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	201e      	movs	r0, #30
 8000886:	f000 fa2e 	bl	8000ce6 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800088a:	201e      	movs	r0, #30
 800088c:	f000 fa47 	bl	8000d1e <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <HAL_InitTick+0xa0>)
 8000892:	69db      	ldr	r3, [r3, #28]
 8000894:	4a1e      	ldr	r2, [pc, #120]	; (8000910 <HAL_InitTick+0xa0>)
 8000896:	f043 0304 	orr.w	r3, r3, #4
 800089a:	61d3      	str	r3, [r2, #28]
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <HAL_InitTick+0xa0>)
 800089e:	69db      	ldr	r3, [r3, #28]
 80008a0:	f003 0304 	and.w	r3, r3, #4
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008a8:	f107 0210 	add.w	r2, r7, #16
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4611      	mov	r1, r2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f001 fa9a 	bl	8001dec <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80008b8:	f001 fa70 	bl	8001d9c <HAL_RCC_GetPCLK1Freq>
 80008bc:	4603      	mov	r3, r0
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c4:	4a13      	ldr	r2, [pc, #76]	; (8000914 <HAL_InitTick+0xa4>)
 80008c6:	fba2 2303 	umull	r2, r3, r2, r3
 80008ca:	0c9b      	lsrs	r3, r3, #18
 80008cc:	3b01      	subs	r3, #1
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <HAL_InitTick+0xa8>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <HAL_InitTick+0xac>)
 80008d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <HAL_InitTick+0xa8>)
 80008d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008dc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80008de:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <HAL_InitTick+0xa8>)
 80008e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <HAL_InitTick+0xa8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <HAL_InitTick+0xa8>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80008f0:	4809      	ldr	r0, [pc, #36]	; (8000918 <HAL_InitTick+0xa8>)
 80008f2:	f002 fb09 	bl	8002f08 <HAL_TIM_Base_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d104      	bne.n	8000906 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80008fc:	4806      	ldr	r0, [pc, #24]	; (8000918 <HAL_InitTick+0xa8>)
 80008fe:	f002 fb5b 	bl	8002fb8 <HAL_TIM_Base_Start_IT>
 8000902:	4603      	mov	r3, r0
 8000904:	e000      	b.n	8000908 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
}
 8000908:	4618      	mov	r0, r3
 800090a:	3730      	adds	r7, #48	; 0x30
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40021000 	.word	0x40021000
 8000914:	431bde83 	.word	0x431bde83
 8000918:	200045cc 	.word	0x200045cc
 800091c:	40000800 	.word	0x40000800

08000920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <NMI_Handler+0x4>

08000926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <HardFault_Handler+0x4>

0800092c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <MemManage_Handler+0x4>

08000932 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <BusFault_Handler+0x4>

08000938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <UsageFault_Handler+0x4>

0800093e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr
	...

0800094c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000950:	4802      	ldr	r0, [pc, #8]	; (800095c <DMA1_Channel4_IRQHandler+0x10>)
 8000952:	f000 fb5d 	bl	8001010 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20004530 	.word	0x20004530

08000960 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000964:	4802      	ldr	r0, [pc, #8]	; (8000970 <TIM4_IRQHandler+0x10>)
 8000966:	f002 fb79 	bl	800305c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200045cc 	.word	0x200045cc

08000974 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <SPI2_IRQHandler+0x10>)
 800097a:	f001 fdab 	bl	80024d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200044b0 	.word	0x200044b0

08000988 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800098c:	4802      	ldr	r0, [pc, #8]	; (8000998 <USART2_IRQHandler+0x10>)
 800098e:	f002 fe95 	bl	80036bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20004574 	.word	0x20004574

0800099c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80009a0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80009a4:	f000 fe04 	bl	80015b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80009a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009ac:	f000 fe00 	bl	80015b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	e00a      	b.n	80009dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009c6:	f3af 8000 	nop.w
 80009ca:	4601      	mov	r1, r0
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	1c5a      	adds	r2, r3, #1
 80009d0:	60ba      	str	r2, [r7, #8]
 80009d2:	b2ca      	uxtb	r2, r1
 80009d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	3301      	adds	r3, #1
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	697a      	ldr	r2, [r7, #20]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	dbf0      	blt.n	80009c6 <_read+0x12>
	}

return len;
 80009e4:	687b      	ldr	r3, [r7, #4]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b086      	sub	sp, #24
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	60f8      	str	r0, [r7, #12]
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	e009      	b.n	8000a14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	1c5a      	adds	r2, r3, #1
 8000a04:	60ba      	str	r2, [r7, #8]
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	3301      	adds	r3, #1
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	697a      	ldr	r2, [r7, #20]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	dbf1      	blt.n	8000a00 <_write+0x12>
	}
	return len;
 8000a1c:	687b      	ldr	r3, [r7, #4]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <_close>:

int _close(int file)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
	return 0;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr

08000a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a5c:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <_sbrk+0x5c>)
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <_sbrk+0x60>)
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d102      	bne.n	8000a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <_sbrk+0x64>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <_sbrk+0x68>)
 8000a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d207      	bcs.n	8000a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a84:	f006 fb8a 	bl	800719c <__errno>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a92:	e009      	b.n	8000aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <_sbrk+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <_sbrk+0x64>)
 8000aa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20005000 	.word	0x20005000
 8000ab4:	00000500 	.word	0x00000500
 8000ab8:	20000348 	.word	0x20000348
 8000abc:	20004630 	.word	0x20004630

08000ac0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <Reset_Handler>:
 8000acc:	480c      	ldr	r0, [pc, #48]	; (8000b00 <LoopFillZerobss+0x12>)
 8000ace:	490d      	ldr	r1, [pc, #52]	; (8000b04 <LoopFillZerobss+0x16>)
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <LoopFillZerobss+0x1a>)
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e002      	b.n	8000adc <LoopCopyDataInit>

08000ad6 <CopyDataInit>:
 8000ad6:	58d4      	ldr	r4, [r2, r3]
 8000ad8:	50c4      	str	r4, [r0, r3]
 8000ada:	3304      	adds	r3, #4

08000adc <LoopCopyDataInit>:
 8000adc:	18c4      	adds	r4, r0, r3
 8000ade:	428c      	cmp	r4, r1
 8000ae0:	d3f9      	bcc.n	8000ad6 <CopyDataInit>
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <LoopFillZerobss+0x1e>)
 8000ae4:	4c0a      	ldr	r4, [pc, #40]	; (8000b10 <LoopFillZerobss+0x22>)
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e001      	b.n	8000aee <LoopFillZerobss>

08000aea <FillZerobss>:
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	3204      	adds	r2, #4

08000aee <LoopFillZerobss>:
 8000aee:	42a2      	cmp	r2, r4
 8000af0:	d3fb      	bcc.n	8000aea <FillZerobss>
 8000af2:	f7ff ffe5 	bl	8000ac0 <SystemInit>
 8000af6:	f006 fc4d 	bl	8007394 <__libc_init_array>
 8000afa:	f7ff fb49 	bl	8000190 <main>
 8000afe:	4770      	bx	lr
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000078 	.word	0x20000078
 8000b08:	08008648 	.word	0x08008648
 8000b0c:	20000078 	.word	0x20000078
 8000b10:	2000462c 	.word	0x2000462c

08000b14 <ADC1_2_IRQHandler>:
 8000b14:	e7fe      	b.n	8000b14 <ADC1_2_IRQHandler>
	...

08000b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_Init+0x28>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <HAL_Init+0x28>)
 8000b22:	f043 0310 	orr.w	r3, r3, #16
 8000b26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f000 f8d1 	bl	8000cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2e:	200f      	movs	r0, #15
 8000b30:	f7ff fe9e 	bl	8000870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b34:	f7ff fd9e 	bl	8000674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40022000 	.word	0x40022000

08000b44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_IncTick+0x1c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <HAL_IncTick+0x20>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4413      	add	r3, r2
 8000b54:	4a03      	ldr	r2, [pc, #12]	; (8000b64 <HAL_IncTick+0x20>)
 8000b56:	6013      	str	r3, [r2, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	20000008 	.word	0x20000008
 8000b64:	20004614 	.word	0x20004614

08000b68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b02      	ldr	r3, [pc, #8]	; (8000b78 <HAL_GetTick+0x10>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr
 8000b78:	20004614 	.word	0x20004614

08000b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bae:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	60d3      	str	r3, [r2, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <__NVIC_GetPriorityGrouping+0x18>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	0a1b      	lsrs	r3, r3, #8
 8000bce:	f003 0307 	and.w	r3, r3, #7
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	db0b      	blt.n	8000c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	f003 021f 	and.w	r2, r3, #31
 8000bf8:	4906      	ldr	r1, [pc, #24]	; (8000c14 <__NVIC_EnableIRQ+0x34>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	095b      	lsrs	r3, r3, #5
 8000c00:	2001      	movs	r0, #1
 8000c02:	fa00 f202 	lsl.w	r2, r0, r2
 8000c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	; (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	; (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
         );
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	; 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ff4f 	bl	8000b7c <__NVIC_SetPriorityGrouping>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf8:	f7ff ff64 	bl	8000bc4 <__NVIC_GetPriorityGrouping>
 8000cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	68b9      	ldr	r1, [r7, #8]
 8000d02:	6978      	ldr	r0, [r7, #20]
 8000d04:	f7ff ffb2 	bl	8000c6c <NVIC_EncodePriority>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff81 	bl	8000c18 <__NVIC_SetPriority>
}
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff57 	bl	8000be0 <__NVIC_EnableIRQ>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e043      	b.n	8000dda <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	461a      	mov	r2, r3
 8000d58:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <HAL_DMA_Init+0xa8>)
 8000d5a:	4413      	add	r3, r2
 8000d5c:	4a22      	ldr	r2, [pc, #136]	; (8000de8 <HAL_DMA_Init+0xac>)
 8000d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d62:	091b      	lsrs	r3, r3, #4
 8000d64:	009a      	lsls	r2, r3, #2
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a1f      	ldr	r2, [pc, #124]	; (8000dec <HAL_DMA_Init+0xb0>)
 8000d6e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2202      	movs	r2, #2
 8000d74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000d86:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000d8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	bffdfff8 	.word	0xbffdfff8
 8000de8:	cccccccd 	.word	0xcccccccd
 8000dec:	40020000 	.word	0x40020000

08000df0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
 8000dfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d101      	bne.n	8000e10 <HAL_DMA_Start_IT+0x20>
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	e04a      	b.n	8000ea6 <HAL_DMA_Start_IT+0xb6>
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	2201      	movs	r2, #1
 8000e14:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d13a      	bne.n	8000e98 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2202      	movs	r2, #2
 8000e26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f022 0201 	bic.w	r2, r2, #1
 8000e3e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	68b9      	ldr	r1, [r7, #8]
 8000e46:	68f8      	ldr	r0, [r7, #12]
 8000e48:	f000 f9e8 	bl	800121c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d008      	beq.n	8000e66 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f042 020e 	orr.w	r2, r2, #14
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	e00f      	b.n	8000e86 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 0204 	bic.w	r2, r2, #4
 8000e74:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f042 020a 	orr.w	r2, r2, #10
 8000e84:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f042 0201 	orr.w	r2, r2, #1
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	e005      	b.n	8000ea4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b085      	sub	sp, #20
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d008      	beq.n	8000ed6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e020      	b.n	8000f18 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f022 020e 	bic.w	r2, r2, #14
 8000ee4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f022 0201 	bic.w	r2, r2, #1
 8000ef4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000efe:	2101      	movs	r1, #1
 8000f00:	fa01 f202 	lsl.w	r2, r1, r2
 8000f04:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
	...

08000f24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d005      	beq.n	8000f46 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	73fb      	strb	r3, [r7, #15]
 8000f44:	e051      	b.n	8000fea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f022 020e 	bic.w	r2, r2, #14
 8000f54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f022 0201 	bic.w	r2, r2, #1
 8000f64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a22      	ldr	r2, [pc, #136]	; (8000ff4 <HAL_DMA_Abort_IT+0xd0>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d029      	beq.n	8000fc4 <HAL_DMA_Abort_IT+0xa0>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a20      	ldr	r2, [pc, #128]	; (8000ff8 <HAL_DMA_Abort_IT+0xd4>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d022      	beq.n	8000fc0 <HAL_DMA_Abort_IT+0x9c>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a1f      	ldr	r2, [pc, #124]	; (8000ffc <HAL_DMA_Abort_IT+0xd8>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d01a      	beq.n	8000fba <HAL_DMA_Abort_IT+0x96>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a1d      	ldr	r2, [pc, #116]	; (8001000 <HAL_DMA_Abort_IT+0xdc>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d012      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x90>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a1c      	ldr	r2, [pc, #112]	; (8001004 <HAL_DMA_Abort_IT+0xe0>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d00a      	beq.n	8000fae <HAL_DMA_Abort_IT+0x8a>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a1a      	ldr	r2, [pc, #104]	; (8001008 <HAL_DMA_Abort_IT+0xe4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d102      	bne.n	8000fa8 <HAL_DMA_Abort_IT+0x84>
 8000fa2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000fa6:	e00e      	b.n	8000fc6 <HAL_DMA_Abort_IT+0xa2>
 8000fa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fac:	e00b      	b.n	8000fc6 <HAL_DMA_Abort_IT+0xa2>
 8000fae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb2:	e008      	b.n	8000fc6 <HAL_DMA_Abort_IT+0xa2>
 8000fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb8:	e005      	b.n	8000fc6 <HAL_DMA_Abort_IT+0xa2>
 8000fba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fbe:	e002      	b.n	8000fc6 <HAL_DMA_Abort_IT+0xa2>
 8000fc0:	2310      	movs	r3, #16
 8000fc2:	e000      	b.n	8000fc6 <HAL_DMA_Abort_IT+0xa2>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	4a11      	ldr	r2, [pc, #68]	; (800100c <HAL_DMA_Abort_IT+0xe8>)
 8000fc8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	4798      	blx	r3
    } 
  }
  return status;
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40020008 	.word	0x40020008
 8000ff8:	4002001c 	.word	0x4002001c
 8000ffc:	40020030 	.word	0x40020030
 8001000:	40020044 	.word	0x40020044
 8001004:	40020058 	.word	0x40020058
 8001008:	4002006c 	.word	0x4002006c
 800100c:	40020000 	.word	0x40020000

08001010 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	2204      	movs	r2, #4
 800102e:	409a      	lsls	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4013      	ands	r3, r2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d04f      	beq.n	80010d8 <HAL_DMA_IRQHandler+0xc8>
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	2b00      	cmp	r3, #0
 8001040:	d04a      	beq.n	80010d8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0320 	and.w	r3, r3, #32
 800104c:	2b00      	cmp	r3, #0
 800104e:	d107      	bne.n	8001060 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 0204 	bic.w	r2, r2, #4
 800105e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a66      	ldr	r2, [pc, #408]	; (8001200 <HAL_DMA_IRQHandler+0x1f0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d029      	beq.n	80010be <HAL_DMA_IRQHandler+0xae>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a65      	ldr	r2, [pc, #404]	; (8001204 <HAL_DMA_IRQHandler+0x1f4>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d022      	beq.n	80010ba <HAL_DMA_IRQHandler+0xaa>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a63      	ldr	r2, [pc, #396]	; (8001208 <HAL_DMA_IRQHandler+0x1f8>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d01a      	beq.n	80010b4 <HAL_DMA_IRQHandler+0xa4>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a62      	ldr	r2, [pc, #392]	; (800120c <HAL_DMA_IRQHandler+0x1fc>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d012      	beq.n	80010ae <HAL_DMA_IRQHandler+0x9e>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a60      	ldr	r2, [pc, #384]	; (8001210 <HAL_DMA_IRQHandler+0x200>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d00a      	beq.n	80010a8 <HAL_DMA_IRQHandler+0x98>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a5f      	ldr	r2, [pc, #380]	; (8001214 <HAL_DMA_IRQHandler+0x204>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d102      	bne.n	80010a2 <HAL_DMA_IRQHandler+0x92>
 800109c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010a0:	e00e      	b.n	80010c0 <HAL_DMA_IRQHandler+0xb0>
 80010a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010a6:	e00b      	b.n	80010c0 <HAL_DMA_IRQHandler+0xb0>
 80010a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010ac:	e008      	b.n	80010c0 <HAL_DMA_IRQHandler+0xb0>
 80010ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010b2:	e005      	b.n	80010c0 <HAL_DMA_IRQHandler+0xb0>
 80010b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b8:	e002      	b.n	80010c0 <HAL_DMA_IRQHandler+0xb0>
 80010ba:	2340      	movs	r3, #64	; 0x40
 80010bc:	e000      	b.n	80010c0 <HAL_DMA_IRQHandler+0xb0>
 80010be:	2304      	movs	r3, #4
 80010c0:	4a55      	ldr	r2, [pc, #340]	; (8001218 <HAL_DMA_IRQHandler+0x208>)
 80010c2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 8094 	beq.w	80011f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80010d6:	e08e      	b.n	80011f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	2202      	movs	r2, #2
 80010de:	409a      	lsls	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4013      	ands	r3, r2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d056      	beq.n	8001196 <HAL_DMA_IRQHandler+0x186>
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d051      	beq.n	8001196 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0320 	and.w	r3, r3, #32
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d10b      	bne.n	8001118 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 020a 	bic.w	r2, r2, #10
 800110e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2201      	movs	r2, #1
 8001114:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a38      	ldr	r2, [pc, #224]	; (8001200 <HAL_DMA_IRQHandler+0x1f0>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d029      	beq.n	8001176 <HAL_DMA_IRQHandler+0x166>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a37      	ldr	r2, [pc, #220]	; (8001204 <HAL_DMA_IRQHandler+0x1f4>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d022      	beq.n	8001172 <HAL_DMA_IRQHandler+0x162>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a35      	ldr	r2, [pc, #212]	; (8001208 <HAL_DMA_IRQHandler+0x1f8>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d01a      	beq.n	800116c <HAL_DMA_IRQHandler+0x15c>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a34      	ldr	r2, [pc, #208]	; (800120c <HAL_DMA_IRQHandler+0x1fc>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d012      	beq.n	8001166 <HAL_DMA_IRQHandler+0x156>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a32      	ldr	r2, [pc, #200]	; (8001210 <HAL_DMA_IRQHandler+0x200>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d00a      	beq.n	8001160 <HAL_DMA_IRQHandler+0x150>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a31      	ldr	r2, [pc, #196]	; (8001214 <HAL_DMA_IRQHandler+0x204>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d102      	bne.n	800115a <HAL_DMA_IRQHandler+0x14a>
 8001154:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001158:	e00e      	b.n	8001178 <HAL_DMA_IRQHandler+0x168>
 800115a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800115e:	e00b      	b.n	8001178 <HAL_DMA_IRQHandler+0x168>
 8001160:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001164:	e008      	b.n	8001178 <HAL_DMA_IRQHandler+0x168>
 8001166:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800116a:	e005      	b.n	8001178 <HAL_DMA_IRQHandler+0x168>
 800116c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001170:	e002      	b.n	8001178 <HAL_DMA_IRQHandler+0x168>
 8001172:	2320      	movs	r3, #32
 8001174:	e000      	b.n	8001178 <HAL_DMA_IRQHandler+0x168>
 8001176:	2302      	movs	r3, #2
 8001178:	4a27      	ldr	r2, [pc, #156]	; (8001218 <HAL_DMA_IRQHandler+0x208>)
 800117a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001188:	2b00      	cmp	r3, #0
 800118a:	d034      	beq.n	80011f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001194:	e02f      	b.n	80011f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	2208      	movs	r2, #8
 800119c:	409a      	lsls	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d028      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x1e8>
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	f003 0308 	and.w	r3, r3, #8
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d023      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 020e 	bic.w	r2, r2, #14
 80011be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c8:	2101      	movs	r1, #1
 80011ca:	fa01 f202 	lsl.w	r2, r1, r2
 80011ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2201      	movs	r2, #1
 80011da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d004      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	4798      	blx	r3
    }
  }
  return;
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
}
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40020008 	.word	0x40020008
 8001204:	4002001c 	.word	0x4002001c
 8001208:	40020030 	.word	0x40020030
 800120c:	40020044 	.word	0x40020044
 8001210:	40020058 	.word	0x40020058
 8001214:	4002006c 	.word	0x4002006c
 8001218:	40020000 	.word	0x40020000

0800121c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
 8001228:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001232:	2101      	movs	r1, #1
 8001234:	fa01 f202 	lsl.w	r2, r1, r2
 8001238:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b10      	cmp	r3, #16
 8001248:	d108      	bne.n	800125c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800125a:	e007      	b.n	800126c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68ba      	ldr	r2, [r7, #8]
 8001262:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	60da      	str	r2, [r3, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
	...

08001278 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001278:	b480      	push	{r7}
 800127a:	b08b      	sub	sp, #44	; 0x2c
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128a:	e169      	b.n	8001560 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800128c:	2201      	movs	r2, #1
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	69fa      	ldr	r2, [r7, #28]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	f040 8158 	bne.w	800155a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	4a9a      	ldr	r2, [pc, #616]	; (8001518 <HAL_GPIO_Init+0x2a0>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d05e      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
 80012b4:	4a98      	ldr	r2, [pc, #608]	; (8001518 <HAL_GPIO_Init+0x2a0>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d875      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012ba:	4a98      	ldr	r2, [pc, #608]	; (800151c <HAL_GPIO_Init+0x2a4>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d058      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
 80012c0:	4a96      	ldr	r2, [pc, #600]	; (800151c <HAL_GPIO_Init+0x2a4>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d86f      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012c6:	4a96      	ldr	r2, [pc, #600]	; (8001520 <HAL_GPIO_Init+0x2a8>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d052      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
 80012cc:	4a94      	ldr	r2, [pc, #592]	; (8001520 <HAL_GPIO_Init+0x2a8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d869      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012d2:	4a94      	ldr	r2, [pc, #592]	; (8001524 <HAL_GPIO_Init+0x2ac>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d04c      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
 80012d8:	4a92      	ldr	r2, [pc, #584]	; (8001524 <HAL_GPIO_Init+0x2ac>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d863      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012de:	4a92      	ldr	r2, [pc, #584]	; (8001528 <HAL_GPIO_Init+0x2b0>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d046      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
 80012e4:	4a90      	ldr	r2, [pc, #576]	; (8001528 <HAL_GPIO_Init+0x2b0>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d85d      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012ea:	2b12      	cmp	r3, #18
 80012ec:	d82a      	bhi.n	8001344 <HAL_GPIO_Init+0xcc>
 80012ee:	2b12      	cmp	r3, #18
 80012f0:	d859      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012f2:	a201      	add	r2, pc, #4	; (adr r2, 80012f8 <HAL_GPIO_Init+0x80>)
 80012f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f8:	08001373 	.word	0x08001373
 80012fc:	0800134d 	.word	0x0800134d
 8001300:	0800135f 	.word	0x0800135f
 8001304:	080013a1 	.word	0x080013a1
 8001308:	080013a7 	.word	0x080013a7
 800130c:	080013a7 	.word	0x080013a7
 8001310:	080013a7 	.word	0x080013a7
 8001314:	080013a7 	.word	0x080013a7
 8001318:	080013a7 	.word	0x080013a7
 800131c:	080013a7 	.word	0x080013a7
 8001320:	080013a7 	.word	0x080013a7
 8001324:	080013a7 	.word	0x080013a7
 8001328:	080013a7 	.word	0x080013a7
 800132c:	080013a7 	.word	0x080013a7
 8001330:	080013a7 	.word	0x080013a7
 8001334:	080013a7 	.word	0x080013a7
 8001338:	080013a7 	.word	0x080013a7
 800133c:	08001355 	.word	0x08001355
 8001340:	08001369 	.word	0x08001369
 8001344:	4a79      	ldr	r2, [pc, #484]	; (800152c <HAL_GPIO_Init+0x2b4>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d013      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800134a:	e02c      	b.n	80013a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	623b      	str	r3, [r7, #32]
          break;
 8001352:	e029      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	3304      	adds	r3, #4
 800135a:	623b      	str	r3, [r7, #32]
          break;
 800135c:	e024      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	3308      	adds	r3, #8
 8001364:	623b      	str	r3, [r7, #32]
          break;
 8001366:	e01f      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	330c      	adds	r3, #12
 800136e:	623b      	str	r3, [r7, #32]
          break;
 8001370:	e01a      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d102      	bne.n	8001380 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800137a:	2304      	movs	r3, #4
 800137c:	623b      	str	r3, [r7, #32]
          break;
 800137e:	e013      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d105      	bne.n	8001394 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001388:	2308      	movs	r3, #8
 800138a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	611a      	str	r2, [r3, #16]
          break;
 8001392:	e009      	b.n	80013a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001394:	2308      	movs	r3, #8
 8001396:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69fa      	ldr	r2, [r7, #28]
 800139c:	615a      	str	r2, [r3, #20]
          break;
 800139e:	e003      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
          break;
 80013a4:	e000      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          break;
 80013a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	2bff      	cmp	r3, #255	; 0xff
 80013ac:	d801      	bhi.n	80013b2 <HAL_GPIO_Init+0x13a>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	e001      	b.n	80013b6 <HAL_GPIO_Init+0x13e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3304      	adds	r3, #4
 80013b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	2bff      	cmp	r3, #255	; 0xff
 80013bc:	d802      	bhi.n	80013c4 <HAL_GPIO_Init+0x14c>
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	e002      	b.n	80013ca <HAL_GPIO_Init+0x152>
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	3b08      	subs	r3, #8
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	210f      	movs	r1, #15
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	fa01 f303 	lsl.w	r3, r1, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	401a      	ands	r2, r3
 80013dc:	6a39      	ldr	r1, [r7, #32]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	431a      	orrs	r2, r3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 80b1 	beq.w	800155a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013f8:	4b4d      	ldr	r3, [pc, #308]	; (8001530 <HAL_GPIO_Init+0x2b8>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a4c      	ldr	r2, [pc, #304]	; (8001530 <HAL_GPIO_Init+0x2b8>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	4b4a      	ldr	r3, [pc, #296]	; (8001530 <HAL_GPIO_Init+0x2b8>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001410:	4a48      	ldr	r2, [pc, #288]	; (8001534 <HAL_GPIO_Init+0x2bc>)
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	3302      	adds	r3, #2
 8001418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	220f      	movs	r2, #15
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	4013      	ands	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a40      	ldr	r2, [pc, #256]	; (8001538 <HAL_GPIO_Init+0x2c0>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d013      	beq.n	8001464 <HAL_GPIO_Init+0x1ec>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a3f      	ldr	r2, [pc, #252]	; (800153c <HAL_GPIO_Init+0x2c4>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d00d      	beq.n	8001460 <HAL_GPIO_Init+0x1e8>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a3e      	ldr	r2, [pc, #248]	; (8001540 <HAL_GPIO_Init+0x2c8>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d007      	beq.n	800145c <HAL_GPIO_Init+0x1e4>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a3d      	ldr	r2, [pc, #244]	; (8001544 <HAL_GPIO_Init+0x2cc>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d101      	bne.n	8001458 <HAL_GPIO_Init+0x1e0>
 8001454:	2303      	movs	r3, #3
 8001456:	e006      	b.n	8001466 <HAL_GPIO_Init+0x1ee>
 8001458:	2304      	movs	r3, #4
 800145a:	e004      	b.n	8001466 <HAL_GPIO_Init+0x1ee>
 800145c:	2302      	movs	r3, #2
 800145e:	e002      	b.n	8001466 <HAL_GPIO_Init+0x1ee>
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <HAL_GPIO_Init+0x1ee>
 8001464:	2300      	movs	r3, #0
 8001466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001468:	f002 0203 	and.w	r2, r2, #3
 800146c:	0092      	lsls	r2, r2, #2
 800146e:	4093      	lsls	r3, r2
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	4313      	orrs	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001476:	492f      	ldr	r1, [pc, #188]	; (8001534 <HAL_GPIO_Init+0x2bc>)
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	3302      	adds	r3, #2
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d006      	beq.n	800149e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001490:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	492c      	ldr	r1, [pc, #176]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	600b      	str	r3, [r1, #0]
 800149c:	e006      	b.n	80014ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800149e:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	4928      	ldr	r1, [pc, #160]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014a8:	4013      	ands	r3, r2
 80014aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d006      	beq.n	80014c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014b8:	4b23      	ldr	r3, [pc, #140]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	4922      	ldr	r1, [pc, #136]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	604b      	str	r3, [r1, #4]
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014c6:	4b20      	ldr	r3, [pc, #128]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	491e      	ldr	r1, [pc, #120]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014d0:	4013      	ands	r3, r2
 80014d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d006      	beq.n	80014ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014e0:	4b19      	ldr	r3, [pc, #100]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	4918      	ldr	r1, [pc, #96]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	608b      	str	r3, [r1, #8]
 80014ec:	e006      	b.n	80014fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014ee:	4b16      	ldr	r3, [pc, #88]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	4914      	ldr	r1, [pc, #80]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d021      	beq.n	800154c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	490e      	ldr	r1, [pc, #56]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	60cb      	str	r3, [r1, #12]
 8001514:	e021      	b.n	800155a <HAL_GPIO_Init+0x2e2>
 8001516:	bf00      	nop
 8001518:	10320000 	.word	0x10320000
 800151c:	10310000 	.word	0x10310000
 8001520:	10220000 	.word	0x10220000
 8001524:	10210000 	.word	0x10210000
 8001528:	10120000 	.word	0x10120000
 800152c:	10110000 	.word	0x10110000
 8001530:	40021000 	.word	0x40021000
 8001534:	40010000 	.word	0x40010000
 8001538:	40010800 	.word	0x40010800
 800153c:	40010c00 	.word	0x40010c00
 8001540:	40011000 	.word	0x40011000
 8001544:	40011400 	.word	0x40011400
 8001548:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <HAL_GPIO_Init+0x304>)
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	43db      	mvns	r3, r3
 8001554:	4909      	ldr	r1, [pc, #36]	; (800157c <HAL_GPIO_Init+0x304>)
 8001556:	4013      	ands	r3, r2
 8001558:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	3301      	adds	r3, #1
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	fa22 f303 	lsr.w	r3, r2, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	f47f ae8e 	bne.w	800128c <HAL_GPIO_Init+0x14>
  }
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	372c      	adds	r7, #44	; 0x2c
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	40010400 	.word	0x40010400

08001580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
 800158c:	4613      	mov	r3, r2
 800158e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001590:	787b      	ldrb	r3, [r7, #1]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800159c:	e003      	b.n	80015a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800159e:	887b      	ldrh	r3, [r7, #2]
 80015a0:	041a      	lsls	r2, r3, #16
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	611a      	str	r2, [r3, #16]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015bc:	695a      	ldr	r2, [r3, #20]
 80015be:	88fb      	ldrh	r3, [r7, #6]
 80015c0:	4013      	ands	r3, r2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d006      	beq.n	80015d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015c6:	4a05      	ldr	r2, [pc, #20]	; (80015dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015c8:	88fb      	ldrh	r3, [r7, #6]
 80015ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015cc:	88fb      	ldrh	r3, [r7, #6]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 f806 	bl	80015e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40010400 	.word	0x40010400

080015e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e26c      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 8087 	beq.w	8001722 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001614:	4b92      	ldr	r3, [pc, #584]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 030c 	and.w	r3, r3, #12
 800161c:	2b04      	cmp	r3, #4
 800161e:	d00c      	beq.n	800163a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001620:	4b8f      	ldr	r3, [pc, #572]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 030c 	and.w	r3, r3, #12
 8001628:	2b08      	cmp	r3, #8
 800162a:	d112      	bne.n	8001652 <HAL_RCC_OscConfig+0x5e>
 800162c:	4b8c      	ldr	r3, [pc, #560]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001638:	d10b      	bne.n	8001652 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163a:	4b89      	ldr	r3, [pc, #548]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d06c      	beq.n	8001720 <HAL_RCC_OscConfig+0x12c>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d168      	bne.n	8001720 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e246      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165a:	d106      	bne.n	800166a <HAL_RCC_OscConfig+0x76>
 800165c:	4b80      	ldr	r3, [pc, #512]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a7f      	ldr	r2, [pc, #508]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 8001662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	e02e      	b.n	80016c8 <HAL_RCC_OscConfig+0xd4>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10c      	bne.n	800168c <HAL_RCC_OscConfig+0x98>
 8001672:	4b7b      	ldr	r3, [pc, #492]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a7a      	ldr	r2, [pc, #488]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 8001678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	4b78      	ldr	r3, [pc, #480]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a77      	ldr	r2, [pc, #476]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 8001684:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	e01d      	b.n	80016c8 <HAL_RCC_OscConfig+0xd4>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001694:	d10c      	bne.n	80016b0 <HAL_RCC_OscConfig+0xbc>
 8001696:	4b72      	ldr	r3, [pc, #456]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a71      	ldr	r2, [pc, #452]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 800169c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	4b6f      	ldr	r3, [pc, #444]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a6e      	ldr	r2, [pc, #440]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 80016a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	e00b      	b.n	80016c8 <HAL_RCC_OscConfig+0xd4>
 80016b0:	4b6b      	ldr	r3, [pc, #428]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a6a      	ldr	r2, [pc, #424]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 80016b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	4b68      	ldr	r3, [pc, #416]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a67      	ldr	r2, [pc, #412]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 80016c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d013      	beq.n	80016f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff fa4a 	bl	8000b68 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d8:	f7ff fa46 	bl	8000b68 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b64      	cmp	r3, #100	; 0x64
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e1fa      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ea:	4b5d      	ldr	r3, [pc, #372]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0xe4>
 80016f6:	e014      	b.n	8001722 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff fa36 	bl	8000b68 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001700:	f7ff fa32 	bl	8000b68 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b64      	cmp	r3, #100	; 0x64
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e1e6      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001712:	4b53      	ldr	r3, [pc, #332]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f0      	bne.n	8001700 <HAL_RCC_OscConfig+0x10c>
 800171e:	e000      	b.n	8001722 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d063      	beq.n	80017f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800172e:	4b4c      	ldr	r3, [pc, #304]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f003 030c 	and.w	r3, r3, #12
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00b      	beq.n	8001752 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800173a:	4b49      	ldr	r3, [pc, #292]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	2b08      	cmp	r3, #8
 8001744:	d11c      	bne.n	8001780 <HAL_RCC_OscConfig+0x18c>
 8001746:	4b46      	ldr	r3, [pc, #280]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d116      	bne.n	8001780 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001752:	4b43      	ldr	r3, [pc, #268]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d005      	beq.n	800176a <HAL_RCC_OscConfig+0x176>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d001      	beq.n	800176a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e1ba      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176a:	4b3d      	ldr	r3, [pc, #244]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	4939      	ldr	r1, [pc, #228]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 800177a:	4313      	orrs	r3, r2
 800177c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177e:	e03a      	b.n	80017f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d020      	beq.n	80017ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001788:	4b36      	ldr	r3, [pc, #216]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 800178a:	2201      	movs	r2, #1
 800178c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178e:	f7ff f9eb 	bl	8000b68 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001796:	f7ff f9e7 	bl	8000b68 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e19b      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a8:	4b2d      	ldr	r3, [pc, #180]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0f0      	beq.n	8001796 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b4:	4b2a      	ldr	r3, [pc, #168]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	4927      	ldr	r1, [pc, #156]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	600b      	str	r3, [r1, #0]
 80017c8:	e015      	b.n	80017f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ca:	4b26      	ldr	r3, [pc, #152]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7ff f9ca 	bl	8000b68 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d8:	f7ff f9c6 	bl	8000b68 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e17a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ea:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f0      	bne.n	80017d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d03a      	beq.n	8001878 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d019      	beq.n	800183e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800180a:	4b17      	ldr	r3, [pc, #92]	; (8001868 <HAL_RCC_OscConfig+0x274>)
 800180c:	2201      	movs	r2, #1
 800180e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001810:	f7ff f9aa 	bl	8000b68 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001818:	f7ff f9a6 	bl	8000b68 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e15a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182a:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001836:	2001      	movs	r0, #1
 8001838:	f000 fb08 	bl	8001e4c <RCC_Delay>
 800183c:	e01c      	b.n	8001878 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800183e:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <HAL_RCC_OscConfig+0x274>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001844:	f7ff f990 	bl	8000b68 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800184a:	e00f      	b.n	800186c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800184c:	f7ff f98c 	bl	8000b68 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d908      	bls.n	800186c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e140      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
 800185e:	bf00      	nop
 8001860:	40021000 	.word	0x40021000
 8001864:	42420000 	.word	0x42420000
 8001868:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800186c:	4b9e      	ldr	r3, [pc, #632]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1e9      	bne.n	800184c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 80a6 	beq.w	80019d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001886:	2300      	movs	r3, #0
 8001888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800188a:	4b97      	ldr	r3, [pc, #604]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10d      	bne.n	80018b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	4b94      	ldr	r3, [pc, #592]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	4a93      	ldr	r2, [pc, #588]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 800189c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a0:	61d3      	str	r3, [r2, #28]
 80018a2:	4b91      	ldr	r3, [pc, #580]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ae:	2301      	movs	r3, #1
 80018b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b2:	4b8e      	ldr	r3, [pc, #568]	; (8001aec <HAL_RCC_OscConfig+0x4f8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d118      	bne.n	80018f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018be:	4b8b      	ldr	r3, [pc, #556]	; (8001aec <HAL_RCC_OscConfig+0x4f8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a8a      	ldr	r2, [pc, #552]	; (8001aec <HAL_RCC_OscConfig+0x4f8>)
 80018c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ca:	f7ff f94d 	bl	8000b68 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d2:	f7ff f949 	bl	8000b68 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b64      	cmp	r3, #100	; 0x64
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e0fd      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e4:	4b81      	ldr	r3, [pc, #516]	; (8001aec <HAL_RCC_OscConfig+0x4f8>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d106      	bne.n	8001906 <HAL_RCC_OscConfig+0x312>
 80018f8:	4b7b      	ldr	r3, [pc, #492]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	4a7a      	ldr	r2, [pc, #488]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6213      	str	r3, [r2, #32]
 8001904:	e02d      	b.n	8001962 <HAL_RCC_OscConfig+0x36e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10c      	bne.n	8001928 <HAL_RCC_OscConfig+0x334>
 800190e:	4b76      	ldr	r3, [pc, #472]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	4a75      	ldr	r2, [pc, #468]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001914:	f023 0301 	bic.w	r3, r3, #1
 8001918:	6213      	str	r3, [r2, #32]
 800191a:	4b73      	ldr	r3, [pc, #460]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	4a72      	ldr	r2, [pc, #456]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001920:	f023 0304 	bic.w	r3, r3, #4
 8001924:	6213      	str	r3, [r2, #32]
 8001926:	e01c      	b.n	8001962 <HAL_RCC_OscConfig+0x36e>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	2b05      	cmp	r3, #5
 800192e:	d10c      	bne.n	800194a <HAL_RCC_OscConfig+0x356>
 8001930:	4b6d      	ldr	r3, [pc, #436]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	4a6c      	ldr	r2, [pc, #432]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001936:	f043 0304 	orr.w	r3, r3, #4
 800193a:	6213      	str	r3, [r2, #32]
 800193c:	4b6a      	ldr	r3, [pc, #424]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	4a69      	ldr	r2, [pc, #420]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6213      	str	r3, [r2, #32]
 8001948:	e00b      	b.n	8001962 <HAL_RCC_OscConfig+0x36e>
 800194a:	4b67      	ldr	r3, [pc, #412]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	4a66      	ldr	r2, [pc, #408]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001950:	f023 0301 	bic.w	r3, r3, #1
 8001954:	6213      	str	r3, [r2, #32]
 8001956:	4b64      	ldr	r3, [pc, #400]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	4a63      	ldr	r2, [pc, #396]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 800195c:	f023 0304 	bic.w	r3, r3, #4
 8001960:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d015      	beq.n	8001996 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196a:	f7ff f8fd 	bl	8000b68 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001970:	e00a      	b.n	8001988 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001972:	f7ff f8f9 	bl	8000b68 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001980:	4293      	cmp	r3, r2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e0ab      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001988:	4b57      	ldr	r3, [pc, #348]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0ee      	beq.n	8001972 <HAL_RCC_OscConfig+0x37e>
 8001994:	e014      	b.n	80019c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001996:	f7ff f8e7 	bl	8000b68 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800199c:	e00a      	b.n	80019b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199e:	f7ff f8e3 	bl	8000b68 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e095      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b4:	4b4c      	ldr	r3, [pc, #304]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1ee      	bne.n	800199e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019c0:	7dfb      	ldrb	r3, [r7, #23]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d105      	bne.n	80019d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c6:	4b48      	ldr	r3, [pc, #288]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	4a47      	ldr	r2, [pc, #284]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 80019cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 8081 	beq.w	8001ade <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019dc:	4b42      	ldr	r3, [pc, #264]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 030c 	and.w	r3, r3, #12
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d061      	beq.n	8001aac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d146      	bne.n	8001a7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f0:	4b3f      	ldr	r3, [pc, #252]	; (8001af0 <HAL_RCC_OscConfig+0x4fc>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f6:	f7ff f8b7 	bl	8000b68 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fe:	f7ff f8b3 	bl	8000b68 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e067      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a10:	4b35      	ldr	r3, [pc, #212]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f0      	bne.n	80019fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a24:	d108      	bne.n	8001a38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a26:	4b30      	ldr	r3, [pc, #192]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	492d      	ldr	r1, [pc, #180]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a38:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a19      	ldr	r1, [r3, #32]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	430b      	orrs	r3, r1
 8001a4a:	4927      	ldr	r1, [pc, #156]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a50:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <HAL_RCC_OscConfig+0x4fc>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a56:	f7ff f887 	bl	8000b68 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5e:	f7ff f883 	bl	8000b68 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e037      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a70:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0f0      	beq.n	8001a5e <HAL_RCC_OscConfig+0x46a>
 8001a7c:	e02f      	b.n	8001ade <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7e:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <HAL_RCC_OscConfig+0x4fc>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a84:	f7ff f870 	bl	8000b68 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8c:	f7ff f86c 	bl	8000b68 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e020      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a9e:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x498>
 8001aaa:	e018      	b.n	8001ade <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e013      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d106      	bne.n	8001ada <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d001      	beq.n	8001ade <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40007000 	.word	0x40007000
 8001af0:	42420060 	.word	0x42420060

08001af4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0d0      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b08:	4b6a      	ldr	r3, [pc, #424]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d910      	bls.n	8001b38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b67      	ldr	r3, [pc, #412]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 0207 	bic.w	r2, r3, #7
 8001b1e:	4965      	ldr	r1, [pc, #404]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	4b63      	ldr	r3, [pc, #396]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0b8      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d020      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b50:	4b59      	ldr	r3, [pc, #356]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	4a58      	ldr	r2, [pc, #352]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b68:	4b53      	ldr	r3, [pc, #332]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	4a52      	ldr	r2, [pc, #328]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b74:	4b50      	ldr	r3, [pc, #320]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	494d      	ldr	r1, [pc, #308]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d040      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d107      	bne.n	8001baa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9a:	4b47      	ldr	r3, [pc, #284]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d115      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e07f      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d107      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb2:	4b41      	ldr	r3, [pc, #260]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d109      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e073      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc2:	4b3d      	ldr	r3, [pc, #244]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e06b      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bd2:	4b39      	ldr	r3, [pc, #228]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f023 0203 	bic.w	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4936      	ldr	r1, [pc, #216]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001be4:	f7fe ffc0 	bl	8000b68 <HAL_GetTick>
 8001be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bea:	e00a      	b.n	8001c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bec:	f7fe ffbc 	bl	8000b68 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e053      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c02:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 020c 	and.w	r2, r3, #12
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d1eb      	bne.n	8001bec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c14:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d210      	bcs.n	8001c44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c22:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f023 0207 	bic.w	r2, r3, #7
 8001c2a:	4922      	ldr	r1, [pc, #136]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c32:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e032      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d008      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c50:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	4916      	ldr	r1, [pc, #88]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d009      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c6e:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	490e      	ldr	r1, [pc, #56]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c82:	f000 f821 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8001c86:	4602      	mov	r2, r0
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	091b      	lsrs	r3, r3, #4
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	490a      	ldr	r1, [pc, #40]	; (8001cbc <HAL_RCC_ClockConfig+0x1c8>)
 8001c94:	5ccb      	ldrb	r3, [r1, r3]
 8001c96:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9a:	4a09      	ldr	r2, [pc, #36]	; (8001cc0 <HAL_RCC_ClockConfig+0x1cc>)
 8001c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fde4 	bl	8000870 <HAL_InitTick>

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40022000 	.word	0x40022000
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	08007f28 	.word	0x08007f28
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc8:	b490      	push	{r4, r7}
 8001cca:	b08a      	sub	sp, #40	; 0x28
 8001ccc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cce:	4b2a      	ldr	r3, [pc, #168]	; (8001d78 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cd0:	1d3c      	adds	r4, r7, #4
 8001cd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cd8:	f240 2301 	movw	r3, #513	; 0x201
 8001cdc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cf2:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d002      	beq.n	8001d08 <HAL_RCC_GetSysClockFreq+0x40>
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d003      	beq.n	8001d0e <HAL_RCC_GetSysClockFreq+0x46>
 8001d06:	e02d      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d08:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d0a:	623b      	str	r3, [r7, #32]
      break;
 8001d0c:	e02d      	b.n	8001d6a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	0c9b      	lsrs	r3, r3, #18
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d20:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d013      	beq.n	8001d54 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d2c:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	0c5b      	lsrs	r3, r3, #17
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d40:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	4a0e      	ldr	r2, [pc, #56]	; (8001d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d46:	fb02 f203 	mul.w	r2, r2, r3
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
 8001d52:	e004      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	4a0b      	ldr	r2, [pc, #44]	; (8001d84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d58:	fb02 f303 	mul.w	r3, r2, r3
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	623b      	str	r3, [r7, #32]
      break;
 8001d62:	e002      	b.n	8001d6a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d66:	623b      	str	r3, [r7, #32]
      break;
 8001d68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3728      	adds	r7, #40	; 0x28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc90      	pop	{r4, r7}
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	08007f10 	.word	0x08007f10
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	007a1200 	.word	0x007a1200
 8001d84:	003d0900 	.word	0x003d0900

08001d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d8c:	4b02      	ldr	r3, [pc, #8]	; (8001d98 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	20000000 	.word	0x20000000

08001d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001da0:	f7ff fff2 	bl	8001d88 <HAL_RCC_GetHCLKFreq>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	0a1b      	lsrs	r3, r3, #8
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	4903      	ldr	r1, [pc, #12]	; (8001dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001db2:	5ccb      	ldrb	r3, [r1, r3]
 8001db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	08007f38 	.word	0x08007f38

08001dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dc8:	f7ff ffde 	bl	8001d88 <HAL_RCC_GetHCLKFreq>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	0adb      	lsrs	r3, r3, #11
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	4903      	ldr	r1, [pc, #12]	; (8001de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dda:	5ccb      	ldrb	r3, [r1, r3]
 8001ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	08007f38 	.word	0x08007f38

08001dec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	220f      	movs	r2, #15
 8001dfa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <HAL_RCC_GetClockConfig+0x58>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 0203 	and.w	r2, r3, #3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e08:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <HAL_RCC_GetClockConfig+0x58>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <HAL_RCC_GetClockConfig+0x58>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <HAL_RCC_GetClockConfig+0x58>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	08db      	lsrs	r3, r3, #3
 8001e26:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_RCC_GetClockConfig+0x5c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0207 	and.w	r2, r3, #7
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40022000 	.word	0x40022000

08001e4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <RCC_Delay+0x34>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <RCC_Delay+0x38>)
 8001e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5e:	0a5b      	lsrs	r3, r3, #9
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	fb02 f303 	mul.w	r3, r2, r3
 8001e66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e68:	bf00      	nop
  }
  while (Delay --);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1e5a      	subs	r2, r3, #1
 8001e6e:	60fa      	str	r2, [r7, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f9      	bne.n	8001e68 <RCC_Delay+0x1c>
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr
 8001e80:	20000000 	.word	0x20000000
 8001e84:	10624dd3 	.word	0x10624dd3

08001e88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e096      	b.n	8001fc8 <HAL_SPI_Init+0x140>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d108      	bne.n	8001eb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001eaa:	d009      	beq.n	8001ec0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	61da      	str	r2, [r3, #28]
 8001eb2:	e005      	b.n	8001ec0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d126      	bne.n	8001f20 <HAL_SPI_Init+0x98>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a3c      	ldr	r2, [pc, #240]	; (8001fd0 <HAL_SPI_Init+0x148>)
 8001ede:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a3c      	ldr	r2, [pc, #240]	; (8001fd4 <HAL_SPI_Init+0x14c>)
 8001ee4:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a3b      	ldr	r2, [pc, #236]	; (8001fd8 <HAL_SPI_Init+0x150>)
 8001eea:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a3b      	ldr	r2, [pc, #236]	; (8001fdc <HAL_SPI_Init+0x154>)
 8001ef0:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a3a      	ldr	r2, [pc, #232]	; (8001fe0 <HAL_SPI_Init+0x158>)
 8001ef6:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a3a      	ldr	r2, [pc, #232]	; (8001fe4 <HAL_SPI_Init+0x15c>)
 8001efc:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a39      	ldr	r2, [pc, #228]	; (8001fe8 <HAL_SPI_Init+0x160>)
 8001f02:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a39      	ldr	r2, [pc, #228]	; (8001fec <HAL_SPI_Init+0x164>)
 8001f08:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d102      	bne.n	8001f18 <HAL_SPI_Init+0x90>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a36      	ldr	r2, [pc, #216]	; (8001ff0 <HAL_SPI_Init+0x168>)
 8001f16:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f84:	ea42 0103 	orr.w	r1, r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	0c1a      	lsrs	r2, r3, #16
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f002 0204 	and.w	r2, r2, #4
 8001fa6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	69da      	ldr	r2, [r3, #28]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fb6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	08004035 	.word	0x08004035
 8001fd4:	080040f5 	.word	0x080040f5
 8001fd8:	080026a5 	.word	0x080026a5
 8001fdc:	080026b7 	.word	0x080026b7
 8001fe0:	080026c9 	.word	0x080026c9
 8001fe4:	080026db 	.word	0x080026db
 8001fe8:	080026ed 	.word	0x080026ed
 8001fec:	080026ff 	.word	0x080026ff
 8001ff0:	080006e5 	.word	0x080006e5

08001ff4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b087      	sub	sp, #28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	4613      	mov	r3, r2
 8002000:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_SPI_Transmit_IT+0x20>
 8002010:	2302      	movs	r3, #2
 8002012:	e06f      	b.n	80020f4 <HAL_SPI_Transmit_IT+0x100>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d002      	beq.n	8002028 <HAL_SPI_Transmit_IT+0x34>
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d102      	bne.n	800202e <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800202c:	e05d      	b.n	80020ea <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b01      	cmp	r3, #1
 8002038:	d002      	beq.n	8002040 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800203a:	2302      	movs	r3, #2
 800203c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800203e:	e054      	b.n	80020ea <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2203      	movs	r2, #3
 8002044:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	88fa      	ldrh	r2, [r7, #6]
 8002058:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	88fa      	ldrh	r2, [r7, #6]
 800205e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4a1f      	ldr	r2, [pc, #124]	; (8002100 <HAL_SPI_Transmit_IT+0x10c>)
 8002084:	645a      	str	r2, [r3, #68]	; 0x44
 8002086:	e002      	b.n	800208e <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4a1e      	ldr	r2, [pc, #120]	; (8002104 <HAL_SPI_Transmit_IT+0x110>)
 800208c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002096:	d10f      	bne.n	80020b8 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80020c6:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d2:	2b40      	cmp	r3, #64	; 0x40
 80020d4:	d008      	beq.n	80020e8 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	e000      	b.n	80020ea <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 80020e8:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	371c      	adds	r7, #28
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	08002a9d 	.word	0x08002a9d
 8002104:	08002a57 	.word	0x08002a57

08002108 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	4613      	mov	r3, r2
 8002114:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d110      	bne.n	8002144 <HAL_SPI_Receive_IT+0x3c>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800212a:	d10b      	bne.n	8002144 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2204      	movs	r2, #4
 8002130:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 f882 	bl	8002244 <HAL_SPI_TransmitReceive_IT>
 8002140:	4603      	mov	r3, r0
 8002142:	e076      	b.n	8002232 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_SPI_Receive_IT+0x4a>
 800214e:	2302      	movs	r3, #2
 8002150:	e06f      	b.n	8002232 <HAL_SPI_Receive_IT+0x12a>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b01      	cmp	r3, #1
 8002164:	d002      	beq.n	800216c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8002166:	2302      	movs	r3, #2
 8002168:	75fb      	strb	r3, [r7, #23]
    goto error;
 800216a:	e05d      	b.n	8002228 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d002      	beq.n	8002178 <HAL_SPI_Receive_IT+0x70>
 8002172:	88fb      	ldrh	r3, [r7, #6]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d102      	bne.n	800217e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800217c:	e054      	b.n	8002228 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2204      	movs	r2, #4
 8002182:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	88fa      	ldrh	r2, [r7, #6]
 8002196:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	88fa      	ldrh	r2, [r7, #6]
 800219c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4a1e      	ldr	r2, [pc, #120]	; (800223c <HAL_SPI_Receive_IT+0x134>)
 80021c2:	641a      	str	r2, [r3, #64]	; 0x40
 80021c4:	e002      	b.n	80021cc <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4a1d      	ldr	r2, [pc, #116]	; (8002240 <HAL_SPI_Receive_IT+0x138>)
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021d4:	d10f      	bne.n	80021f6 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002204:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002210:	2b40      	cmp	r3, #64	; 0x40
 8002212:	d008      	beq.n	8002226 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	e000      	b.n	8002228 <HAL_SPI_Receive_IT+0x120>
  }

error :
 8002226:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002230:	7dfb      	ldrb	r3, [r7, #23]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	08002a11 	.word	0x08002a11
 8002240:	080029c7 	.word	0x080029c7

08002244 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002244:	b480      	push	{r7}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800225c:	2b01      	cmp	r3, #1
 800225e:	d101      	bne.n	8002264 <HAL_SPI_TransmitReceive_IT+0x20>
 8002260:	2302      	movs	r3, #2
 8002262:	e075      	b.n	8002350 <HAL_SPI_TransmitReceive_IT+0x10c>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002272:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800227a:	7dbb      	ldrb	r3, [r7, #22]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d00d      	beq.n	800229c <HAL_SPI_TransmitReceive_IT+0x58>
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002286:	d106      	bne.n	8002296 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d102      	bne.n	8002296 <HAL_SPI_TransmitReceive_IT+0x52>
 8002290:	7dbb      	ldrb	r3, [r7, #22]
 8002292:	2b04      	cmp	r3, #4
 8002294:	d002      	beq.n	800229c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8002296:	2302      	movs	r3, #2
 8002298:	75fb      	strb	r3, [r7, #23]
    goto error;
 800229a:	e054      	b.n	8002346 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <HAL_SPI_TransmitReceive_IT+0x6a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d002      	beq.n	80022ae <HAL_SPI_TransmitReceive_IT+0x6a>
 80022a8:	887b      	ldrh	r3, [r7, #2]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d102      	bne.n	80022b4 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022b2:	e048      	b.n	8002346 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d003      	beq.n	80022c8 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2205      	movs	r2, #5
 80022c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	887a      	ldrh	r2, [r7, #2]
 80022d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	887a      	ldrh	r2, [r7, #2]
 80022de:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	887a      	ldrh	r2, [r7, #2]
 80022ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	887a      	ldrh	r2, [r7, #2]
 80022f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d006      	beq.n	8002308 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4a17      	ldr	r2, [pc, #92]	; (800235c <HAL_SPI_TransmitReceive_IT+0x118>)
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4a17      	ldr	r2, [pc, #92]	; (8002360 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8002304:	645a      	str	r2, [r3, #68]	; 0x44
 8002306:	e005      	b.n	8002314 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4a16      	ldr	r2, [pc, #88]	; (8002364 <HAL_SPI_TransmitReceive_IT+0x120>)
 800230c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4a15      	ldr	r2, [pc, #84]	; (8002368 <HAL_SPI_TransmitReceive_IT+0x124>)
 8002312:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002322:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232e:	2b40      	cmp	r3, #64	; 0x40
 8002330:	d008      	beq.n	8002344 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	e000      	b.n	8002346 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8002344:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800234e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002350:	4618      	mov	r0, r3
 8002352:	371c      	adds	r7, #28
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	08002909 	.word	0x08002909
 8002360:	08002969 	.word	0x08002969
 8002364:	08002845 	.word	0x08002845
 8002368:	080028a9 	.word	0x080028a9

0800236c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	4613      	mov	r3, r2
 8002378:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	75fb      	strb	r3, [r7, #23]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    /*return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
  }*/

  /* Process Locked */
  __HAL_LOCK(hspi);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <HAL_SPI_Receive_DMA+0x20>
 8002388:	2302      	movs	r3, #2
 800238a:	e098      	b.n	80024be <HAL_SPI_Receive_DMA+0x152>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b01      	cmp	r3, #1
 800239e:	d002      	beq.n	80023a6 <HAL_SPI_Receive_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80023a0:	2302      	movs	r3, #2
 80023a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023a4:	e086      	b.n	80024b4 <HAL_SPI_Receive_DMA+0x148>
  }

  if ((pData == NULL) || (Size == 0U))
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <HAL_SPI_Receive_DMA+0x46>
 80023ac:	88fb      	ldrh	r3, [r7, #6]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d102      	bne.n	80023b8 <HAL_SPI_Receive_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023b6:	e07d      	b.n	80024b4 <HAL_SPI_Receive_DMA+0x148>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2204      	movs	r2, #4
 80023bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	88fa      	ldrh	r2, [r7, #6]
 80023d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	88fa      	ldrh	r2, [r7, #6]
 80023d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023f8:	d10f      	bne.n	800241a <HAL_SPI_Receive_DMA+0xae>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002408:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002418:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	4a2a      	ldr	r2, [pc, #168]	; (80024c8 <HAL_SPI_Receive_DMA+0x15c>)
 8002420:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002426:	4a29      	ldr	r2, [pc, #164]	; (80024cc <HAL_SPI_Receive_DMA+0x160>)
 8002428:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242e:	4a28      	ldr	r2, [pc, #160]	; (80024d0 <HAL_SPI_Receive_DMA+0x164>)
 8002430:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002436:	2200      	movs	r2, #0
 8002438:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	330c      	adds	r3, #12
 8002444:	4619      	mov	r1, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244a:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002450:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002452:	f7fe fccd 	bl	8000df0 <HAL_DMA_Start_IT>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00c      	beq.n	8002476 <HAL_SPI_Receive_DMA+0x10a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002460:	f043 0210 	orr.w	r2, r3, #16
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002474:	e01e      	b.n	80024b4 <HAL_SPI_Receive_DMA+0x148>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002480:	2b40      	cmp	r3, #64	; 0x40
 8002482:	d007      	beq.n	8002494 <HAL_SPI_Receive_DMA+0x128>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002492:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0220 	orr.w	r2, r2, #32
 80024a2:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	080027bb 	.word	0x080027bb
 80024cc:	08002711 	.word	0x08002711
 80024d0:	080027d9 	.word	0x080027d9

080024d4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	099b      	lsrs	r3, r3, #6
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10f      	bne.n	8002518 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00a      	beq.n	8002518 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	099b      	lsrs	r3, r3, #6
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d004      	beq.n	8002518 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	4798      	blx	r3
    return;
 8002516:	e0bf      	b.n	8002698 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	085b      	lsrs	r3, r3, #1
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00a      	beq.n	800253a <HAL_SPI_IRQHandler+0x66>
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	09db      	lsrs	r3, r3, #7
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	d004      	beq.n	800253a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	4798      	blx	r3
    return;
 8002538:	e0ae      	b.n	8002698 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	095b      	lsrs	r3, r3, #5
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d106      	bne.n	8002554 <HAL_SPI_IRQHandler+0x80>
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	099b      	lsrs	r3, r3, #6
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 80a2 	beq.w	8002698 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 809b 	beq.w	8002698 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	099b      	lsrs	r3, r3, #6
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d023      	beq.n	80025b6 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b03      	cmp	r3, #3
 8002578:	d011      	beq.n	800259e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257e:	f043 0204 	orr.w	r2, r3, #4
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	e00b      	b.n	80025b6 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	693b      	ldr	r3, [r7, #16]
        return;
 80025b4:	e070      	b.n	8002698 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	095b      	lsrs	r3, r3, #5
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d014      	beq.n	80025ec <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c6:	f043 0201 	orr.w	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d050      	beq.n	8002696 <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002602:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d104      	bne.n	8002620 <HAL_SPI_IRQHandler+0x14c>
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d034      	beq.n	800268a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0203 	bic.w	r2, r2, #3
 800262e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002634:	2b00      	cmp	r3, #0
 8002636:	d011      	beq.n	800265c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263c:	4a18      	ldr	r2, [pc, #96]	; (80026a0 <HAL_SPI_IRQHandler+0x1cc>)
 800263e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002644:	4618      	mov	r0, r3
 8002646:	f7fe fc6d 	bl	8000f24 <HAL_DMA_Abort_IT>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d005      	beq.n	800265c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002654:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002660:	2b00      	cmp	r3, #0
 8002662:	d017      	beq.n	8002694 <HAL_SPI_IRQHandler+0x1c0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002668:	4a0d      	ldr	r2, [pc, #52]	; (80026a0 <HAL_SPI_IRQHandler+0x1cc>)
 800266a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002670:	4618      	mov	r0, r3
 8002672:	f7fe fc57 	bl	8000f24 <HAL_DMA_Abort_IT>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00b      	beq.n	8002694 <HAL_SPI_IRQHandler+0x1c0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002680:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002688:	e004      	b.n	8002694 <HAL_SPI_IRQHandler+0x1c0>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002692:	e000      	b.n	8002696 <HAL_SPI_IRQHandler+0x1c2>
        if (hspi->hdmatx != NULL)
 8002694:	bf00      	nop
    return;
 8002696:	bf00      	nop
  }
}
 8002698:	3720      	adds	r7, #32
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	0800281b 	.word	0x0800281b

080026a4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr

080026b6 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr

080026fe <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr

08002710 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800271e:	f7fe fa23 	bl	8000b68 <HAL_GetTick>
 8002722:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0320 	and.w	r3, r3, #32
 800272e:	2b20      	cmp	r3, #32
 8002730:	d03c      	beq.n	80027ac <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0220 	bic.w	r2, r2, #32
 8002740:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10d      	bne.n	8002766 <SPI_DMAReceiveCplt+0x56>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002752:	d108      	bne.n	8002766 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0203 	bic.w	r2, r2, #3
 8002762:	605a      	str	r2, [r3, #4]
 8002764:	e007      	b.n	8002776 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0201 	bic.w	r2, r2, #1
 8002774:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	2164      	movs	r1, #100	; 0x64
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 fa38 	bl	8002bf0 <SPI_EndRxTransaction>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d002      	beq.n	800278c <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2220      	movs	r2, #32
 800278a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d004      	beq.n	80027ac <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80027aa:	e003      	b.n	80027b4 <SPI_DMAReceiveCplt+0xa4>
    }
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	4798      	blx	r3
#else
  HAL_SPI_RxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	4798      	blx	r3
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80027d0:	bf00      	nop
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0203 	bic.w	r2, r2, #3
 80027f4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fa:	f043 0210 	orr.w	r2, r3, #16
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002812:	bf00      	nop
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b084      	sub	sp, #16
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800283c:	bf00      	nop
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f103 020c 	add.w	r2, r3, #12
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002858:	7812      	ldrb	r2, [r2, #0]
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10f      	bne.n	80028a0 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800288e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002894:	b29b      	uxth	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d102      	bne.n	80028a0 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fa18 	bl	8002cd0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	330c      	adds	r3, #12
 80028ba:	7812      	ldrb	r2, [r2, #0]
 80028bc:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028da:	b29b      	uxth	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10f      	bne.n	8002900 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028ee:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d102      	bne.n	8002900 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f9e8 	bl	8002cd0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002900:	bf00      	nop
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291a:	b292      	uxth	r2, r2
 800291c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002922:	1c9a      	adds	r2, r3, #2
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10f      	bne.n	8002960 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800294e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d102      	bne.n	8002960 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f9b8 	bl	8002cd0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	881a      	ldrh	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	1c9a      	adds	r2, r3, #2
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002998:	b29b      	uxth	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10f      	bne.n	80029be <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029ac:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d102      	bne.n	80029be <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f989 	bl	8002cd0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f103 020c 	add.w	r2, r3, #12
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029da:	7812      	ldrb	r2, [r2, #0]
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d102      	bne.n	8002a08 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f9da 	bl	8002dbc <SPI_CloseRx_ISR>
  }
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a22:	b292      	uxth	r2, r2
 8002a24:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2a:	1c9a      	adds	r2, r3, #2
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d102      	bne.n	8002a4e <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f9b7 	bl	8002dbc <SPI_CloseRx_ISR>
  }
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	330c      	adds	r3, #12
 8002a68:	7812      	ldrb	r2, [r2, #0]
 8002a6a:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d102      	bne.n	8002a94 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f9d6 	bl	8002e40 <SPI_CloseTx_ISR>
  }
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	881a      	ldrh	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	1c9a      	adds	r2, r3, #2
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d102      	bne.n	8002ad8 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f9b4 	bl	8002e40 <SPI_CloseTx_ISR>
  }
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b088      	sub	sp, #32
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	4613      	mov	r3, r2
 8002aee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002af0:	f7fe f83a 	bl	8000b68 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	4413      	add	r3, r2
 8002afe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b00:	f7fe f832 	bl	8000b68 <HAL_GetTick>
 8002b04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b06:	4b39      	ldr	r3, [pc, #228]	; (8002bec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	015b      	lsls	r3, r3, #5
 8002b0c:	0d1b      	lsrs	r3, r3, #20
 8002b0e:	69fa      	ldr	r2, [r7, #28]
 8002b10:	fb02 f303 	mul.w	r3, r2, r3
 8002b14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b16:	e054      	b.n	8002bc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1e:	d050      	beq.n	8002bc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b20:	f7fe f822 	bl	8000b68 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	69fa      	ldr	r2, [r7, #28]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d902      	bls.n	8002b36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d13d      	bne.n	8002bb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b4e:	d111      	bne.n	8002b74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b58:	d004      	beq.n	8002b64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b62:	d107      	bne.n	8002b74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b7c:	d10f      	bne.n	8002b9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e017      	b.n	8002be2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	bf0c      	ite	eq
 8002bd2:	2301      	moveq	r3, #1
 8002bd4:	2300      	movne	r3, #0
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	461a      	mov	r2, r3
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d19b      	bne.n	8002b18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3720      	adds	r7, #32
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000000 	.word	0x20000000

08002bf0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c04:	d111      	bne.n	8002c2a <SPI_EndRxTransaction+0x3a>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c0e:	d004      	beq.n	8002c1a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c18:	d107      	bne.n	8002c2a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c28:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c32:	d117      	bne.n	8002c64 <SPI_EndRxTransaction+0x74>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3c:	d112      	bne.n	8002c64 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2200      	movs	r2, #0
 8002c46:	2101      	movs	r1, #1
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f7ff ff49 	bl	8002ae0 <SPI_WaitFlagStateUntilTimeout>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d01a      	beq.n	8002c8a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c58:	f043 0220 	orr.w	r2, r3, #32
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e013      	b.n	8002c8c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2180      	movs	r1, #128	; 0x80
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f7ff ff36 	bl	8002ae0 <SPI_WaitFlagStateUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d007      	beq.n	8002c8a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7e:	f043 0220 	orr.w	r2, r3, #32
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e000      	b.n	8002c8c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2180      	movs	r1, #128	; 0x80
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f7ff ff18 	bl	8002ae0 <SPI_WaitFlagStateUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d007      	beq.n	8002cc6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cba:	f043 0220 	orr.w	r2, r3, #32
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e000      	b.n	8002cc8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002cd8:	4b36      	ldr	r3, [pc, #216]	; (8002db4 <SPI_CloseRxTx_ISR+0xe4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a36      	ldr	r2, [pc, #216]	; (8002db8 <SPI_CloseRxTx_ISR+0xe8>)
 8002cde:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce2:	0a5b      	lsrs	r3, r3, #9
 8002ce4:	2264      	movs	r2, #100	; 0x64
 8002ce6:	fb02 f303 	mul.w	r3, r2, r3
 8002cea:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002cec:	f7fd ff3c 	bl	8000b68 <HAL_GetTick>
 8002cf0:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0220 	bic.w	r2, r2, #32
 8002d00:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d106      	bne.n	8002d16 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0c:	f043 0220 	orr.w	r2, r3, #32
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002d14:	e009      	b.n	8002d2a <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0eb      	beq.n	8002d02 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	2164      	movs	r1, #100	; 0x64
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff ffb0 	bl	8002c94 <SPI_EndRxTxTransaction>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d005      	beq.n	8002d46 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3e:	f043 0220 	orr.w	r2, r3, #32
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10a      	bne.n	8002d64 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d117      	bne.n	8002d9c <SPI_CloseRxTx_ISR+0xcc>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d108      	bne.n	8002d8a <SPI_CloseRxTx_ISR+0xba>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	4798      	blx	r3
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002d88:	e010      	b.n	8002dac <SPI_CloseRxTx_ISR+0xdc>
        hspi->State = HAL_SPI_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        hspi->TxRxCpltCallback(hspi);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	4798      	blx	r3
}
 8002d9a:	e007      	b.n	8002dac <SPI_CloseRxTx_ISR+0xdc>
      hspi->State = HAL_SPI_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      hspi->ErrorCallback(hspi);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	4798      	blx	r3
}
 8002dac:	bf00      	nop
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20000000 	.word	0x20000000
 8002db8:	057619f1 	.word	0x057619f1

08002dbc <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dd2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002dd4:	f7fd fec8 	bl	8000b68 <HAL_GetTick>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	461a      	mov	r2, r3
 8002ddc:	2164      	movs	r1, #100	; 0x64
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff ff06 	bl	8002bf0 <SPI_EndRxTransaction>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dee:	f043 0220 	orr.w	r2, r3, #32
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10a      	bne.n	8002e14 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d104      	bne.n	8002e2e <SPI_CloseRx_ISR+0x72>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	4798      	blx	r3
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002e2c:	e003      	b.n	8002e36 <SPI_CloseRx_ISR+0x7a>
      hspi->ErrorCallback(hspi);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	4798      	blx	r3
}
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002e48:	4b2d      	ldr	r3, [pc, #180]	; (8002f00 <SPI_CloseTx_ISR+0xc0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a2d      	ldr	r2, [pc, #180]	; (8002f04 <SPI_CloseTx_ISR+0xc4>)
 8002e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e52:	0a5b      	lsrs	r3, r3, #9
 8002e54:	2264      	movs	r2, #100	; 0x64
 8002e56:	fb02 f303 	mul.w	r3, r2, r3
 8002e5a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e5c:	f7fd fe84 	bl	8000b68 <HAL_GetTick>
 8002e60:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d106      	bne.n	8002e76 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6c:	f043 0220 	orr.w	r2, r3, #32
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002e74:	e009      	b.n	8002e8a <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0eb      	beq.n	8002e62 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e98:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	2164      	movs	r1, #100	; 0x64
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff fef8 	bl	8002c94 <SPI_EndRxTxTransaction>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d005      	beq.n	8002eb6 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eae:	f043 0220 	orr.w	r2, r3, #32
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10a      	bne.n	8002ed4 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d004      	beq.n	8002eee <SPI_CloseTx_ISR+0xae>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	4798      	blx	r3
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8002eec:	e003      	b.n	8002ef6 <SPI_CloseTx_ISR+0xb6>
    hspi->TxCpltCallback(hspi);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	4798      	blx	r3
}
 8002ef6:	bf00      	nop
 8002ef8:	3718      	adds	r7, #24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	20000000 	.word	0x20000000
 8002f04:	057619f1 	.word	0x057619f1

08002f08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e041      	b.n	8002f9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f839 	bl	8002fa6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3304      	adds	r3, #4
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f000 f9b4 	bl	80032b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d001      	beq.n	8002fd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e03a      	b.n	8003046 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0201 	orr.w	r2, r2, #1
 8002fe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a18      	ldr	r2, [pc, #96]	; (8003050 <HAL_TIM_Base_Start_IT+0x98>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d00e      	beq.n	8003010 <HAL_TIM_Base_Start_IT+0x58>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ffa:	d009      	beq.n	8003010 <HAL_TIM_Base_Start_IT+0x58>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a14      	ldr	r2, [pc, #80]	; (8003054 <HAL_TIM_Base_Start_IT+0x9c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d004      	beq.n	8003010 <HAL_TIM_Base_Start_IT+0x58>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a13      	ldr	r2, [pc, #76]	; (8003058 <HAL_TIM_Base_Start_IT+0xa0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d111      	bne.n	8003034 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b06      	cmp	r3, #6
 8003020:	d010      	beq.n	8003044 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0201 	orr.w	r2, r2, #1
 8003030:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003032:	e007      	b.n	8003044 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr
 8003050:	40012c00 	.word	0x40012c00
 8003054:	40000400 	.word	0x40000400
 8003058:	40000800 	.word	0x40000800

0800305c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b02      	cmp	r3, #2
 8003070:	d122      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b02      	cmp	r3, #2
 800307e:	d11b      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0202 	mvn.w	r2, #2
 8003088:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f8ed 	bl	800327e <HAL_TIM_IC_CaptureCallback>
 80030a4:	e005      	b.n	80030b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f8e0 	bl	800326c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f8ef 	bl	8003290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d122      	bne.n	800310c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d11b      	bne.n	800310c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0204 	mvn.w	r2, #4
 80030dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2202      	movs	r2, #2
 80030e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f8c3 	bl	800327e <HAL_TIM_IC_CaptureCallback>
 80030f8:	e005      	b.n	8003106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f8b6 	bl	800326c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f8c5 	bl	8003290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	2b08      	cmp	r3, #8
 8003118:	d122      	bne.n	8003160 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f003 0308 	and.w	r3, r3, #8
 8003124:	2b08      	cmp	r3, #8
 8003126:	d11b      	bne.n	8003160 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0208 	mvn.w	r2, #8
 8003130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2204      	movs	r2, #4
 8003136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f899 	bl	800327e <HAL_TIM_IC_CaptureCallback>
 800314c:	e005      	b.n	800315a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f88c 	bl	800326c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f89b 	bl	8003290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	2b10      	cmp	r3, #16
 800316c:	d122      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	2b10      	cmp	r3, #16
 800317a:	d11b      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0210 	mvn.w	r2, #16
 8003184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2208      	movs	r2, #8
 800318a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f86f 	bl	800327e <HAL_TIM_IC_CaptureCallback>
 80031a0:	e005      	b.n	80031ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f862 	bl	800326c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f871 	bl	8003290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d10e      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d107      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0201 	mvn.w	r2, #1
 80031d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7fd fa32 	bl	8000644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ea:	2b80      	cmp	r3, #128	; 0x80
 80031ec:	d10e      	bne.n	800320c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f8:	2b80      	cmp	r3, #128	; 0x80
 80031fa:	d107      	bne.n	800320c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f8bf 	bl	800338a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003216:	2b40      	cmp	r3, #64	; 0x40
 8003218:	d10e      	bne.n	8003238 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003224:	2b40      	cmp	r3, #64	; 0x40
 8003226:	d107      	bne.n	8003238 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f835 	bl	80032a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	2b20      	cmp	r3, #32
 8003244:	d10e      	bne.n	8003264 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b20      	cmp	r3, #32
 8003252:	d107      	bne.n	8003264 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f06f 0220 	mvn.w	r2, #32
 800325c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f88a 	bl	8003378 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003264:	bf00      	nop
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	bc80      	pop	{r7}
 800327c:	4770      	bx	lr

0800327e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr

08003290 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	bc80      	pop	{r7}
 80032a0:	4770      	bx	lr

080032a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr

080032b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a29      	ldr	r2, [pc, #164]	; (800336c <TIM_Base_SetConfig+0xb8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00b      	beq.n	80032e4 <TIM_Base_SetConfig+0x30>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d2:	d007      	beq.n	80032e4 <TIM_Base_SetConfig+0x30>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a26      	ldr	r2, [pc, #152]	; (8003370 <TIM_Base_SetConfig+0xbc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d003      	beq.n	80032e4 <TIM_Base_SetConfig+0x30>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a25      	ldr	r2, [pc, #148]	; (8003374 <TIM_Base_SetConfig+0xc0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d108      	bne.n	80032f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a1c      	ldr	r2, [pc, #112]	; (800336c <TIM_Base_SetConfig+0xb8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00b      	beq.n	8003316 <TIM_Base_SetConfig+0x62>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003304:	d007      	beq.n	8003316 <TIM_Base_SetConfig+0x62>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a19      	ldr	r2, [pc, #100]	; (8003370 <TIM_Base_SetConfig+0xbc>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d003      	beq.n	8003316 <TIM_Base_SetConfig+0x62>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a18      	ldr	r2, [pc, #96]	; (8003374 <TIM_Base_SetConfig+0xc0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d108      	bne.n	8003328 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800331c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4313      	orrs	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a07      	ldr	r2, [pc, #28]	; (800336c <TIM_Base_SetConfig+0xb8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d103      	bne.n	800335c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	615a      	str	r2, [r3, #20]
}
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr
 800336c:	40012c00 	.word	0x40012c00
 8003370:	40000400 	.word	0x40000400
 8003374:	40000800 	.word	0x40000800

08003378 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr

0800338a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr

0800339c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e03f      	b.n	800342e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d106      	bne.n	80033c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7fd fa0e 	bl	80007e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2224      	movs	r2, #36	; 0x24
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 fd63 	bl	8003eac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	691a      	ldr	r2, [r3, #16]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695a      	ldr	r2, [r3, #20]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003404:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003414:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b08a      	sub	sp, #40	; 0x28
 800343a:	af02      	add	r7, sp, #8
 800343c:	60f8      	str	r0, [r7, #12]
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	603b      	str	r3, [r7, #0]
 8003442:	4613      	mov	r3, r2
 8003444:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b20      	cmp	r3, #32
 8003454:	d17c      	bne.n	8003550 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d002      	beq.n	8003462 <HAL_UART_Transmit+0x2c>
 800345c:	88fb      	ldrh	r3, [r7, #6]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e075      	b.n	8003552 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_UART_Transmit+0x3e>
 8003470:	2302      	movs	r3, #2
 8003472:	e06e      	b.n	8003552 <HAL_UART_Transmit+0x11c>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2221      	movs	r2, #33	; 0x21
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800348a:	f7fd fb6d 	bl	8000b68 <HAL_GetTick>
 800348e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	88fa      	ldrh	r2, [r7, #6]
 8003494:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	88fa      	ldrh	r2, [r7, #6]
 800349a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a4:	d108      	bne.n	80034b8 <HAL_UART_Transmit+0x82>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d104      	bne.n	80034b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	e003      	b.n	80034c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034c8:	e02a      	b.n	8003520 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2200      	movs	r2, #0
 80034d2:	2180      	movs	r1, #128	; 0x80
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 fb39 	bl	8003b4c <UART_WaitOnFlagUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e036      	b.n	8003552 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10b      	bne.n	8003502 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	3302      	adds	r3, #2
 80034fe:	61bb      	str	r3, [r7, #24]
 8003500:	e007      	b.n	8003512 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	781a      	ldrb	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	3301      	adds	r3, #1
 8003510:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003516:	b29b      	uxth	r3, r3
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003524:	b29b      	uxth	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1cf      	bne.n	80034ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2200      	movs	r2, #0
 8003532:	2140      	movs	r1, #64	; 0x40
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 fb09 	bl	8003b4c <UART_WaitOnFlagUntilTimeout>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e006      	b.n	8003552 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	e000      	b.n	8003552 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003550:	2302      	movs	r3, #2
  }
}
 8003552:	4618      	mov	r0, r3
 8003554:	3720      	adds	r7, #32
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800355a:	b480      	push	{r7}
 800355c:	b085      	sub	sp, #20
 800355e:	af00      	add	r7, sp, #0
 8003560:	60f8      	str	r0, [r7, #12]
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	4613      	mov	r3, r2
 8003566:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b20      	cmp	r3, #32
 8003572:	d130      	bne.n	80035d6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <HAL_UART_Transmit_IT+0x26>
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e029      	b.n	80035d8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800358a:	2b01      	cmp	r3, #1
 800358c:	d101      	bne.n	8003592 <HAL_UART_Transmit_IT+0x38>
 800358e:	2302      	movs	r3, #2
 8003590:	e022      	b.n	80035d8 <HAL_UART_Transmit_IT+0x7e>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	88fa      	ldrh	r2, [r7, #6]
 80035a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	88fa      	ldrh	r2, [r7, #6]
 80035aa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2221      	movs	r2, #33	; 0x21
 80035b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68da      	ldr	r2, [r3, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035d0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	e000      	b.n	80035d8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80035d6:	2302      	movs	r3, #2
  }
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	bc80      	pop	{r7}
 80035e0:	4770      	bx	lr
	...

080035e4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	4613      	mov	r3, r2
 80035f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b20      	cmp	r3, #32
 80035fc:	d153      	bne.n	80036a6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <HAL_UART_Transmit_DMA+0x26>
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e04c      	b.n	80036a8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_UART_Transmit_DMA+0x38>
 8003618:	2302      	movs	r3, #2
 800361a:	e045      	b.n	80036a8 <HAL_UART_Transmit_DMA+0xc4>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	88fa      	ldrh	r2, [r7, #6]
 800362e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	88fa      	ldrh	r2, [r7, #6]
 8003634:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2221      	movs	r2, #33	; 0x21
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003648:	4a19      	ldr	r2, [pc, #100]	; (80036b0 <HAL_UART_Transmit_DMA+0xcc>)
 800364a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003650:	4a18      	ldr	r2, [pc, #96]	; (80036b4 <HAL_UART_Transmit_DMA+0xd0>)
 8003652:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003658:	4a17      	ldr	r2, [pc, #92]	; (80036b8 <HAL_UART_Transmit_DMA+0xd4>)
 800365a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003660:	2200      	movs	r2, #0
 8003662:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8003664:	f107 0308 	add.w	r3, r7, #8
 8003668:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	6819      	ldr	r1, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3304      	adds	r3, #4
 8003678:	461a      	mov	r2, r3
 800367a:	88fb      	ldrh	r3, [r7, #6]
 800367c:	f7fd fbb8 	bl	8000df0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003688:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695a      	ldr	r2, [r3, #20]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036a0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	e000      	b.n	80036a8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80036a6:	2302      	movs	r3, #2
  }
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	08003a4b 	.word	0x08003a4b
 80036b4:	08003a9d 	.word	0x08003a9d
 80036b8:	08003ab9 	.word	0x08003ab9

080036bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	; 0x28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80036dc:	2300      	movs	r3, #0
 80036de:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10d      	bne.n	800370e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_UART_IRQHandler+0x52>
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fb26 	bl	8003d58 <UART_Receive_IT>
      return;
 800370c:	e17b      	b.n	8003a06 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 80b1 	beq.w	8003878 <HAL_UART_IRQHandler+0x1bc>
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d105      	bne.n	800372c <HAL_UART_IRQHandler+0x70>
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 80a6 	beq.w	8003878 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <HAL_UART_IRQHandler+0x90>
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	f043 0201 	orr.w	r2, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_UART_IRQHandler+0xb0>
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	f043 0202 	orr.w	r2, r3, #2
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <HAL_UART_IRQHandler+0xd0>
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	f043 0204 	orr.w	r2, r3, #4
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00f      	beq.n	80037b6 <HAL_UART_IRQHandler+0xfa>
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b00      	cmp	r3, #0
 800379e:	d104      	bne.n	80037aa <HAL_UART_IRQHandler+0xee>
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d005      	beq.n	80037b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f043 0208 	orr.w	r2, r3, #8
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 811e 	beq.w	80039fc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	f003 0320 	and.w	r3, r3, #32
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d007      	beq.n	80037da <HAL_UART_IRQHandler+0x11e>
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	f003 0320 	and.w	r3, r3, #32
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fabf 	bl	8003d58 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	bf14      	ite	ne
 80037e8:	2301      	movne	r3, #1
 80037ea:	2300      	moveq	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d102      	bne.n	8003802 <HAL_UART_IRQHandler+0x146>
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d031      	beq.n	8003866 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 fa01 	bl	8003c0a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003812:	2b00      	cmp	r3, #0
 8003814:	d023      	beq.n	800385e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695a      	ldr	r2, [r3, #20]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003824:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382a:	2b00      	cmp	r3, #0
 800382c:	d013      	beq.n	8003856 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003832:	4a76      	ldr	r2, [pc, #472]	; (8003a0c <HAL_UART_IRQHandler+0x350>)
 8003834:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	4618      	mov	r0, r3
 800383c:	f7fd fb72 	bl	8000f24 <HAL_DMA_Abort_IT>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d016      	beq.n	8003874 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003850:	4610      	mov	r0, r2
 8003852:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003854:	e00e      	b.n	8003874 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f8e3 	bl	8003a22 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800385c:	e00a      	b.n	8003874 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f8df 	bl	8003a22 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003864:	e006      	b.n	8003874 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f8db 	bl	8003a22 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003872:	e0c3      	b.n	80039fc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003874:	bf00      	nop
    return;
 8003876:	e0c1      	b.n	80039fc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387c:	2b01      	cmp	r3, #1
 800387e:	f040 80a1 	bne.w	80039c4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 809b 	beq.w	80039c4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 8095 	beq.w	80039c4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d04e      	beq.n	800395c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80038c8:	8a3b      	ldrh	r3, [r7, #16]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 8098 	beq.w	8003a00 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038d4:	8a3a      	ldrh	r2, [r7, #16]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	f080 8092 	bcs.w	8003a00 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8a3a      	ldrh	r2, [r7, #16]
 80038e0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d02b      	beq.n	8003944 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038fa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695a      	ldr	r2, [r3, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0201 	bic.w	r2, r2, #1
 800390a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695a      	ldr	r2, [r3, #20]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800391a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0210 	bic.w	r2, r2, #16
 8003938:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	4618      	mov	r0, r3
 8003940:	f7fd fab5 	bl	8000eae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800394c:	b29b      	uxth	r3, r3
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	b29b      	uxth	r3, r3
 8003952:	4619      	mov	r1, r3
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f86d 	bl	8003a34 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800395a:	e051      	b.n	8003a00 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003964:	b29b      	uxth	r3, r3
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d047      	beq.n	8003a04 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003974:	8a7b      	ldrh	r3, [r7, #18]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d044      	beq.n	8003a04 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003988:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695a      	ldr	r2, [r3, #20]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0201 	bic.w	r2, r2, #1
 8003998:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2220      	movs	r2, #32
 800399e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0210 	bic.w	r2, r2, #16
 80039b6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039b8:	8a7b      	ldrh	r3, [r7, #18]
 80039ba:	4619      	mov	r1, r3
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f839 	bl	8003a34 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80039c2:	e01f      	b.n	8003a04 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d008      	beq.n	80039e0 <HAL_UART_IRQHandler+0x324>
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f956 	bl	8003c8a <UART_Transmit_IT>
    return;
 80039de:	e012      	b.n	8003a06 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00d      	beq.n	8003a06 <HAL_UART_IRQHandler+0x34a>
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d008      	beq.n	8003a06 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f997 	bl	8003d28 <UART_EndTransmit_IT>
    return;
 80039fa:	e004      	b.n	8003a06 <HAL_UART_IRQHandler+0x34a>
    return;
 80039fc:	bf00      	nop
 80039fe:	e002      	b.n	8003a06 <HAL_UART_IRQHandler+0x34a>
      return;
 8003a00:	bf00      	nop
 8003a02:	e000      	b.n	8003a06 <HAL_UART_IRQHandler+0x34a>
      return;
 8003a04:	bf00      	nop
  }
}
 8003a06:	3728      	adds	r7, #40	; 0x28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	08003c63 	.word	0x08003c63

08003a10 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr

08003a22 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr

08003a34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr

08003a4a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d113      	bne.n	8003a8e <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a7a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a8a:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a8c:	e002      	b.n	8003a94 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 ffc6 	bl	8004a20 <HAL_UART_TxCpltCallback>
}
 8003a94:	bf00      	nop
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f7ff ffb0 	bl	8003a10 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ab0:	bf00      	nop
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	bf14      	ite	ne
 8003ad8:	2301      	movne	r3, #1
 8003ada:	2300      	moveq	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b21      	cmp	r3, #33	; 0x21
 8003aea:	d108      	bne.n	8003afe <UART_DMAError+0x46>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d005      	beq.n	8003afe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2200      	movs	r2, #0
 8003af6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003af8:	68b8      	ldr	r0, [r7, #8]
 8003afa:	f000 f871 	bl	8003be0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	bf14      	ite	ne
 8003b0c:	2301      	movne	r3, #1
 8003b0e:	2300      	moveq	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b22      	cmp	r3, #34	; 0x22
 8003b1e:	d108      	bne.n	8003b32 <UART_DMAError+0x7a>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d005      	beq.n	8003b32 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003b2c:	68b8      	ldr	r0, [r7, #8]
 8003b2e:	f000 f86c 	bl	8003c0a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	f043 0210 	orr.w	r2, r3, #16
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b3e:	68b8      	ldr	r0, [r7, #8]
 8003b40:	f7ff ff6f 	bl	8003a22 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b44:	bf00      	nop
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b5c:	e02c      	b.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b64:	d028      	beq.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d007      	beq.n	8003b7c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b6c:	f7fc fffc 	bl	8000b68 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d21d      	bcs.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b8a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695a      	ldr	r2, [r3, #20]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e00f      	b.n	8003bd8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	bf0c      	ite	eq
 8003bc8:	2301      	moveq	r3, #1
 8003bca:	2300      	movne	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	461a      	mov	r2, r3
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d0c3      	beq.n	8003b5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003bf6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bc80      	pop	{r7}
 8003c08:	4770      	bx	lr

08003c0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c20:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695a      	ldr	r2, [r3, #20]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0201 	bic.w	r2, r2, #1
 8003c30:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d107      	bne.n	8003c4a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0210 	bic.w	r2, r2, #16
 8003c48:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr

08003c62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f7ff fed0 	bl	8003a22 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c82:	bf00      	nop
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b085      	sub	sp, #20
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b21      	cmp	r3, #33	; 0x21
 8003c9c:	d13e      	bne.n	8003d1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca6:	d114      	bne.n	8003cd2 <UART_Transmit_IT+0x48>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d110      	bne.n	8003cd2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cc4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	1c9a      	adds	r2, r3, #2
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	621a      	str	r2, [r3, #32]
 8003cd0:	e008      	b.n	8003ce4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	1c59      	adds	r1, r3, #1
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6211      	str	r1, [r2, #32]
 8003cdc:	781a      	ldrb	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10f      	bne.n	8003d18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68da      	ldr	r2, [r3, #12]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e000      	b.n	8003d1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d1c:	2302      	movs	r3, #2
  }
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr

08003d28 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d3e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 fe69 	bl	8004a20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b22      	cmp	r3, #34	; 0x22
 8003d6a:	f040 8099 	bne.w	8003ea0 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d76:	d117      	bne.n	8003da8 <UART_Receive_IT+0x50>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d113      	bne.n	8003da8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da0:	1c9a      	adds	r2, r3, #2
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	629a      	str	r2, [r3, #40]	; 0x28
 8003da6:	e026      	b.n	8003df6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dba:	d007      	beq.n	8003dcc <UART_Receive_IT+0x74>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10a      	bne.n	8003dda <UART_Receive_IT+0x82>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d106      	bne.n	8003dda <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	701a      	strb	r2, [r3, #0]
 8003dd8:	e008      	b.n	8003dec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	4619      	mov	r1, r3
 8003e04:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d148      	bne.n	8003e9c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0220 	bic.w	r2, r2, #32
 8003e18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695a      	ldr	r2, [r3, #20]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0201 	bic.w	r2, r2, #1
 8003e38:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d123      	bne.n	8003e92 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0210 	bic.w	r2, r2, #16
 8003e5e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	2b10      	cmp	r3, #16
 8003e6c:	d10a      	bne.n	8003e84 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e88:	4619      	mov	r1, r3
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff fdd2 	bl	8003a34 <HAL_UARTEx_RxEventCallback>
 8003e90:	e002      	b.n	8003e98 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fd9c 	bl	80049d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e002      	b.n	8003ea2 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e000      	b.n	8003ea2 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003ea0:	2302      	movs	r3, #2
  }
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
	...

08003eac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ee6:	f023 030c 	bic.w	r3, r3, #12
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6812      	ldr	r2, [r2, #0]
 8003eee:	68b9      	ldr	r1, [r7, #8]
 8003ef0:	430b      	orrs	r3, r1
 8003ef2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699a      	ldr	r2, [r3, #24]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a2c      	ldr	r2, [pc, #176]	; (8003fc0 <UART_SetConfig+0x114>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d103      	bne.n	8003f1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f14:	f7fd ff56 	bl	8001dc4 <HAL_RCC_GetPCLK2Freq>
 8003f18:	60f8      	str	r0, [r7, #12]
 8003f1a:	e002      	b.n	8003f22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f1c:	f7fd ff3e 	bl	8001d9c <HAL_RCC_GetPCLK1Freq>
 8003f20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	4613      	mov	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	009a      	lsls	r2, r3, #2
 8003f2c:	441a      	add	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f38:	4a22      	ldr	r2, [pc, #136]	; (8003fc4 <UART_SetConfig+0x118>)
 8003f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3e:	095b      	lsrs	r3, r3, #5
 8003f40:	0119      	lsls	r1, r3, #4
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4613      	mov	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	009a      	lsls	r2, r3, #2
 8003f4c:	441a      	add	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f58:	4b1a      	ldr	r3, [pc, #104]	; (8003fc4 <UART_SetConfig+0x118>)
 8003f5a:	fba3 0302 	umull	r0, r3, r3, r2
 8003f5e:	095b      	lsrs	r3, r3, #5
 8003f60:	2064      	movs	r0, #100	; 0x64
 8003f62:	fb00 f303 	mul.w	r3, r0, r3
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	3332      	adds	r3, #50	; 0x32
 8003f6c:	4a15      	ldr	r2, [pc, #84]	; (8003fc4 <UART_SetConfig+0x118>)
 8003f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f78:	4419      	add	r1, r3
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	009a      	lsls	r2, r3, #2
 8003f84:	441a      	add	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f90:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <UART_SetConfig+0x118>)
 8003f92:	fba3 0302 	umull	r0, r3, r3, r2
 8003f96:	095b      	lsrs	r3, r3, #5
 8003f98:	2064      	movs	r0, #100	; 0x64
 8003f9a:	fb00 f303 	mul.w	r3, r0, r3
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	3332      	adds	r3, #50	; 0x32
 8003fa4:	4a07      	ldr	r2, [pc, #28]	; (8003fc4 <UART_SetConfig+0x118>)
 8003fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003faa:	095b      	lsrs	r3, r3, #5
 8003fac:	f003 020f 	and.w	r2, r3, #15
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	440a      	add	r2, r1
 8003fb6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003fb8:	bf00      	nop
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40013800 	.word	0x40013800
 8003fc4:	51eb851f 	.word	0x51eb851f

08003fc8 <regWrite>:
 *
 * @retval Void
 */

void regWrite(uint8_t Reg, uint8_t Value)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	460a      	mov	r2, r1
 8003fd2:	71fb      	strb	r3, [r7, #7]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	71bb      	strb	r3, [r7, #6]
	uint8_t WriteData[2] = {0};
 8003fd8:	2300      	movs	r3, #0
 8003fda:	81bb      	strh	r3, [r7, #12]
	WriteData[0] = Reg & ( ~(1<<7u) ) /*| 1<<6u;*/& ( ~(1<<6u) );
 8003fdc:	79fb      	ldrb	r3, [r7, #7]
 8003fde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	733b      	strb	r3, [r7, #12]
	WriteData[1] = Value;
 8003fe6:	79bb      	ldrb	r3, [r7, #6]
 8003fe8:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8003fea:	2200      	movs	r2, #0
 8003fec:	2140      	movs	r1, #64	; 0x40
 8003fee:	480e      	ldr	r0, [pc, #56]	; (8004028 <regWrite+0x60>)
 8003ff0:	f7fd fac6 	bl	8001580 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit_IT(ADXL345_SPI, (uint8_t *) &WriteData, 2);
 8003ff4:	4b0d      	ldr	r3, [pc, #52]	; (800402c <regWrite+0x64>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f107 010c 	add.w	r1, r7, #12
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fd fff8 	bl	8001ff4 <HAL_SPI_Transmit_IT>
	while(1)
	{
		if(ADXL345_To_Slave_OK == 1)
 8004004:	4b0a      	ldr	r3, [pc, #40]	; (8004030 <regWrite+0x68>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d1fb      	bne.n	8004004 <regWrite+0x3c>
		{
			ADXL345_To_Slave_OK 	=	0;
 800400c:	4b08      	ldr	r3, [pc, #32]	; (8004030 <regWrite+0x68>)
 800400e:	2200      	movs	r2, #0
 8004010:	701a      	strb	r2, [r3, #0]
			break;
 8004012:	bf00      	nop
		}
	}
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8004014:	2201      	movs	r2, #1
 8004016:	2140      	movs	r1, #64	; 0x40
 8004018:	4803      	ldr	r0, [pc, #12]	; (8004028 <regWrite+0x60>)
 800401a:	f7fd fab1 	bl	8001580 <HAL_GPIO_WritePin>
	//HAL_I2C_Mem_Write(&hi2c1, ADXL345_I2C_SLAVE_ADDRESS, Reg, 1, Value, 1, 10);  or using this.
}
 800401e:	bf00      	nop
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40010c00 	.word	0x40010c00
 800402c:	2000034c 	.word	0x2000034c
 8004030:	20000350 	.word	0x20000350

08004034 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
	if (hspi -> Instance == SPI2)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a05      	ldr	r2, [pc, #20]	; (8004058 <HAL_SPI_TxCpltCallback+0x24>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d102      	bne.n	800404c <HAL_SPI_TxCpltCallback+0x18>
	{
		ADXL345_To_Slave_OK 		=	1;
 8004046:	4b05      	ldr	r3, [pc, #20]	; (800405c <HAL_SPI_TxCpltCallback+0x28>)
 8004048:	2201      	movs	r2, #1
 800404a:	701a      	strb	r2, [r3, #0]
	}
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	40003800 	.word	0x40003800
 800405c:	20000350 	.word	0x20000350

08004060 <regRead>:
 * @param ByteSize = Byte length to be read
 *
 * @retval Void
 */
void regRead(uint8_t Reg, uint8_t *Value, uint16_t ByteSize)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	4603      	mov	r3, r0
 8004068:	6039      	str	r1, [r7, #0]
 800406a:	71fb      	strb	r3, [r7, #7]
 800406c:	4613      	mov	r3, r2
 800406e:	80bb      	strh	r3, [r7, #4]

	if (ByteSize > 1)
 8004070:	88bb      	ldrh	r3, [r7, #4]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d905      	bls.n	8004082 <regRead+0x22>
	{
		Reg |= 1<<7u | 1<<6u;
 8004076:	79fb      	ldrb	r3, [r7, #7]
 8004078:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800407c:	b2db      	uxtb	r3, r3
 800407e:	71fb      	strb	r3, [r7, #7]
 8004080:	e004      	b.n	800408c <regRead+0x2c>
	}
	else
	{
		Reg |= 1<<7u & ( ~(1<<6u) );
 8004082:	79fb      	ldrb	r3, [r7, #7]
 8004084:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004088:	b2db      	uxtb	r3, r3
 800408a:	71fb      	strb	r3, [r7, #7]
	}

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800408c:	2200      	movs	r2, #0
 800408e:	2140      	movs	r1, #64	; 0x40
 8004090:	4814      	ldr	r0, [pc, #80]	; (80040e4 <regRead+0x84>)
 8004092:	f7fd fa75 	bl	8001580 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit_IT(ADXL345_SPI, (uint8_t *) &Reg, 1);
 8004096:	4b14      	ldr	r3, [pc, #80]	; (80040e8 <regRead+0x88>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	1df9      	adds	r1, r7, #7
 800409c:	2201      	movs	r2, #1
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fd ffa8 	bl	8001ff4 <HAL_SPI_Transmit_IT>
	while(1)
	{
		if(ADXL345_To_Slave_OK == 1)
 80040a4:	4b11      	ldr	r3, [pc, #68]	; (80040ec <regRead+0x8c>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d1fb      	bne.n	80040a4 <regRead+0x44>
		{
			ADXL345_To_Slave_OK 	=	0;
 80040ac:	4b0f      	ldr	r3, [pc, #60]	; (80040ec <regRead+0x8c>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	701a      	strb	r2, [r3, #0]
			break;
 80040b2:	bf00      	nop
		}
	}
	HAL_SPI_Receive_IT(ADXL345_SPI, Value, ByteSize);
 80040b4:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <regRead+0x88>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	88ba      	ldrh	r2, [r7, #4]
 80040ba:	6839      	ldr	r1, [r7, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fe f823 	bl	8002108 <HAL_SPI_Receive_IT>
	while(1)
	{
		if(ADXL345_To_Master_OK == 1)
 80040c2:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <regRead+0x90>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d1fb      	bne.n	80040c2 <regRead+0x62>
		{
			ADXL345_To_Master_OK 	=	0;
 80040ca:	4b09      	ldr	r3, [pc, #36]	; (80040f0 <regRead+0x90>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	701a      	strb	r2, [r3, #0]
			break;
 80040d0:	bf00      	nop
		}
	}
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80040d2:	2201      	movs	r2, #1
 80040d4:	2140      	movs	r1, #64	; 0x40
 80040d6:	4803      	ldr	r0, [pc, #12]	; (80040e4 <regRead+0x84>)
 80040d8:	f7fd fa52 	bl	8001580 <HAL_GPIO_WritePin>
	//HAL_I2C_Master_Transmit(&hi2c1, ADXL345_I2C_SLAVE_ADDRESS, &Reg, 1, 100);
	//HAL_I2C_Master_Receive(&hi2c1, ADXL345_I2C_SLAVE_ADDRESS, Value, 1, 100);	or using these.

}
 80040dc:	bf00      	nop
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40010c00 	.word	0x40010c00
 80040e8:	2000034c 	.word	0x2000034c
 80040ec:	20000350 	.word	0x20000350
 80040f0:	20000351 	.word	0x20000351

080040f4 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
	if (hspi -> Instance == SPI2 && Flag_State_DMA_Callback == 1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a0c      	ldr	r2, [pc, #48]	; (8004134 <HAL_SPI_RxCpltCallback+0x40>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d10d      	bne.n	8004122 <HAL_SPI_RxCpltCallback+0x2e>
 8004106:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <HAL_SPI_RxCpltCallback+0x44>)
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d109      	bne.n	8004122 <HAL_SPI_RxCpltCallback+0x2e>
	{
		Flag_State_DMA_Callback					=	0;
 800410e:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <HAL_SPI_RxCpltCallback+0x44>)
 8004110:	2200      	movs	r2, #0
 8004112:	701a      	strb	r2, [r3, #0]
		xSemaphoreGiveFromISR(Data_Receive_End_DMA_Handler, NULL);
 8004114:	4b09      	ldr	r3, [pc, #36]	; (800413c <HAL_SPI_RxCpltCallback+0x48>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2100      	movs	r1, #0
 800411a:	4618      	mov	r0, r3
 800411c:	f001 f8d6 	bl	80052cc <xQueueGiveFromISR>
 8004120:	e003      	b.n	800412a <HAL_SPI_RxCpltCallback+0x36>
	}
	else
	{
		ADXL345_To_Master_OK						=	1;
 8004122:	4b07      	ldr	r3, [pc, #28]	; (8004140 <HAL_SPI_RxCpltCallback+0x4c>)
 8004124:	2201      	movs	r2, #1
 8004126:	701a      	strb	r2, [r3, #0]
	}
}
 8004128:	bf00      	nop
 800412a:	bf00      	nop
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	40003800 	.word	0x40003800
 8004138:	20000352 	.word	0x20000352
 800413c:	20004618 	.word	0x20004618
 8004140:	20000351 	.word	0x20000351

08004144 <ADXL345_Init>:
 * @param I2CHandle = STM32 I2C Handle
 *
 * @retval ADXL_Status
 */
ADXL_Status ADXL345_Init(ADXL_ConfigTypeDef_t *ADXL, SPI_HandleTypeDef *hspi)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
#ifdef DMA_Enable
	osSemaphoreDef(Data_Receive_End_DMA);
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	2300      	movs	r3, #0
 8004154:	613b      	str	r3, [r7, #16]
	Data_Receive_End_DMA_Handler = osSemaphoreCreate(osSemaphore(Data_Receive_End_DMA), 1);
 8004156:	f107 030c 	add.w	r3, r7, #12
 800415a:	2101      	movs	r1, #1
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fcf1 	bl	8004b44 <osSemaphoreCreate>
 8004162:	4603      	mov	r3, r0
 8004164:	4a47      	ldr	r2, [pc, #284]	; (8004284 <ADXL345_Init+0x140>)
 8004166:	6013      	str	r3, [r2, #0]
	xSemaphoreTake(Data_Receive_End_DMA_Handler, portMAX_DELAY);
 8004168:	4b46      	ldr	r3, [pc, #280]	; (8004284 <ADXL345_Init+0x140>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f04f 31ff 	mov.w	r1, #4294967295
 8004170:	4618      	mov	r0, r3
 8004172:	f001 fa19 	bl	80055a8 <xQueueSemaphoreTake>
#else
#endif
	ADXL345_SPI = hspi;
 8004176:	4a44      	ldr	r2, [pc, #272]	; (8004288 <ADXL345_Init+0x144>)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	6013      	str	r3, [r2, #0]

	uint8_t testDEVID;
	regRead(DEVID_ID, &testDEVID,1);
 800417c:	f107 030b 	add.w	r3, r7, #11
 8004180:	2201      	movs	r2, #1
 8004182:	4619      	mov	r1, r3
 8004184:	2000      	movs	r0, #0
 8004186:	f7ff ff6b 	bl	8004060 <regRead>
	if(testDEVID != 0xE5)
 800418a:	7afb      	ldrb	r3, [r7, #11]
 800418c:	2be5      	cmp	r3, #229	; 0xe5
 800418e:	d001      	beq.n	8004194 <ADXL345_Init+0x50>
	{
		return ADXL_ERR;
 8004190:	2300      	movs	r3, #0
 8004192:	e073      	b.n	800427c <ADXL345_Init+0x138>
	}

	/*********** BW_Rate Config ***********/

	uint8_t regBWRate = 0;
 8004194:	2300      	movs	r3, #0
 8004196:	75fb      	strb	r3, [r7, #23]

	regWrite(BW_RATE, 0);
 8004198:	2100      	movs	r1, #0
 800419a:	202c      	movs	r0, #44	; 0x2c
 800419c:	f7ff ff14 	bl	8003fc8 <regWrite>

	if(ADXL->PowerMode == LowPower)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b10      	cmp	r3, #16
 80041a6:	d10d      	bne.n	80041c4 <ADXL345_Init+0x80>
	{
		if(ADXL->BWRate < BWRATE_12_5)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	785b      	ldrb	r3, [r3, #1]
 80041ac:	2b06      	cmp	r3, #6
 80041ae:	d802      	bhi.n	80041b6 <ADXL345_Init+0x72>
		{
			ADXL->BWRate = BWRATE_12_5;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2207      	movs	r2, #7
 80041b4:	705a      	strb	r2, [r3, #1]
		}
		if(ADXL->BWRate > BWRATE_400)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	785b      	ldrb	r3, [r3, #1]
 80041ba:	2b0c      	cmp	r3, #12
 80041bc:	d902      	bls.n	80041c4 <ADXL345_Init+0x80>
		{
			ADXL->BWRate = BWRATE_400;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	220c      	movs	r2, #12
 80041c2:	705a      	strb	r2, [r3, #1]
		}
	}

	regBWRate = ( ADXL->PowerMode | ADXL->BWRate);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	781a      	ldrb	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	785b      	ldrb	r3, [r3, #1]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	75fb      	strb	r3, [r7, #23]

	regWrite(BW_RATE, regBWRate);
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
 80041d2:	4619      	mov	r1, r3
 80041d4:	202c      	movs	r0, #44	; 0x2c
 80041d6:	f7ff fef7 	bl	8003fc8 <regWrite>

	/********* AutoSleepMode Config and WakeUpRate Config ********/

	uint8_t regValue = 0;
 80041da:	2300      	movs	r3, #0
 80041dc:	75bb      	strb	r3, [r7, #22]

	regWrite(POWER_CTL, regValue);
 80041de:	7dbb      	ldrb	r3, [r7, #22]
 80041e0:	4619      	mov	r1, r3
 80041e2:	202d      	movs	r0, #45	; 0x2d
 80041e4:	f7ff fef0 	bl	8003fc8 <regWrite>

//	regValue |= ADXL->AutoSleepConfig.AutoSleep | ADXL->WakeUpRate;

//	regWrite(POWER_CTL, regValue);

	regWrite(THRESH_INACT,0x00);
 80041e8:	2100      	movs	r1, #0
 80041ea:	2025      	movs	r0, #37	; 0x25
 80041ec:	f7ff feec 	bl	8003fc8 <regWrite>
	regWrite(TIME_INACT,0x00);
 80041f0:	2100      	movs	r1, #0
 80041f2:	2026      	movs	r0, #38	; 0x26
 80041f4:	f7ff fee8 	bl	8003fc8 <regWrite>
//	regWrite(THRESH_INACT,ADXL->AutoSleepConfig.ThreshInact);
//	regWrite(TIME_INACT,ADXL->AutoSleepConfig.TimeInact);

	/********* Data Format Config ********/

	regValue = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	75bb      	strb	r3, [r7, #22]

	regWrite(DATA_FORMAT, regValue);
 80041fc:	7dbb      	ldrb	r3, [r7, #22]
 80041fe:	4619      	mov	r1, r3
 8004200:	2031      	movs	r0, #49	; 0x31
 8004202:	f7ff fee1 	bl	8003fc8 <regWrite>

	regValue = (ADXL->Format.Resolution | ADXL->Format.Range | ADXL->Format.IntInvert | ADXL->Format.SPI_Mode);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	799a      	ldrb	r2, [r3, #6]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	79db      	ldrb	r3, [r3, #7]
 800420e:	4313      	orrs	r3, r2
 8004210:	b2da      	uxtb	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	7a1b      	ldrb	r3, [r3, #8]
 8004216:	4313      	orrs	r3, r2
 8004218:	b2da      	uxtb	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	7a5b      	ldrb	r3, [r3, #9]
 800421e:	4313      	orrs	r3, r2
 8004220:	75bb      	strb	r3, [r7, #22]

	regWrite(DATA_FORMAT, regValue);
 8004222:	7dbb      	ldrb	r3, [r7, #22]
 8004224:	4619      	mov	r1, r3
 8004226:	2031      	movs	r0, #49	; 0x31
 8004228:	f7ff fece 	bl	8003fc8 <regWrite>

	if(ADXL->Format.Resolution == RESFULL || ADXL->Format.Range == RANGE_2G)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	799b      	ldrb	r3, [r3, #6]
 8004230:	2b08      	cmp	r3, #8
 8004232:	d003      	beq.n	800423c <ADXL345_Init+0xf8>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	79db      	ldrb	r3, [r3, #7]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d104      	bne.n	8004246 <ADXL345_Init+0x102>
	{
		ScaleFactor = (float)1/256.0;
 800423c:	4b13      	ldr	r3, [pc, #76]	; (800428c <ADXL345_Init+0x148>)
 800423e:	f04f 526e 	mov.w	r2, #998244352	; 0x3b800000
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	e019      	b.n	800427a <ADXL345_Init+0x136>
	}
	else
	{
		switch(ADXL->Format.Range)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	79db      	ldrb	r3, [r3, #7]
 800424a:	2b03      	cmp	r3, #3
 800424c:	d010      	beq.n	8004270 <ADXL345_Init+0x12c>
 800424e:	2b03      	cmp	r3, #3
 8004250:	dc13      	bgt.n	800427a <ADXL345_Init+0x136>
 8004252:	2b01      	cmp	r3, #1
 8004254:	d002      	beq.n	800425c <ADXL345_Init+0x118>
 8004256:	2b02      	cmp	r3, #2
 8004258:	d005      	beq.n	8004266 <ADXL345_Init+0x122>
 800425a:	e00e      	b.n	800427a <ADXL345_Init+0x136>
		{
			case (RANGE_4G):
			{
				ScaleFactor = (float)1/128.0;
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <ADXL345_Init+0x148>)
 800425e:	f04f 5270 	mov.w	r2, #1006632960	; 0x3c000000
 8004262:	601a      	str	r2, [r3, #0]
				break;
 8004264:	e009      	b.n	800427a <ADXL345_Init+0x136>
			}
			case (RANGE_8G):
			{
				ScaleFactor = (float)1/64.0;
 8004266:	4b09      	ldr	r3, [pc, #36]	; (800428c <ADXL345_Init+0x148>)
 8004268:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
 800426c:	601a      	str	r2, [r3, #0]
				break;
 800426e:	e004      	b.n	800427a <ADXL345_Init+0x136>
			}
			case (RANGE_16G):
			{
				ScaleFactor = (float)1/32.0;
 8004270:	4b06      	ldr	r3, [pc, #24]	; (800428c <ADXL345_Init+0x148>)
 8004272:	f04f 5274 	mov.w	r2, #1023410176	; 0x3d000000
 8004276:	601a      	str	r2, [r3, #0]
				break;
 8004278:	bf00      	nop
			}
		}
	}
	
	
	return ADXL_OK;
 800427a:	2301      	movs	r3, #1
}
 800427c:	4618      	mov	r0, r3
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20004618 	.word	0x20004618
 8004288:	2000034c 	.word	0x2000034c
 800428c:	2000000c 	.word	0x2000000c

08004290 <ADXL345_MeasureON>:
 * @brief ADXL345_MeasureON, Measure Mode On, Sleep Mode and Standby Mode Off
 *
 * @retval void
 */
void ADXL345_MeasureON()
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
	uint8_t regValue = 0;
 8004296:	2300      	movs	r3, #0
 8004298:	71fb      	strb	r3, [r7, #7]

	regRead(POWER_CTL, &regValue, 1);
 800429a:	1dfb      	adds	r3, r7, #7
 800429c:	2201      	movs	r2, #1
 800429e:	4619      	mov	r1, r3
 80042a0:	202d      	movs	r0, #45	; 0x2d
 80042a2:	f7ff fedd 	bl	8004060 <regRead>

	regValue |= ( 1 << 3 );
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	f043 0308 	orr.w	r3, r3, #8
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	71fb      	strb	r3, [r7, #7]
	regValue &= ~( 1 << 2 );
 80042b0:	79fb      	ldrb	r3, [r7, #7]
 80042b2:	f023 0304 	bic.w	r3, r3, #4
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	71fb      	strb	r3, [r7, #7]

	regWrite(POWER_CTL, regValue);
 80042ba:	79fb      	ldrb	r3, [r7, #7]
 80042bc:	4619      	mov	r1, r3
 80042be:	202d      	movs	r0, #45	; 0x2d
 80042c0:	f7ff fe82 	bl	8003fc8 <regWrite>
}
 80042c4:	bf00      	nop
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <ADXL345_INTEnable>:
 * @param Int_Type, Interrupt Select @def_group Interrupts
 *
 * @retval void
 */
void ADXL345_INTEnable(Function_State Status, uint8_t Int_Type)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	460a      	mov	r2, r1
 80042d6:	71fb      	strb	r3, [r7, #7]
 80042d8:	4613      	mov	r3, r2
 80042da:	71bb      	strb	r3, [r7, #6]

	uint8_t regValue = 0;
 80042dc:	2300      	movs	r3, #0
 80042de:	73fb      	strb	r3, [r7, #15]

	switch(Status)
 80042e0:	79fb      	ldrb	r3, [r7, #7]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d013      	beq.n	800430e <ADXL345_INTEnable+0x42>
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d128      	bne.n	800433c <ADXL345_INTEnable+0x70>
	{
		case ON:
		{
			regRead(INT_ENABLE, &regValue, 1);
 80042ea:	f107 030f 	add.w	r3, r7, #15
 80042ee:	2201      	movs	r2, #1
 80042f0:	4619      	mov	r1, r3
 80042f2:	202e      	movs	r0, #46	; 0x2e
 80042f4:	f7ff feb4 	bl	8004060 <regRead>

			regValue |= (Int_Type);
 80042f8:	7bfa      	ldrb	r2, [r7, #15]
 80042fa:	79bb      	ldrb	r3, [r7, #6]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	73fb      	strb	r3, [r7, #15]

			regWrite(INT_ENABLE, regValue);
 8004302:	7bfb      	ldrb	r3, [r7, #15]
 8004304:	4619      	mov	r1, r3
 8004306:	202e      	movs	r0, #46	; 0x2e
 8004308:	f7ff fe5e 	bl	8003fc8 <regWrite>
			break;
 800430c:	e016      	b.n	800433c <ADXL345_INTEnable+0x70>
		}

		case OFF:
		{
			regRead(INT_ENABLE, &regValue, 1);
 800430e:	f107 030f 	add.w	r3, r7, #15
 8004312:	2201      	movs	r2, #1
 8004314:	4619      	mov	r1, r3
 8004316:	202e      	movs	r0, #46	; 0x2e
 8004318:	f7ff fea2 	bl	8004060 <regRead>

			regValue &= ~(Int_Type);
 800431c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004320:	43db      	mvns	r3, r3
 8004322:	b25a      	sxtb	r2, r3
 8004324:	7bfb      	ldrb	r3, [r7, #15]
 8004326:	b25b      	sxtb	r3, r3
 8004328:	4013      	ands	r3, r2
 800432a:	b25b      	sxtb	r3, r3
 800432c:	b2db      	uxtb	r3, r3
 800432e:	73fb      	strb	r3, [r7, #15]

			regWrite(INT_ENABLE, regValue);
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	4619      	mov	r1, r3
 8004334:	202e      	movs	r0, #46	; 0x2e
 8004336:	f7ff fe47 	bl	8003fc8 <regWrite>
			break;
 800433a:	bf00      	nop
		}
	}
}
 800433c:	bf00      	nop
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <ADXL345_INTMapping>:
 * @param Int_Type, Interrupt Select @def_group Interrupts
 *
 * @retval void
 */
void ADXL345_INTMapping(Mapping_State Pin, uint8_t Int_Type)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	4603      	mov	r3, r0
 800434c:	460a      	mov	r2, r1
 800434e:	71fb      	strb	r3, [r7, #7]
 8004350:	4613      	mov	r3, r2
 8004352:	71bb      	strb	r3, [r7, #6]
	uint8_t regValue = 0;
 8004354:	2300      	movs	r3, #0
 8004356:	73fb      	strb	r3, [r7, #15]
	uint8_t INTENABLEreg = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	73bb      	strb	r3, [r7, #14]

	regRead(INT_ENABLE, &INTENABLEreg, 1);
 800435c:	f107 030e 	add.w	r3, r7, #14
 8004360:	2201      	movs	r2, #1
 8004362:	4619      	mov	r1, r3
 8004364:	202e      	movs	r0, #46	; 0x2e
 8004366:	f7ff fe7b 	bl	8004060 <regRead>

	INTENABLEreg &= ~(Int_Type);
 800436a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800436e:	43db      	mvns	r3, r3
 8004370:	b25a      	sxtb	r2, r3
 8004372:	7bbb      	ldrb	r3, [r7, #14]
 8004374:	b25b      	sxtb	r3, r3
 8004376:	4013      	ands	r3, r2
 8004378:	b25b      	sxtb	r3, r3
 800437a:	b2db      	uxtb	r3, r3
 800437c:	73bb      	strb	r3, [r7, #14]

	regWrite(INT_ENABLE, INTENABLEreg);
 800437e:	7bbb      	ldrb	r3, [r7, #14]
 8004380:	4619      	mov	r1, r3
 8004382:	202e      	movs	r0, #46	; 0x2e
 8004384:	f7ff fe20 	bl	8003fc8 <regWrite>

	switch(Pin)
 8004388:	79fb      	ldrb	r3, [r7, #7]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <ADXL345_INTMapping+0x50>
 800438e:	2b01      	cmp	r3, #1
 8004390:	d017      	beq.n	80043c2 <ADXL345_INTMapping+0x7e>
 8004392:	e028      	b.n	80043e6 <ADXL345_INTMapping+0xa2>
	{
		case INT1:
		{
			regRead(INT_MAP, &regValue, 1);
 8004394:	f107 030f 	add.w	r3, r7, #15
 8004398:	2201      	movs	r2, #1
 800439a:	4619      	mov	r1, r3
 800439c:	202f      	movs	r0, #47	; 0x2f
 800439e:	f7ff fe5f 	bl	8004060 <regRead>

			regValue &= ~(Int_Type);
 80043a2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80043a6:	43db      	mvns	r3, r3
 80043a8:	b25a      	sxtb	r2, r3
 80043aa:	7bfb      	ldrb	r3, [r7, #15]
 80043ac:	b25b      	sxtb	r3, r3
 80043ae:	4013      	ands	r3, r2
 80043b0:	b25b      	sxtb	r3, r3
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	73fb      	strb	r3, [r7, #15]

			regWrite(INT_MAP, regValue);
 80043b6:	7bfb      	ldrb	r3, [r7, #15]
 80043b8:	4619      	mov	r1, r3
 80043ba:	202f      	movs	r0, #47	; 0x2f
 80043bc:	f7ff fe04 	bl	8003fc8 <regWrite>
			break;
 80043c0:	e011      	b.n	80043e6 <ADXL345_INTMapping+0xa2>
		}

		case INT2:
		{
			regRead(INT_MAP, &regValue, 1);
 80043c2:	f107 030f 	add.w	r3, r7, #15
 80043c6:	2201      	movs	r2, #1
 80043c8:	4619      	mov	r1, r3
 80043ca:	202f      	movs	r0, #47	; 0x2f
 80043cc:	f7ff fe48 	bl	8004060 <regRead>

			regValue |= (Int_Type);
 80043d0:	7bfa      	ldrb	r2, [r7, #15]
 80043d2:	79bb      	ldrb	r3, [r7, #6]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	73fb      	strb	r3, [r7, #15]

			regWrite(INT_MAP, regValue);
 80043da:	7bfb      	ldrb	r3, [r7, #15]
 80043dc:	4619      	mov	r1, r3
 80043de:	202f      	movs	r0, #47	; 0x2f
 80043e0:	f7ff fdf2 	bl	8003fc8 <regWrite>
			break;
 80043e4:	bf00      	nop
		}
	}

	INTENABLEreg |= (Int_Type);
 80043e6:	7bba      	ldrb	r2, [r7, #14]
 80043e8:	79bb      	ldrb	r3, [r7, #6]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	73bb      	strb	r3, [r7, #14]

	regWrite(INT_ENABLE, INTENABLEreg);
 80043f0:	7bbb      	ldrb	r3, [r7, #14]
 80043f2:	4619      	mov	r1, r3
 80043f4:	202e      	movs	r0, #46	; 0x2e
 80043f6:	f7ff fde7 	bl	8003fc8 <regWrite>
}
 80043fa:	bf00      	nop
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <ADXL345_GetValue_from_DMA>:
	return address;
}
*/

void ADXL345_GetValue_from_DMA(uint8_t *pData, uint16_t Size, uint8_t	Axis)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	807b      	strh	r3, [r7, #2]
 8004410:	4613      	mov	r3, r2
 8004412:	707b      	strb	r3, [r7, #1]

	if (Size > 1)
 8004414:	887b      	ldrh	r3, [r7, #2]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d905      	bls.n	8004426 <ADXL345_GetValue_from_DMA+0x22>
	{
		Axis |= 1<<7u | 1<<6u;
 800441a:	787b      	ldrb	r3, [r7, #1]
 800441c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8004420:	b2db      	uxtb	r3, r3
 8004422:	707b      	strb	r3, [r7, #1]
 8004424:	e004      	b.n	8004430 <ADXL345_GetValue_from_DMA+0x2c>
	}
	else
	{
		Axis |= 1<<7u & ( ~(1<<6u) );
 8004426:	787b      	ldrb	r3, [r7, #1]
 8004428:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800442c:	b2db      	uxtb	r3, r3
 800442e:	707b      	strb	r3, [r7, #1]
	}

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8004430:	2200      	movs	r2, #0
 8004432:	2140      	movs	r1, #64	; 0x40
 8004434:	4828      	ldr	r0, [pc, #160]	; (80044d8 <ADXL345_GetValue_from_DMA+0xd4>)
 8004436:	f7fd f8a3 	bl	8001580 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit_IT(ADXL345_SPI, (uint8_t *) &Axis, 1);
 800443a:	4b28      	ldr	r3, [pc, #160]	; (80044dc <ADXL345_GetValue_from_DMA+0xd8>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	1c79      	adds	r1, r7, #1
 8004440:	2201      	movs	r2, #1
 8004442:	4618      	mov	r0, r3
 8004444:	f7fd fdd6 	bl	8001ff4 <HAL_SPI_Transmit_IT>
	while(1)
	{
		if(ADXL345_To_Slave_OK == 1)
 8004448:	4b25      	ldr	r3, [pc, #148]	; (80044e0 <ADXL345_GetValue_from_DMA+0xdc>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d1fb      	bne.n	8004448 <ADXL345_GetValue_from_DMA+0x44>
		{
			ADXL345_To_Slave_OK 	=	0;
 8004450:	4b23      	ldr	r3, [pc, #140]	; (80044e0 <ADXL345_GetValue_from_DMA+0xdc>)
 8004452:	2200      	movs	r2, #0
 8004454:	701a      	strb	r2, [r3, #0]
			break;
 8004456:	bf00      	nop
		}
	}

	Flag_State_DMA_Callback 		=	1;
 8004458:	4b22      	ldr	r3, [pc, #136]	; (80044e4 <ADXL345_GetValue_from_DMA+0xe0>)
 800445a:	2201      	movs	r2, #1
 800445c:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive_DMA(ADXL345_SPI, pData, Size);
 800445e:	4b1f      	ldr	r3, [pc, #124]	; (80044dc <ADXL345_GetValue_from_DMA+0xd8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	887a      	ldrh	r2, [r7, #2]
 8004464:	6879      	ldr	r1, [r7, #4]
 8004466:	4618      	mov	r0, r3
 8004468:	f7fd ff80 	bl	800236c <HAL_SPI_Receive_DMA>
		xSemaphoreTake(Data_Receive_End_DMA_Handler, portMAX_DELAY);
 800446c:	4b1e      	ldr	r3, [pc, #120]	; (80044e8 <ADXL345_GetValue_from_DMA+0xe4>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f04f 31ff 	mov.w	r1, #4294967295
 8004474:	4618      	mov	r0, r3
 8004476:	f001 f897 	bl	80055a8 <xQueueSemaphoreTake>

	Axis	+=	1;
 800447a:	787b      	ldrb	r3, [r7, #1]
 800447c:	3301      	adds	r3, #1
 800447e:	b2db      	uxtb	r3, r3
 8004480:	707b      	strb	r3, [r7, #1]
	HAL_SPI_Transmit_IT(ADXL345_SPI, (uint8_t *) &Axis, 1);
 8004482:	4b16      	ldr	r3, [pc, #88]	; (80044dc <ADXL345_GetValue_from_DMA+0xd8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	1c79      	adds	r1, r7, #1
 8004488:	2201      	movs	r2, #1
 800448a:	4618      	mov	r0, r3
 800448c:	f7fd fdb2 	bl	8001ff4 <HAL_SPI_Transmit_IT>
	while(1)
	{
		if(ADXL345_To_Slave_OK == 1)
 8004490:	4b13      	ldr	r3, [pc, #76]	; (80044e0 <ADXL345_GetValue_from_DMA+0xdc>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d1fb      	bne.n	8004490 <ADXL345_GetValue_from_DMA+0x8c>
		{
			ADXL345_To_Slave_OK 	=	0;
 8004498:	4b11      	ldr	r3, [pc, #68]	; (80044e0 <ADXL345_GetValue_from_DMA+0xdc>)
 800449a:	2200      	movs	r2, #0
 800449c:	701a      	strb	r2, [r3, #0]
			break;
 800449e:	bf00      	nop
		}
	}

	Flag_State_DMA_Callback 		=	1;
 80044a0:	4b10      	ldr	r3, [pc, #64]	; (80044e4 <ADXL345_GetValue_from_DMA+0xe0>)
 80044a2:	2201      	movs	r2, #1
 80044a4:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive_DMA(ADXL345_SPI, pData + 1, Size);
 80044a6:	4b0d      	ldr	r3, [pc, #52]	; (80044dc <ADXL345_GetValue_from_DMA+0xd8>)
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	3301      	adds	r3, #1
 80044ae:	887a      	ldrh	r2, [r7, #2]
 80044b0:	4619      	mov	r1, r3
 80044b2:	f7fd ff5b 	bl	800236c <HAL_SPI_Receive_DMA>
		xSemaphoreTake(Data_Receive_End_DMA_Handler, portMAX_DELAY);
 80044b6:	4b0c      	ldr	r3, [pc, #48]	; (80044e8 <ADXL345_GetValue_from_DMA+0xe4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f04f 31ff 	mov.w	r1, #4294967295
 80044be:	4618      	mov	r0, r3
 80044c0:	f001 f872 	bl	80055a8 <xQueueSemaphoreTake>

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80044c4:	2201      	movs	r2, #1
 80044c6:	2140      	movs	r1, #64	; 0x40
 80044c8:	4803      	ldr	r0, [pc, #12]	; (80044d8 <ADXL345_GetValue_from_DMA+0xd4>)
 80044ca:	f7fd f859 	bl	8001580 <HAL_GPIO_WritePin>

}
 80044ce:	bf00      	nop
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40010c00 	.word	0x40010c00
 80044dc:	2000034c 	.word	0x2000034c
 80044e0:	20000350 	.word	0x20000350
 80044e4:	20000352 	.word	0x20000352
 80044e8:	20004618 	.word	0x20004618

080044ec <cobs_encode>:
 * Remove the "restrict" qualifiers if compiling with a
 * pre-C99 C dialect.
 */
size_t cobs_encode(const uint8_t * restrict input, size_t length,
	uint8_t * restrict output)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b089      	sub	sp, #36	; 0x24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
    size_t read_index = 0;
 80044f8:	2300      	movs	r3, #0
 80044fa:	61fb      	str	r3, [r7, #28]
    size_t write_index = 1;
 80044fc:	2301      	movs	r3, #1
 80044fe:	61bb      	str	r3, [r7, #24]
    size_t code_index = 0;
 8004500:	2300      	movs	r3, #0
 8004502:	617b      	str	r3, [r7, #20]
    uint8_t code = 1;
 8004504:	2301      	movs	r3, #1
 8004506:	74fb      	strb	r3, [r7, #19]

    while(read_index < length)
 8004508:	e031      	b.n	800456e <cobs_encode+0x82>
    {
        if(input[read_index] == 0)
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	4413      	add	r3, r2
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10e      	bne.n	8004534 <cobs_encode+0x48>
        {
            output[code_index] = code;
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	4413      	add	r3, r2
 800451c:	7cfa      	ldrb	r2, [r7, #19]
 800451e:	701a      	strb	r2, [r3, #0]
            code = 1;
 8004520:	2301      	movs	r3, #1
 8004522:	74fb      	strb	r3, [r7, #19]
            code_index = write_index++;
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	61ba      	str	r2, [r7, #24]
 800452a:	617b      	str	r3, [r7, #20]
            read_index++;
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	3301      	adds	r3, #1
 8004530:	61fb      	str	r3, [r7, #28]
 8004532:	e01c      	b.n	800456e <cobs_encode+0x82>
        }
        else
        {
            output[write_index++] = input[read_index++];
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	1c5a      	adds	r2, r3, #1
 8004538:	61fa      	str	r2, [r7, #28]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	441a      	add	r2, r3
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	1c59      	adds	r1, r3, #1
 8004542:	61b9      	str	r1, [r7, #24]
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	440b      	add	r3, r1
 8004548:	7812      	ldrb	r2, [r2, #0]
 800454a:	701a      	strb	r2, [r3, #0]
            code++;
 800454c:	7cfb      	ldrb	r3, [r7, #19]
 800454e:	3301      	adds	r3, #1
 8004550:	74fb      	strb	r3, [r7, #19]
            if(code == 0xFF)
 8004552:	7cfb      	ldrb	r3, [r7, #19]
 8004554:	2bff      	cmp	r3, #255	; 0xff
 8004556:	d10a      	bne.n	800456e <cobs_encode+0x82>
            {
                output[code_index] = code;
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	4413      	add	r3, r2
 800455e:	7cfa      	ldrb	r2, [r7, #19]
 8004560:	701a      	strb	r2, [r3, #0]
                code = 1;
 8004562:	2301      	movs	r3, #1
 8004564:	74fb      	strb	r3, [r7, #19]
                code_index = write_index++;
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	61ba      	str	r2, [r7, #24]
 800456c:	617b      	str	r3, [r7, #20]
    while(read_index < length)
 800456e:	69fa      	ldr	r2, [r7, #28]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	429a      	cmp	r2, r3
 8004574:	d3c9      	bcc.n	800450a <cobs_encode+0x1e>
            }
        }
    }

    output[code_index] = code;
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	4413      	add	r3, r2
 800457c:	7cfa      	ldrb	r2, [r7, #19]
 800457e:	701a      	strb	r2, [r3, #0]

    return write_index;
 8004580:	69bb      	ldr	r3, [r7, #24]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3724      	adds	r7, #36	; 0x24
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr

0800458c <uart_cobs_send>:
#include "cobs.h"
#include "uart_cobs_service.h"

size_t uart_cobs_send(uart_cobs_service_t* h, void* data, size_t size,
	TickType_t timeout)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	603b      	str	r3, [r7, #0]
	if(h->input_queue == NULL)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f8d3 300a 	ldr.w	r3, [r3, #10]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <uart_cobs_send+0x1c>
		return 0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	e012      	b.n	80045ce <uart_cobs_send+0x42>
	uart_cobs_frame_t frame;
	frame.data = data;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	613b      	str	r3, [r7, #16]
	frame.size = size;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	617b      	str	r3, [r7, #20]
	if(xQueueSend(h->input_queue, &frame, timeout) == pdFALSE)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f8d3 000a 	ldr.w	r0, [r3, #10]
 80045b6:	f107 0110 	add.w	r1, r7, #16
 80045ba:	2300      	movs	r3, #0
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	f000 fd87 	bl	80050d0 <xQueueGenericSend>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <uart_cobs_send+0x40>
		return 0;
 80045c8:	2300      	movs	r3, #0
 80045ca:	e000      	b.n	80045ce <uart_cobs_send+0x42>
	else
		return size;
 80045cc:	687b      	ldr	r3, [r7, #4]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <uart_cobs_service_tx_task>:
			frame.data = (void *) framebuffer;
	}
}

void uart_cobs_service_tx_task(void const * argument)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08a      	sub	sp, #40	; 0x28
 80045dc:	af02      	add	r7, sp, #8
 80045de:	6078      	str	r0, [r7, #4]
	uart_cobs_service_t* h = (uart_cobs_service_t *) argument;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	61fb      	str	r3, [r7, #28]
	h->input_queue = xQueueCreate(h->queue_depth, sizeof(uart_cobs_frame_t));
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	7a1b      	ldrb	r3, [r3, #8]
 80045e8:	2200      	movs	r2, #0
 80045ea:	2108      	movs	r1, #8
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 fc76 	bl	8004ede <xQueueGenericCreate>
 80045f2:	4602      	mov	r2, r0
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f8c3 200a 	str.w	r2, [r3, #10]
	/* Data frame handler */
	uart_cobs_frame_t frame = {.data = NULL, .size = 0};
 80045fa:	2300      	movs	r3, #0
 80045fc:	60bb      	str	r3, [r7, #8]
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]
	/* Buffer for COBS */
	size_t cobs_buffer_size = h->max_frame_size + h->max_frame_size/254 + 2;
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	085b      	lsrs	r3, r3, #1
 800460c:	492d      	ldr	r1, [pc, #180]	; (80046c4 <uart_cobs_service_tx_task+0xec>)
 800460e:	fba1 1303 	umull	r1, r3, r1, r3
 8004612:	099b      	lsrs	r3, r3, #6
 8004614:	4413      	add	r3, r2
 8004616:	3302      	adds	r3, #2
 8004618:	61bb      	str	r3, [r7, #24]
	uint8_t *buf = pvPortMalloc(cobs_buffer_size);
 800461a:	69b8      	ldr	r0, [r7, #24]
 800461c:	f002 fbe6 	bl	8006dec <pvPortMalloc>
 8004620:	6178      	str	r0, [r7, #20]
	if(!buf) Error_Handler();
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <uart_cobs_service_tx_task+0x54>
 8004628:	f7fc f81e 	bl	8000668 <Error_Handler>
	size_t size = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	613b      	str	r3, [r7, #16]
	while(1)
	{
		xQueueReceive(h->input_queue, &frame, portMAX_DELAY);
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8004636:	f107 0108 	add.w	r1, r7, #8
 800463a:	f04f 32ff 	mov.w	r2, #4294967295
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fed2 	bl	80053e8 <xQueueReceive>
		size = cobs_encode((uint8_t *) frame.data, frame.size, buf);
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	68f9      	ldr	r1, [r7, #12]
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff ff4e 	bl	80044ec <cobs_encode>
 8004650:	6138      	str	r0, [r7, #16]
		buf[size++] = 0;
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	613a      	str	r2, [r7, #16]
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	4413      	add	r3, r2
 800465c:	2200      	movs	r2, #0
 800465e:	701a      	strb	r2, [r3, #0]
		switch(h->mode)
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	7a5b      	ldrb	r3, [r3, #9]
 8004664:	2b02      	cmp	r3, #2
 8004666:	d01e      	beq.n	80046a6 <uart_cobs_service_tx_task+0xce>
 8004668:	2b02      	cmp	r3, #2
 800466a:	dc28      	bgt.n	80046be <uart_cobs_service_tx_task+0xe6>
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <uart_cobs_service_tx_task+0x9e>
 8004670:	2b01      	cmp	r3, #1
 8004672:	d00c      	beq.n	800468e <uart_cobs_service_tx_task+0xb6>
		case UART_COBS_DMA:
			uart_freertos_tx_dma(h->huart, buf, size,
				portMAX_DELAY, portMAX_DELAY);
			break;
		default:
			break;
 8004674:	e023      	b.n	80046be <uart_cobs_service_tx_task+0xe6>
			uart_freertos_tx(h->huart, buf, size,
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	f04f 33ff 	mov.w	r3, #4294967295
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	f04f 33ff 	mov.w	r3, #4294967295
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	6979      	ldr	r1, [r7, #20]
 8004688:	f000 f8ed 	bl	8004866 <uart_freertos_tx>
			break;
 800468c:	e018      	b.n	80046c0 <uart_cobs_service_tx_task+0xe8>
			uart_freertos_tx_it(h->huart, buf, size,
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	6818      	ldr	r0, [r3, #0]
 8004692:	f04f 33ff 	mov.w	r3, #4294967295
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	f04f 33ff 	mov.w	r3, #4294967295
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	6979      	ldr	r1, [r7, #20]
 80046a0:	f000 f90d 	bl	80048be <uart_freertos_tx_it>
			break;
 80046a4:	e00c      	b.n	80046c0 <uart_cobs_service_tx_task+0xe8>
			uart_freertos_tx_dma(h->huart, buf, size,
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	6818      	ldr	r0, [r3, #0]
 80046aa:	f04f 33ff 	mov.w	r3, #4294967295
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	f04f 33ff 	mov.w	r3, #4294967295
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	6979      	ldr	r1, [r7, #20]
 80046b8:	f000 f945 	bl	8004946 <uart_freertos_tx_dma>
			break;
 80046bc:	e000      	b.n	80046c0 <uart_cobs_service_tx_task+0xe8>
			break;
 80046be:	bf00      	nop
		xQueueReceive(h->input_queue, &frame, portMAX_DELAY);
 80046c0:	e7b6      	b.n	8004630 <uart_cobs_service_tx_task+0x58>
 80046c2:	bf00      	nop
 80046c4:	81020409 	.word	0x81020409

080046c8 <uart_cobs_service_tx_create>:
	return osThreadCreate(&thread, (void *) h);
}

osThreadId uart_cobs_service_tx_create(char *name, osPriority priority,
	uint32_t instances, uint32_t stack_size, uart_cobs_service_t* h)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b08c      	sub	sp, #48	; 0x30
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	607a      	str	r2, [r7, #4]
 80046d2:	603b      	str	r3, [r7, #0]
 80046d4:	460b      	mov	r3, r1
 80046d6:	817b      	strh	r3, [r7, #10]

	/* create treads */
	osThreadDef_t thread = {
 80046d8:	f107 0314 	add.w	r3, r7, #20
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	605a      	str	r2, [r3, #4]
 80046e2:	609a      	str	r2, [r3, #8]
 80046e4:	60da      	str	r2, [r3, #12]
 80046e6:	611a      	str	r2, [r3, #16]
 80046e8:	615a      	str	r2, [r3, #20]
 80046ea:	619a      	str	r2, [r3, #24]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	4b09      	ldr	r3, [pc, #36]	; (8004718 <uart_cobs_service_tx_create+0x50>)
 80046f2:	61bb      	str	r3, [r7, #24]
 80046f4:	897b      	ldrh	r3, [r7, #10]
 80046f6:	83bb      	strh	r3, [r7, #28]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	623b      	str	r3, [r7, #32]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24
		.tpriority	= priority,
		.instances	= instances,
		.stacksize	= stack_size
	};

	return osThreadCreate(&thread, (void *) h);
 8004700:	f107 0314 	add.w	r3, r7, #20
 8004704:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004706:	4618      	mov	r0, r3
 8004708:	f000 f9d0 	bl	8004aac <osThreadCreate>
 800470c:	4603      	mov	r3, r0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3730      	adds	r7, #48	; 0x30
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	080045d9 	.word	0x080045d9

0800471c <uart_rtos_list_append>:
/* Root of UART FreeRTOS list */
static struct uart_rtos_list *uart_rtos_list_begin = NULL;

/* Append the item at the end of UART FreeRTOS list */
static struct uart_rtos_list* uart_rtos_list_append(uart_freertos_t *uart_rtos)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
	/* if list is empty, create and return the begin of list */
	if(uart_rtos_list_begin == NULL)
 8004724:	4b19      	ldr	r3, [pc, #100]	; (800478c <uart_rtos_list_append+0x70>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d110      	bne.n	800474e <uart_rtos_list_append+0x32>
	{
		uart_rtos_list_begin = (struct uart_rtos_list*)
			pvPortMalloc(sizeof(struct uart_rtos_list));
 800472c:	2008      	movs	r0, #8
 800472e:	f002 fb5d 	bl	8006dec <pvPortMalloc>
 8004732:	4603      	mov	r3, r0
		uart_rtos_list_begin = (struct uart_rtos_list*)
 8004734:	4a15      	ldr	r2, [pc, #84]	; (800478c <uart_rtos_list_append+0x70>)
 8004736:	6013      	str	r3, [r2, #0]
		uart_rtos_list_begin->uart_rtos = uart_rtos;
 8004738:	4b14      	ldr	r3, [pc, #80]	; (800478c <uart_rtos_list_append+0x70>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	601a      	str	r2, [r3, #0]
		uart_rtos_list_begin->next = NULL;
 8004740:	4b12      	ldr	r3, [pc, #72]	; (800478c <uart_rtos_list_append+0x70>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2200      	movs	r2, #0
 8004746:	605a      	str	r2, [r3, #4]
		return uart_rtos_list_begin;
 8004748:	4b10      	ldr	r3, [pc, #64]	; (800478c <uart_rtos_list_append+0x70>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	e01a      	b.n	8004784 <uart_rtos_list_append+0x68>
	}
	/* else find end of list */
	struct uart_rtos_list *item = uart_rtos_list_begin;
 800474e:	4b0f      	ldr	r3, [pc, #60]	; (800478c <uart_rtos_list_append+0x70>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	60fb      	str	r3, [r7, #12]
	while(item->next != NULL)
 8004754:	e002      	b.n	800475c <uart_rtos_list_append+0x40>
		item = item->next;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	60fb      	str	r3, [r7, #12]
	while(item->next != NULL)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1f8      	bne.n	8004756 <uart_rtos_list_append+0x3a>
	/* and create and append item at the end of list */
	item->next = (struct uart_rtos_list*)
		pvPortMalloc(sizeof(struct uart_rtos_list));
 8004764:	2008      	movs	r0, #8
 8004766:	f002 fb41 	bl	8006dec <pvPortMalloc>
 800476a:	4602      	mov	r2, r0
	item->next = (struct uart_rtos_list*)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	605a      	str	r2, [r3, #4]
	item->next->uart_rtos = uart_rtos;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	601a      	str	r2, [r3, #0]
	item->next->next = NULL;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	605a      	str	r2, [r3, #4]
	return item->next;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	685b      	ldr	r3, [r3, #4]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	20000354 	.word	0x20000354

08004790 <uart_rtos_list_find_item>:
}

/* Find item in SPI FreeRTOS list with mached SPI_HandleTypeDef */
static struct uart_rtos_list* uart_rtos_list_find_item
	(UART_HandleTypeDef* huart)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]

	struct uart_rtos_list *item = uart_rtos_list_begin;
 8004798:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <uart_rtos_list_find_item+0x38>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 800479e:	e008      	b.n	80047b2 <uart_rtos_list_find_item+0x22>
	{
		if(item->uart_rtos->huart == huart)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d006      	beq.n	80047ba <uart_rtos_list_find_item+0x2a>
			break;
		else
			item = item->next;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	60fb      	str	r3, [r7, #12]
	while(item != NULL)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1f3      	bne.n	80047a0 <uart_rtos_list_find_item+0x10>
 80047b8:	e000      	b.n	80047bc <uart_rtos_list_find_item+0x2c>
			break;
 80047ba:	bf00      	nop
	}
	return item;
 80047bc:	68fb      	ldr	r3, [r7, #12]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr
 80047c8:	20000354 	.word	0x20000354

080047cc <uart_freertos_init>:

/* Initialize UART with FreeRTOS mutexes and semaphores */
uart_freertos_status uart_freertos_init(uart_freertos_t* uart_rtos)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
	/* find hspi into list */
	if(uart_rtos_list_find_item(uart_rtos->huart) != NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4618      	mov	r0, r3
 80047da:	f7ff ffd9 	bl	8004790 <uart_rtos_list_find_item>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <uart_freertos_init+0x1c>
		return UART_FREERTOS_EXIST;
 80047e4:	2305      	movs	r3, #5
 80047e6:	e01f      	b.n	8004828 <uart_freertos_init+0x5c>
	/* if hspi not found, create semaphores and mutexes */
	uart_rtos->tx_mutex = xSemaphoreCreateMutex();
 80047e8:	2001      	movs	r0, #1
 80047ea:	f000 fbef 	bl	8004fcc <xQueueCreateMutex>
 80047ee:	4602      	mov	r2, r0
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	609a      	str	r2, [r3, #8]
	uart_rtos->rx_mutex = xSemaphoreCreateMutex();
 80047f4:	2001      	movs	r0, #1
 80047f6:	f000 fbe9 	bl	8004fcc <xQueueCreateMutex>
 80047fa:	4602      	mov	r2, r0
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	605a      	str	r2, [r3, #4]
	uart_rtos->tx_complete = xSemaphoreCreateBinary();
 8004800:	2203      	movs	r2, #3
 8004802:	2100      	movs	r1, #0
 8004804:	2001      	movs	r0, #1
 8004806:	f000 fb6a 	bl	8004ede <xQueueGenericCreate>
 800480a:	4602      	mov	r2, r0
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	611a      	str	r2, [r3, #16]
	uart_rtos->rx_complete = xSemaphoreCreateBinary();
 8004810:	2203      	movs	r2, #3
 8004812:	2100      	movs	r1, #0
 8004814:	2001      	movs	r0, #1
 8004816:	f000 fb62 	bl	8004ede <xQueueGenericCreate>
 800481a:	4602      	mov	r2, r0
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	60da      	str	r2, [r3, #12]

	/* register spi_freertos_base into list */
	uart_rtos_list_append(uart_rtos);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7ff ff7b 	bl	800471c <uart_rtos_list_append>
	return UART_FREERTOS_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <parse_hal_status>:
	uart_rtos_list_delete(uart_rtos);
}

/* Parse HAL status */
static inline uart_freertos_status parse_hal_status(HAL_StatusTypeDef status)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	4603      	mov	r3, r0
 8004838:	71fb      	strb	r3, [r7, #7]
  switch(status)
 800483a:	79fb      	ldrb	r3, [r7, #7]
 800483c:	2b03      	cmp	r3, #3
 800483e:	d00a      	beq.n	8004856 <parse_hal_status+0x26>
 8004840:	2b03      	cmp	r3, #3
 8004842:	dc0a      	bgt.n	800485a <parse_hal_status+0x2a>
 8004844:	2b01      	cmp	r3, #1
 8004846:	d002      	beq.n	800484e <parse_hal_status+0x1e>
 8004848:	2b02      	cmp	r3, #2
 800484a:	d002      	beq.n	8004852 <parse_hal_status+0x22>
 800484c:	e005      	b.n	800485a <parse_hal_status+0x2a>
  {
  case HAL_ERROR:
    return UART_FREERTOS_ERR;
 800484e:	2301      	movs	r3, #1
 8004850:	e004      	b.n	800485c <parse_hal_status+0x2c>
  case HAL_BUSY:
    return UART_FREERTOS_BUSY;
 8004852:	2303      	movs	r3, #3
 8004854:	e002      	b.n	800485c <parse_hal_status+0x2c>
  case HAL_TIMEOUT:
    return UART_FREERTOS_TIMEOUT;
 8004856:	2304      	movs	r3, #4
 8004858:	e000      	b.n	800485c <parse_hal_status+0x2c>
  default:
    return UART_FREERTOS_OK;
 800485a:	2300      	movs	r3, #0
  }
}
 800485c:	4618      	mov	r0, r3
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	bc80      	pop	{r7}
 8004864:	4770      	bx	lr

08004866 <uart_freertos_tx>:

/* Transmit data through UART whithout interupts */
uart_freertos_status uart_freertos_tx (uart_freertos_t* uart, const void* data, size_t data_size, TickType_t mutex_timeout, uint32_t transfer_timeout)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b086      	sub	sp, #24
 800486a:	af00      	add	r7, sp, #0
 800486c:	60f8      	str	r0, [r7, #12]
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	607a      	str	r2, [r7, #4]
 8004872:	603b      	str	r3, [r7, #0]
	uart_freertos_status rtn;

	if(xSemaphoreTake(uart->tx_mutex, mutex_timeout) == pdFALSE)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	6839      	ldr	r1, [r7, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fe94 	bl	80055a8 <xQueueSemaphoreTake>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <uart_freertos_tx+0x24>
	{
		return UART_FREERTOS_BUSY;
 8004886:	2303      	movs	r3, #3
 8004888:	e015      	b.n	80048b6 <uart_freertos_tx+0x50>
	}

	rtn = parse_hal_status (HAL_UART_Transmit(uart->huart,(void*) data, data_size, transfer_timeout));
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	b29a      	uxth	r2, r3
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	68b9      	ldr	r1, [r7, #8]
 8004896:	f7fe fdce 	bl	8003436 <HAL_UART_Transmit>
 800489a:	4603      	mov	r3, r0
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff ffc7 	bl	8004830 <parse_hal_status>
 80048a2:	4603      	mov	r3, r0
 80048a4:	75fb      	strb	r3, [r7, #23]

	/* Give back UART mutex */
	xSemaphoreGive(uart->tx_mutex);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6898      	ldr	r0, [r3, #8]
 80048aa:	2300      	movs	r3, #0
 80048ac:	2200      	movs	r2, #0
 80048ae:	2100      	movs	r1, #0
 80048b0:	f000 fc0e 	bl	80050d0 <xQueueGenericSend>

	return rtn;
 80048b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <uart_freertos_tx_it>:
}


/* Transmit data through UART with interupts */
uart_freertos_status uart_freertos_tx_it (uart_freertos_t* uart, const void* data, size_t data_size, TickType_t mutex_timeout, TickType_t transfer_timeout)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b086      	sub	sp, #24
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	60f8      	str	r0, [r7, #12]
 80048c6:	60b9      	str	r1, [r7, #8]
 80048c8:	607a      	str	r2, [r7, #4]
 80048ca:	603b      	str	r3, [r7, #0]
	uart_freertos_status rtn = UART_FREERTOS_OK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	75fb      	strb	r3, [r7, #23]

	if(xSemaphoreTake(uart->tx_mutex, mutex_timeout) == pdFALSE)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	6839      	ldr	r1, [r7, #0]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 fe66 	bl	80055a8 <xQueueSemaphoreTake>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d102      	bne.n	80048e8 <uart_freertos_tx_it+0x2a>
	{
		rtn = UART_FREERTOS_BUSY;
 80048e2:	2303      	movs	r3, #3
 80048e4:	75fb      	strb	r3, [r7, #23]
		goto exit;
 80048e6:	e029      	b.n	800493c <uart_freertos_tx_it+0x7e>
	}

	rtn =  parse_hal_status ( HAL_UART_Transmit_IT(uart->huart,(void*) data, data_size));
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	b292      	uxth	r2, r2
 80048f0:	68b9      	ldr	r1, [r7, #8]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fe fe31 	bl	800355a <HAL_UART_Transmit_IT>
 80048f8:	4603      	mov	r3, r0
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff ff98 	bl	8004830 <parse_hal_status>
 8004900:	4603      	mov	r3, r0
 8004902:	75fb      	strb	r3, [r7, #23]

	if ((rtn == UART_FREERTOS_ERR) || (rtn == UART_FREERTOS_BUSY) ) goto end_of_transaction;
 8004904:	7dfb      	ldrb	r3, [r7, #23]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d00e      	beq.n	8004928 <uart_freertos_tx_it+0x6a>
 800490a:	7dfb      	ldrb	r3, [r7, #23]
 800490c:	2b03      	cmp	r3, #3
 800490e:	d00b      	beq.n	8004928 <uart_freertos_tx_it+0x6a>

	/* Waiting for tx complete */
	if(xSemaphoreTake(uart->tx_complete,transfer_timeout) == pdFALSE)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	6a39      	ldr	r1, [r7, #32]
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fe46 	bl	80055a8 <xQueueSemaphoreTake>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d104      	bne.n	800492c <uart_freertos_tx_it+0x6e>
	{
		rtn = UART_FREERTOS_TIMEOUT;
 8004922:	2304      	movs	r3, #4
 8004924:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 8004926:	e002      	b.n	800492e <uart_freertos_tx_it+0x70>
	if ((rtn == UART_FREERTOS_ERR) || (rtn == UART_FREERTOS_BUSY) ) goto end_of_transaction;
 8004928:	bf00      	nop
 800492a:	e000      	b.n	800492e <uart_freertos_tx_it+0x70>
	}

	end_of_transaction:
 800492c:	bf00      	nop

	/* Give back UART mutex */
	xSemaphoreGive(uart->tx_mutex);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6898      	ldr	r0, [r3, #8]
 8004932:	2300      	movs	r3, #0
 8004934:	2200      	movs	r2, #0
 8004936:	2100      	movs	r1, #0
 8004938:	f000 fbca 	bl	80050d0 <xQueueGenericSend>

	exit:
	return rtn;
 800493c:	7dfb      	ldrb	r3, [r7, #23]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <uart_freertos_tx_dma>:
}


/* Transmit data through UART whithout interupts */
uart_freertos_status uart_freertos_tx_dma (uart_freertos_t* uart, const void* data, size_t data_size, TickType_t mutex_timeout, TickType_t transfer_timeout)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b086      	sub	sp, #24
 800494a:	af00      	add	r7, sp, #0
 800494c:	60f8      	str	r0, [r7, #12]
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	607a      	str	r2, [r7, #4]
 8004952:	603b      	str	r3, [r7, #0]
	uart_freertos_status rtn = UART_FREERTOS_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	75fb      	strb	r3, [r7, #23]

	if(xSemaphoreTake(uart->tx_mutex, mutex_timeout) == pdFALSE)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	6839      	ldr	r1, [r7, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f000 fe22 	bl	80055a8 <xQueueSemaphoreTake>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d102      	bne.n	8004970 <uart_freertos_tx_dma+0x2a>
	{
		rtn = UART_FREERTOS_BUSY;
 800496a:	2303      	movs	r3, #3
 800496c:	75fb      	strb	r3, [r7, #23]
		goto exit;
 800496e:	e029      	b.n	80049c4 <uart_freertos_tx_dma+0x7e>
	}

	rtn =  parse_hal_status ( HAL_UART_Transmit_DMA(uart->huart,(void*) data, data_size));
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	b292      	uxth	r2, r2
 8004978:	68b9      	ldr	r1, [r7, #8]
 800497a:	4618      	mov	r0, r3
 800497c:	f7fe fe32 	bl	80035e4 <HAL_UART_Transmit_DMA>
 8004980:	4603      	mov	r3, r0
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff ff54 	bl	8004830 <parse_hal_status>
 8004988:	4603      	mov	r3, r0
 800498a:	75fb      	strb	r3, [r7, #23]

	if ((rtn == UART_FREERTOS_ERR) || (rtn == UART_FREERTOS_BUSY) ) goto end_of_transaction;
 800498c:	7dfb      	ldrb	r3, [r7, #23]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d00e      	beq.n	80049b0 <uart_freertos_tx_dma+0x6a>
 8004992:	7dfb      	ldrb	r3, [r7, #23]
 8004994:	2b03      	cmp	r3, #3
 8004996:	d00b      	beq.n	80049b0 <uart_freertos_tx_dma+0x6a>

	/* Waiting for tx complete */
	if(xSemaphoreTake(uart->tx_complete,transfer_timeout) == pdFALSE)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	6a39      	ldr	r1, [r7, #32]
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 fe02 	bl	80055a8 <xQueueSemaphoreTake>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d104      	bne.n	80049b4 <uart_freertos_tx_dma+0x6e>
	{
		rtn = UART_FREERTOS_TIMEOUT;
 80049aa:	2304      	movs	r3, #4
 80049ac:	75fb      	strb	r3, [r7, #23]
		goto end_of_transaction;
 80049ae:	e002      	b.n	80049b6 <uart_freertos_tx_dma+0x70>
	if ((rtn == UART_FREERTOS_ERR) || (rtn == UART_FREERTOS_BUSY) ) goto end_of_transaction;
 80049b0:	bf00      	nop
 80049b2:	e000      	b.n	80049b6 <uart_freertos_tx_dma+0x70>
	}

	end_of_transaction:
 80049b4:	bf00      	nop

	/* Give back UART mutex */
	xSemaphoreGive(uart->tx_mutex);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6898      	ldr	r0, [r3, #8]
 80049ba:	2300      	movs	r3, #0
 80049bc:	2200      	movs	r2, #0
 80049be:	2100      	movs	r1, #0
 80049c0:	f000 fb86 	bl	80050d0 <xQueueGenericSend>

	exit:
	return rtn;
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <HAL_UART_RxCpltCallback>:
	return rtn;
}

/* USART RX complete inperrupt */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80049d8:	2300      	movs	r3, #0
 80049da:	60bb      	str	r3, [r7, #8]
	struct uart_rtos_list *item = uart_rtos_list_find_item(huart);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7ff fed7 	bl	8004790 <uart_rtos_list_find_item>
 80049e2:	60f8      	str	r0, [r7, #12]
	if(item == NULL) return;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d014      	beq.n	8004a14 <HAL_UART_RxCpltCallback+0x44>
	xSemaphoreGiveFromISR(item->uart_rtos->rx_complete,	&xHigherPriorityTaskWoken);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f107 0208 	add.w	r2, r7, #8
 80049f4:	4611      	mov	r1, r2
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 fc68 	bl	80052cc <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d009      	beq.n	8004a16 <HAL_UART_RxCpltCallback+0x46>
 8004a02:	4b06      	ldr	r3, [pc, #24]	; (8004a1c <HAL_UART_RxCpltCallback+0x4c>)
 8004a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	e000      	b.n	8004a16 <HAL_UART_RxCpltCallback+0x46>
	if(item == NULL) return;
 8004a14:	bf00      	nop
}
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	e000ed04 	.word	0xe000ed04

08004a20 <HAL_UART_TxCpltCallback>:

/* USART TX complete inperrupt */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	60bb      	str	r3, [r7, #8]
	struct uart_rtos_list *item = uart_rtos_list_find_item(huart);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7ff feaf 	bl	8004790 <uart_rtos_list_find_item>
 8004a32:	60f8      	str	r0, [r7, #12]
	if(item == NULL) return;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d014      	beq.n	8004a64 <HAL_UART_TxCpltCallback+0x44>
	xSemaphoreGiveFromISR(item->uart_rtos->tx_complete,	&xHigherPriorityTaskWoken);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	f107 0208 	add.w	r2, r7, #8
 8004a44:	4611      	mov	r1, r2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fc40 	bl	80052cc <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d009      	beq.n	8004a66 <HAL_UART_TxCpltCallback+0x46>
 8004a52:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <HAL_UART_TxCpltCallback+0x4c>)
 8004a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	e000      	b.n	8004a66 <HAL_UART_TxCpltCallback+0x46>
	if(item == NULL) return;
 8004a64:	bf00      	nop
}
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	e000ed04 	.word	0xe000ed04

08004a70 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	4603      	mov	r3, r0
 8004a78:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004a7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a82:	2b84      	cmp	r3, #132	; 0x84
 8004a84:	d005      	beq.n	8004a92 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004a86:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	3303      	adds	r3, #3
 8004a90:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004a92:	68fb      	ldr	r3, [r7, #12]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bc80      	pop	{r7}
 8004a9c:	4770      	bx	lr

08004a9e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004aa2:	f001 f955 	bl	8005d50 <vTaskStartScheduler>
  
  return osOK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aae:	b089      	sub	sp, #36	; 0x24
 8004ab0:	af04      	add	r7, sp, #16
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d020      	beq.n	8004b00 <osThreadCreate+0x54>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d01c      	beq.n	8004b00 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685c      	ldr	r4, [r3, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681d      	ldr	r5, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691e      	ldr	r6, [r3, #16]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7ff ffc9 	bl	8004a70 <makeFreeRtosPriority>
 8004ade:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ae8:	9202      	str	r2, [sp, #8]
 8004aea:	9301      	str	r3, [sp, #4]
 8004aec:	9100      	str	r1, [sp, #0]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	4632      	mov	r2, r6
 8004af2:	4629      	mov	r1, r5
 8004af4:	4620      	mov	r0, r4
 8004af6:	f000 ff8a 	bl	8005a0e <xTaskCreateStatic>
 8004afa:	4603      	mov	r3, r0
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	e01c      	b.n	8004b3a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685c      	ldr	r4, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b0c:	b29e      	uxth	r6, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7ff ffab 	bl	8004a70 <makeFreeRtosPriority>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	f107 030c 	add.w	r3, r7, #12
 8004b20:	9301      	str	r3, [sp, #4]
 8004b22:	9200      	str	r2, [sp, #0]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	4632      	mov	r2, r6
 8004b28:	4629      	mov	r1, r5
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	f000 ffcb 	bl	8005ac6 <xTaskCreate>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d001      	beq.n	8004b3a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	e000      	b.n	8004b3c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3714      	adds	r7, #20
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b44 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d016      	beq.n	8004b84 <osSemaphoreCreate+0x40>
    if (count == 1) {
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d10a      	bne.n	8004b72 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2203      	movs	r2, #3
 8004b62:	9200      	str	r2, [sp, #0]
 8004b64:	2200      	movs	r2, #0
 8004b66:	2100      	movs	r1, #0
 8004b68:	2001      	movs	r0, #1
 8004b6a:	f000 f941 	bl	8004df0 <xQueueGenericCreateStatic>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	e023      	b.n	8004bba <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8004b72:	6838      	ldr	r0, [r7, #0]
 8004b74:	6839      	ldr	r1, [r7, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f000 fa3e 	bl	8004ffc <xQueueCreateCountingSemaphoreStatic>
 8004b80:	4603      	mov	r3, r0
 8004b82:	e01a      	b.n	8004bba <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d110      	bne.n	8004bac <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8004b8a:	2203      	movs	r2, #3
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	2001      	movs	r0, #1
 8004b90:	f000 f9a5 	bl	8004ede <xQueueGenericCreate>
 8004b94:	60f8      	str	r0, [r7, #12]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <osSemaphoreCreate+0x64>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 fa94 	bl	80050d0 <xQueueGenericSend>
      return sema;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	e006      	b.n	8004bba <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	4611      	mov	r1, r2
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fa59 	bl	800506a <xQueueCreateCountingSemaphore>
 8004bb8:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f103 0208 	add.w	r2, r3, #8
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bda:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f103 0208 	add.w	r2, r3, #8
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f103 0208 	add.w	r2, r3, #8
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr

08004c00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr

08004c18 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	601a      	str	r2, [r3, #0]
}
 8004c54:	bf00      	nop
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bc80      	pop	{r7}
 8004c5c:	4770      	bx	lr

08004c5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b085      	sub	sp, #20
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c74:	d103      	bne.n	8004c7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	e00c      	b.n	8004c98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	3308      	adds	r3, #8
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	e002      	b.n	8004c8c <vListInsert+0x2e>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d2f6      	bcs.n	8004c86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	601a      	str	r2, [r3, #0]
}
 8004cc4:	bf00      	nop
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bc80      	pop	{r7}
 8004ccc:	4770      	bx	lr

08004cce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b085      	sub	sp, #20
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6892      	ldr	r2, [r2, #8]
 8004ce4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6852      	ldr	r2, [r2, #4]
 8004cee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d103      	bne.n	8004d02 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	1e5a      	subs	r2, r3, #1
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr

08004d20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10a      	bne.n	8004d4a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d46:	bf00      	nop
 8004d48:	e7fe      	b.n	8004d48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d4a:	f001 ff4f 	bl	8006bec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d56:	68f9      	ldr	r1, [r7, #12]
 8004d58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d5a:	fb01 f303 	mul.w	r3, r1, r3
 8004d5e:	441a      	add	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	68f9      	ldr	r1, [r7, #12]
 8004d7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d80:	fb01 f303 	mul.w	r3, r1, r3
 8004d84:	441a      	add	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	22ff      	movs	r2, #255	; 0xff
 8004d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	22ff      	movs	r2, #255	; 0xff
 8004d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d114      	bne.n	8004dca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d01a      	beq.n	8004dde <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	3310      	adds	r3, #16
 8004dac:	4618      	mov	r0, r3
 8004dae:	f001 fa27 	bl	8006200 <xTaskRemoveFromEventList>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d012      	beq.n	8004dde <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004db8:	4b0c      	ldr	r3, [pc, #48]	; (8004dec <xQueueGenericReset+0xcc>)
 8004dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	e009      	b.n	8004dde <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	3310      	adds	r3, #16
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7ff fef7 	bl	8004bc2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	3324      	adds	r3, #36	; 0x24
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7ff fef2 	bl	8004bc2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004dde:	f001 ff35 	bl	8006c4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004de2:	2301      	movs	r3, #1
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	e000ed04 	.word	0xe000ed04

08004df0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b08e      	sub	sp, #56	; 0x38
 8004df4:	af02      	add	r7, sp, #8
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10a      	bne.n	8004e1a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e16:	bf00      	nop
 8004e18:	e7fe      	b.n	8004e18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10a      	bne.n	8004e36 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e32:	bf00      	nop
 8004e34:	e7fe      	b.n	8004e34 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <xQueueGenericCreateStatic+0x52>
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <xQueueGenericCreateStatic+0x56>
 8004e42:	2301      	movs	r3, #1
 8004e44:	e000      	b.n	8004e48 <xQueueGenericCreateStatic+0x58>
 8004e46:	2300      	movs	r3, #0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10a      	bne.n	8004e62 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	623b      	str	r3, [r7, #32]
}
 8004e5e:	bf00      	nop
 8004e60:	e7fe      	b.n	8004e60 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d102      	bne.n	8004e6e <xQueueGenericCreateStatic+0x7e>
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <xQueueGenericCreateStatic+0x82>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e000      	b.n	8004e74 <xQueueGenericCreateStatic+0x84>
 8004e72:	2300      	movs	r3, #0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10a      	bne.n	8004e8e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7c:	f383 8811 	msr	BASEPRI, r3
 8004e80:	f3bf 8f6f 	isb	sy
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	61fb      	str	r3, [r7, #28]
}
 8004e8a:	bf00      	nop
 8004e8c:	e7fe      	b.n	8004e8c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e8e:	2348      	movs	r3, #72	; 0x48
 8004e90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	2b48      	cmp	r3, #72	; 0x48
 8004e96:	d00a      	beq.n	8004eae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	61bb      	str	r3, [r7, #24]
}
 8004eaa:	bf00      	nop
 8004eac:	e7fe      	b.n	8004eac <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00d      	beq.n	8004ed4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ec0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	68b9      	ldr	r1, [r7, #8]
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 f843 	bl	8004f5a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3730      	adds	r7, #48	; 0x30
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b08a      	sub	sp, #40	; 0x28
 8004ee2:	af02      	add	r7, sp, #8
 8004ee4:	60f8      	str	r0, [r7, #12]
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10a      	bne.n	8004f08 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef6:	f383 8811 	msr	BASEPRI, r3
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	613b      	str	r3, [r7, #16]
}
 8004f04:	bf00      	nop
 8004f06:	e7fe      	b.n	8004f06 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d102      	bne.n	8004f14 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61fb      	str	r3, [r7, #28]
 8004f12:	e004      	b.n	8004f1e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	fb02 f303 	mul.w	r3, r2, r3
 8004f1c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	3348      	adds	r3, #72	; 0x48
 8004f22:	4618      	mov	r0, r3
 8004f24:	f001 ff62 	bl	8006dec <pvPortMalloc>
 8004f28:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00f      	beq.n	8004f50 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	3348      	adds	r3, #72	; 0x48
 8004f34:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f3e:	79fa      	ldrb	r2, [r7, #7]
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	4613      	mov	r3, r2
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f000 f805 	bl	8004f5a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004f50:	69bb      	ldr	r3, [r7, #24]
	}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3720      	adds	r7, #32
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b084      	sub	sp, #16
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	60f8      	str	r0, [r7, #12]
 8004f62:	60b9      	str	r1, [r7, #8]
 8004f64:	607a      	str	r2, [r7, #4]
 8004f66:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d103      	bne.n	8004f76 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	e002      	b.n	8004f7c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f88:	2101      	movs	r1, #1
 8004f8a:	69b8      	ldr	r0, [r7, #24]
 8004f8c:	f7ff fec8 	bl	8004d20 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f90:	bf00      	nop
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00e      	beq.n	8004fc4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004fb8:	2300      	movs	r3, #0
 8004fba:	2200      	movs	r2, #0
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f886 	bl	80050d0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004fc4:	bf00      	nop
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	2300      	movs	r3, #0
 8004fdc:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004fde:	79fb      	ldrb	r3, [r7, #7]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	6939      	ldr	r1, [r7, #16]
 8004fe4:	6978      	ldr	r0, [r7, #20]
 8004fe6:	f7ff ff7a 	bl	8004ede <xQueueGenericCreate>
 8004fea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f7ff ffd3 	bl	8004f98 <prvInitialiseMutex>

		return pxNewQueue;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
	}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3718      	adds	r7, #24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08a      	sub	sp, #40	; 0x28
 8005000:	af02      	add	r7, sp, #8
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10a      	bne.n	8005024 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800500e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	61bb      	str	r3, [r7, #24]
}
 8005020:	bf00      	nop
 8005022:	e7fe      	b.n	8005022 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	429a      	cmp	r2, r3
 800502a:	d90a      	bls.n	8005042 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	617b      	str	r3, [r7, #20]
}
 800503e:	bf00      	nop
 8005040:	e7fe      	b.n	8005040 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005042:	2302      	movs	r3, #2
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	2100      	movs	r1, #0
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f7ff fecf 	bl	8004df0 <xQueueGenericCreateStatic>
 8005052:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005060:	69fb      	ldr	r3, [r7, #28]
	}
 8005062:	4618      	mov	r0, r3
 8005064:	3720      	adds	r7, #32
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800506a:	b580      	push	{r7, lr}
 800506c:	b086      	sub	sp, #24
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10a      	bne.n	8005090 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800507a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	613b      	str	r3, [r7, #16]
}
 800508c:	bf00      	nop
 800508e:	e7fe      	b.n	800508e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	429a      	cmp	r2, r3
 8005096:	d90a      	bls.n	80050ae <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	60fb      	str	r3, [r7, #12]
}
 80050aa:	bf00      	nop
 80050ac:	e7fe      	b.n	80050ac <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80050ae:	2202      	movs	r2, #2
 80050b0:	2100      	movs	r1, #0
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7ff ff13 	bl	8004ede <xQueueGenericCreate>
 80050b8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80050c6:	697b      	ldr	r3, [r7, #20]
	}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08e      	sub	sp, #56	; 0x38
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80050de:	2300      	movs	r3, #0
 80050e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10a      	bne.n	8005102 <xQueueGenericSend+0x32>
	__asm volatile
 80050ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050fe:	bf00      	nop
 8005100:	e7fe      	b.n	8005100 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d103      	bne.n	8005110 <xQueueGenericSend+0x40>
 8005108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <xQueueGenericSend+0x44>
 8005110:	2301      	movs	r3, #1
 8005112:	e000      	b.n	8005116 <xQueueGenericSend+0x46>
 8005114:	2300      	movs	r3, #0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10a      	bne.n	8005130 <xQueueGenericSend+0x60>
	__asm volatile
 800511a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511e:	f383 8811 	msr	BASEPRI, r3
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800512c:	bf00      	nop
 800512e:	e7fe      	b.n	800512e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2b02      	cmp	r3, #2
 8005134:	d103      	bne.n	800513e <xQueueGenericSend+0x6e>
 8005136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513a:	2b01      	cmp	r3, #1
 800513c:	d101      	bne.n	8005142 <xQueueGenericSend+0x72>
 800513e:	2301      	movs	r3, #1
 8005140:	e000      	b.n	8005144 <xQueueGenericSend+0x74>
 8005142:	2300      	movs	r3, #0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10a      	bne.n	800515e <xQueueGenericSend+0x8e>
	__asm volatile
 8005148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514c:	f383 8811 	msr	BASEPRI, r3
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	623b      	str	r3, [r7, #32]
}
 800515a:	bf00      	nop
 800515c:	e7fe      	b.n	800515c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800515e:	f001 fa13 	bl	8006588 <xTaskGetSchedulerState>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d102      	bne.n	800516e <xQueueGenericSend+0x9e>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <xQueueGenericSend+0xa2>
 800516e:	2301      	movs	r3, #1
 8005170:	e000      	b.n	8005174 <xQueueGenericSend+0xa4>
 8005172:	2300      	movs	r3, #0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10a      	bne.n	800518e <xQueueGenericSend+0xbe>
	__asm volatile
 8005178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	61fb      	str	r3, [r7, #28]
}
 800518a:	bf00      	nop
 800518c:	e7fe      	b.n	800518c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800518e:	f001 fd2d 	bl	8006bec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519a:	429a      	cmp	r2, r3
 800519c:	d302      	bcc.n	80051a4 <xQueueGenericSend+0xd4>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d129      	bne.n	80051f8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	68b9      	ldr	r1, [r7, #8]
 80051a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051aa:	f000 fb20 	bl	80057ee <prvCopyDataToQueue>
 80051ae:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d010      	beq.n	80051da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ba:	3324      	adds	r3, #36	; 0x24
 80051bc:	4618      	mov	r0, r3
 80051be:	f001 f81f 	bl	8006200 <xTaskRemoveFromEventList>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d013      	beq.n	80051f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80051c8:	4b3f      	ldr	r3, [pc, #252]	; (80052c8 <xQueueGenericSend+0x1f8>)
 80051ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	e00a      	b.n	80051f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80051da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d007      	beq.n	80051f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80051e0:	4b39      	ldr	r3, [pc, #228]	; (80052c8 <xQueueGenericSend+0x1f8>)
 80051e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80051f0:	f001 fd2c 	bl	8006c4c <vPortExitCritical>
				return pdPASS;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e063      	b.n	80052c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d103      	bne.n	8005206 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051fe:	f001 fd25 	bl	8006c4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005202:	2300      	movs	r3, #0
 8005204:	e05c      	b.n	80052c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005208:	2b00      	cmp	r3, #0
 800520a:	d106      	bne.n	800521a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800520c:	f107 0314 	add.w	r3, r7, #20
 8005210:	4618      	mov	r0, r3
 8005212:	f001 f857 	bl	80062c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005216:	2301      	movs	r3, #1
 8005218:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800521a:	f001 fd17 	bl	8006c4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800521e:	f000 fe01 	bl	8005e24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005222:	f001 fce3 	bl	8006bec <vPortEnterCritical>
 8005226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005228:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800522c:	b25b      	sxtb	r3, r3
 800522e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005232:	d103      	bne.n	800523c <xQueueGenericSend+0x16c>
 8005234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800523c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005242:	b25b      	sxtb	r3, r3
 8005244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005248:	d103      	bne.n	8005252 <xQueueGenericSend+0x182>
 800524a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005252:	f001 fcfb 	bl	8006c4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005256:	1d3a      	adds	r2, r7, #4
 8005258:	f107 0314 	add.w	r3, r7, #20
 800525c:	4611      	mov	r1, r2
 800525e:	4618      	mov	r0, r3
 8005260:	f001 f846 	bl	80062f0 <xTaskCheckForTimeOut>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d124      	bne.n	80052b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800526a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800526c:	f000 fbb7 	bl	80059de <prvIsQueueFull>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d018      	beq.n	80052a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005278:	3310      	adds	r3, #16
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	4611      	mov	r1, r2
 800527e:	4618      	mov	r0, r3
 8005280:	f000 ff9a 	bl	80061b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005284:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005286:	f000 fb42 	bl	800590e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800528a:	f000 fdd9 	bl	8005e40 <xTaskResumeAll>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	f47f af7c 	bne.w	800518e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005296:	4b0c      	ldr	r3, [pc, #48]	; (80052c8 <xQueueGenericSend+0x1f8>)
 8005298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	e772      	b.n	800518e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80052a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052aa:	f000 fb30 	bl	800590e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052ae:	f000 fdc7 	bl	8005e40 <xTaskResumeAll>
 80052b2:	e76c      	b.n	800518e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80052b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052b6:	f000 fb2a 	bl	800590e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052ba:	f000 fdc1 	bl	8005e40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80052be:	2300      	movs	r3, #0
		}
	}
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3738      	adds	r7, #56	; 0x38
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	e000ed04 	.word	0xe000ed04

080052cc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08e      	sub	sp, #56	; 0x38
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80052da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10a      	bne.n	80052f6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80052e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	623b      	str	r3, [r7, #32]
}
 80052f2:	bf00      	nop
 80052f4:	e7fe      	b.n	80052f4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80052f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <xQueueGiveFromISR+0x48>
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	61fb      	str	r3, [r7, #28]
}
 8005310:	bf00      	nop
 8005312:	e7fe      	b.n	8005312 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d103      	bne.n	8005324 <xQueueGiveFromISR+0x58>
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <xQueueGiveFromISR+0x5c>
 8005324:	2301      	movs	r3, #1
 8005326:	e000      	b.n	800532a <xQueueGiveFromISR+0x5e>
 8005328:	2300      	movs	r3, #0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10a      	bne.n	8005344 <xQueueGiveFromISR+0x78>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	61bb      	str	r3, [r7, #24]
}
 8005340:	bf00      	nop
 8005342:	e7fe      	b.n	8005342 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005344:	f001 fd14 	bl	8006d70 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005348:	f3ef 8211 	mrs	r2, BASEPRI
 800534c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	617a      	str	r2, [r7, #20]
 800535e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005360:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005362:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005370:	429a      	cmp	r2, r3
 8005372:	d22b      	bcs.n	80053cc <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005376:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800537a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800537e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005380:	1c5a      	adds	r2, r3, #1
 8005382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005384:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005386:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800538a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538e:	d112      	bne.n	80053b6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	2b00      	cmp	r3, #0
 8005396:	d016      	beq.n	80053c6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539a:	3324      	adds	r3, #36	; 0x24
 800539c:	4618      	mov	r0, r3
 800539e:	f000 ff2f 	bl	8006200 <xTaskRemoveFromEventList>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00e      	beq.n	80053c6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00b      	beq.n	80053c6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2201      	movs	r2, #1
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	e007      	b.n	80053c6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80053b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053ba:	3301      	adds	r3, #1
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	b25a      	sxtb	r2, r3
 80053c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80053c6:	2301      	movs	r3, #1
 80053c8:	637b      	str	r3, [r7, #52]	; 0x34
 80053ca:	e001      	b.n	80053d0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80053cc:	2300      	movs	r3, #0
 80053ce:	637b      	str	r3, [r7, #52]	; 0x34
 80053d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80053da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3738      	adds	r7, #56	; 0x38
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
	...

080053e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08c      	sub	sp, #48	; 0x30
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80053f4:	2300      	movs	r3, #0
 80053f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10a      	bne.n	8005418 <xQueueReceive+0x30>
	__asm volatile
 8005402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	623b      	str	r3, [r7, #32]
}
 8005414:	bf00      	nop
 8005416:	e7fe      	b.n	8005416 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d103      	bne.n	8005426 <xQueueReceive+0x3e>
 800541e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <xQueueReceive+0x42>
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <xQueueReceive+0x44>
 800542a:	2300      	movs	r3, #0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10a      	bne.n	8005446 <xQueueReceive+0x5e>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	61fb      	str	r3, [r7, #28]
}
 8005442:	bf00      	nop
 8005444:	e7fe      	b.n	8005444 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005446:	f001 f89f 	bl	8006588 <xTaskGetSchedulerState>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d102      	bne.n	8005456 <xQueueReceive+0x6e>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <xQueueReceive+0x72>
 8005456:	2301      	movs	r3, #1
 8005458:	e000      	b.n	800545c <xQueueReceive+0x74>
 800545a:	2300      	movs	r3, #0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10a      	bne.n	8005476 <xQueueReceive+0x8e>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	61bb      	str	r3, [r7, #24]
}
 8005472:	bf00      	nop
 8005474:	e7fe      	b.n	8005474 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005476:	f001 fbb9 	bl	8006bec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800547a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	2b00      	cmp	r3, #0
 8005484:	d01f      	beq.n	80054c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005486:	68b9      	ldr	r1, [r7, #8]
 8005488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800548a:	f000 fa1a 	bl	80058c2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	1e5a      	subs	r2, r3, #1
 8005492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005494:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00f      	beq.n	80054be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800549e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a0:	3310      	adds	r3, #16
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 feac 	bl	8006200 <xTaskRemoveFromEventList>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d007      	beq.n	80054be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80054ae:	4b3d      	ldr	r3, [pc, #244]	; (80055a4 <xQueueReceive+0x1bc>)
 80054b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80054be:	f001 fbc5 	bl	8006c4c <vPortExitCritical>
				return pdPASS;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e069      	b.n	800559a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d103      	bne.n	80054d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054cc:	f001 fbbe 	bl	8006c4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80054d0:	2300      	movs	r3, #0
 80054d2:	e062      	b.n	800559a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d106      	bne.n	80054e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054da:	f107 0310 	add.w	r3, r7, #16
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fef0 	bl	80062c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054e4:	2301      	movs	r3, #1
 80054e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054e8:	f001 fbb0 	bl	8006c4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054ec:	f000 fc9a 	bl	8005e24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054f0:	f001 fb7c 	bl	8006bec <vPortEnterCritical>
 80054f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054fa:	b25b      	sxtb	r3, r3
 80054fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005500:	d103      	bne.n	800550a <xQueueReceive+0x122>
 8005502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800550a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005510:	b25b      	sxtb	r3, r3
 8005512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005516:	d103      	bne.n	8005520 <xQueueReceive+0x138>
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005520:	f001 fb94 	bl	8006c4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005524:	1d3a      	adds	r2, r7, #4
 8005526:	f107 0310 	add.w	r3, r7, #16
 800552a:	4611      	mov	r1, r2
 800552c:	4618      	mov	r0, r3
 800552e:	f000 fedf 	bl	80062f0 <xTaskCheckForTimeOut>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d123      	bne.n	8005580 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800553a:	f000 fa3a 	bl	80059b2 <prvIsQueueEmpty>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d017      	beq.n	8005574 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	3324      	adds	r3, #36	; 0x24
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	4611      	mov	r1, r2
 800554c:	4618      	mov	r0, r3
 800554e:	f000 fe33 	bl	80061b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005554:	f000 f9db 	bl	800590e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005558:	f000 fc72 	bl	8005e40 <xTaskResumeAll>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d189      	bne.n	8005476 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005562:	4b10      	ldr	r3, [pc, #64]	; (80055a4 <xQueueReceive+0x1bc>)
 8005564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	e780      	b.n	8005476 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005576:	f000 f9ca 	bl	800590e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800557a:	f000 fc61 	bl	8005e40 <xTaskResumeAll>
 800557e:	e77a      	b.n	8005476 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005582:	f000 f9c4 	bl	800590e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005586:	f000 fc5b 	bl	8005e40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800558a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800558c:	f000 fa11 	bl	80059b2 <prvIsQueueEmpty>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	f43f af6f 	beq.w	8005476 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005598:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800559a:	4618      	mov	r0, r3
 800559c:	3730      	adds	r7, #48	; 0x30
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	e000ed04 	.word	0xe000ed04

080055a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08e      	sub	sp, #56	; 0x38
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80055b2:	2300      	movs	r3, #0
 80055b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80055ba:	2300      	movs	r3, #0
 80055bc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10a      	bne.n	80055da <xQueueSemaphoreTake+0x32>
	__asm volatile
 80055c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	623b      	str	r3, [r7, #32]
}
 80055d6:	bf00      	nop
 80055d8:	e7fe      	b.n	80055d8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80055da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00a      	beq.n	80055f8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	61fb      	str	r3, [r7, #28]
}
 80055f4:	bf00      	nop
 80055f6:	e7fe      	b.n	80055f6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055f8:	f000 ffc6 	bl	8006588 <xTaskGetSchedulerState>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d102      	bne.n	8005608 <xQueueSemaphoreTake+0x60>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <xQueueSemaphoreTake+0x64>
 8005608:	2301      	movs	r3, #1
 800560a:	e000      	b.n	800560e <xQueueSemaphoreTake+0x66>
 800560c:	2300      	movs	r3, #0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10a      	bne.n	8005628 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	61bb      	str	r3, [r7, #24]
}
 8005624:	bf00      	nop
 8005626:	e7fe      	b.n	8005626 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005628:	f001 fae0 	bl	8006bec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800562c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005630:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005634:	2b00      	cmp	r3, #0
 8005636:	d024      	beq.n	8005682 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	1e5a      	subs	r2, r3, #1
 800563c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d104      	bne.n	8005652 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005648:	f001 f968 	bl	800691c <pvTaskIncrementMutexHeldCount>
 800564c:	4602      	mov	r2, r0
 800564e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005650:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00f      	beq.n	800567a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800565a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565c:	3310      	adds	r3, #16
 800565e:	4618      	mov	r0, r3
 8005660:	f000 fdce 	bl	8006200 <xTaskRemoveFromEventList>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d007      	beq.n	800567a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800566a:	4b54      	ldr	r3, [pc, #336]	; (80057bc <xQueueSemaphoreTake+0x214>)
 800566c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800567a:	f001 fae7 	bl	8006c4c <vPortExitCritical>
				return pdPASS;
 800567e:	2301      	movs	r3, #1
 8005680:	e097      	b.n	80057b2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d111      	bne.n	80056ac <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800568e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005692:	f383 8811 	msr	BASEPRI, r3
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	617b      	str	r3, [r7, #20]
}
 80056a0:	bf00      	nop
 80056a2:	e7fe      	b.n	80056a2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80056a4:	f001 fad2 	bl	8006c4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056a8:	2300      	movs	r3, #0
 80056aa:	e082      	b.n	80057b2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d106      	bne.n	80056c0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056b2:	f107 030c 	add.w	r3, r7, #12
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 fe04 	bl	80062c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056bc:	2301      	movs	r3, #1
 80056be:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056c0:	f001 fac4 	bl	8006c4c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056c4:	f000 fbae 	bl	8005e24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056c8:	f001 fa90 	bl	8006bec <vPortEnterCritical>
 80056cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056d2:	b25b      	sxtb	r3, r3
 80056d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d8:	d103      	bne.n	80056e2 <xQueueSemaphoreTake+0x13a>
 80056da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056e8:	b25b      	sxtb	r3, r3
 80056ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ee:	d103      	bne.n	80056f8 <xQueueSemaphoreTake+0x150>
 80056f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056f8:	f001 faa8 	bl	8006c4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056fc:	463a      	mov	r2, r7
 80056fe:	f107 030c 	add.w	r3, r7, #12
 8005702:	4611      	mov	r1, r2
 8005704:	4618      	mov	r0, r3
 8005706:	f000 fdf3 	bl	80062f0 <xTaskCheckForTimeOut>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d132      	bne.n	8005776 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005710:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005712:	f000 f94e 	bl	80059b2 <prvIsQueueEmpty>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d026      	beq.n	800576a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800571c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d109      	bne.n	8005738 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005724:	f001 fa62 	bl	8006bec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	4618      	mov	r0, r3
 800572e:	f000 ff49 	bl	80065c4 <xTaskPriorityInherit>
 8005732:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005734:	f001 fa8a 	bl	8006c4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573a:	3324      	adds	r3, #36	; 0x24
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	4611      	mov	r1, r2
 8005740:	4618      	mov	r0, r3
 8005742:	f000 fd39 	bl	80061b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005746:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005748:	f000 f8e1 	bl	800590e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800574c:	f000 fb78 	bl	8005e40 <xTaskResumeAll>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	f47f af68 	bne.w	8005628 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005758:	4b18      	ldr	r3, [pc, #96]	; (80057bc <xQueueSemaphoreTake+0x214>)
 800575a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	e75e      	b.n	8005628 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800576a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800576c:	f000 f8cf 	bl	800590e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005770:	f000 fb66 	bl	8005e40 <xTaskResumeAll>
 8005774:	e758      	b.n	8005628 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005776:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005778:	f000 f8c9 	bl	800590e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800577c:	f000 fb60 	bl	8005e40 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005780:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005782:	f000 f916 	bl	80059b2 <prvIsQueueEmpty>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	f43f af4d 	beq.w	8005628 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800578e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00d      	beq.n	80057b0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005794:	f001 fa2a 	bl	8006bec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005798:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800579a:	f000 f811 	bl	80057c0 <prvGetDisinheritPriorityAfterTimeout>
 800579e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80057a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057a6:	4618      	mov	r0, r3
 80057a8:	f001 f818 	bl	80067dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80057ac:	f001 fa4e 	bl	8006c4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80057b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3738      	adds	r7, #56	; 0x38
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	e000ed04 	.word	0xe000ed04

080057c0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d006      	beq.n	80057de <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f1c3 0307 	rsb	r3, r3, #7
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	e001      	b.n	80057e2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80057de:	2300      	movs	r3, #0
 80057e0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80057e2:	68fb      	ldr	r3, [r7, #12]
	}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bc80      	pop	{r7}
 80057ec:	4770      	bx	lr

080057ee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b086      	sub	sp, #24
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	60f8      	str	r0, [r7, #12]
 80057f6:	60b9      	str	r1, [r7, #8]
 80057f8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80057fa:	2300      	movs	r3, #0
 80057fc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005802:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10d      	bne.n	8005828 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d14d      	bne.n	80058b0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	4618      	mov	r0, r3
 800581a:	f000 ff59 	bl	80066d0 <xTaskPriorityDisinherit>
 800581e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	605a      	str	r2, [r3, #4]
 8005826:	e043      	b.n	80058b0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d119      	bne.n	8005862 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6898      	ldr	r0, [r3, #8]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	461a      	mov	r2, r3
 8005838:	68b9      	ldr	r1, [r7, #8]
 800583a:	f001 fdd2 	bl	80073e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	689a      	ldr	r2, [r3, #8]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005846:	441a      	add	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	429a      	cmp	r2, r3
 8005856:	d32b      	bcc.n	80058b0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	609a      	str	r2, [r3, #8]
 8005860:	e026      	b.n	80058b0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	68d8      	ldr	r0, [r3, #12]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	461a      	mov	r2, r3
 800586c:	68b9      	ldr	r1, [r7, #8]
 800586e:	f001 fdb8 	bl	80073e2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	425b      	negs	r3, r3
 800587c:	441a      	add	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	68da      	ldr	r2, [r3, #12]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d207      	bcs.n	800589e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	425b      	negs	r3, r3
 8005898:	441a      	add	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d105      	bne.n	80058b0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d002      	beq.n	80058b0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	3b01      	subs	r3, #1
 80058ae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80058b8:	697b      	ldr	r3, [r7, #20]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b082      	sub	sp, #8
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
 80058ca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d018      	beq.n	8005906 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68da      	ldr	r2, [r3, #12]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058dc:	441a      	add	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68da      	ldr	r2, [r3, #12]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d303      	bcc.n	80058f6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68d9      	ldr	r1, [r3, #12]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	461a      	mov	r2, r3
 8005900:	6838      	ldr	r0, [r7, #0]
 8005902:	f001 fd6e 	bl	80073e2 <memcpy>
	}
}
 8005906:	bf00      	nop
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b084      	sub	sp, #16
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005916:	f001 f969 	bl	8006bec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005920:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005922:	e011      	b.n	8005948 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	2b00      	cmp	r3, #0
 800592a:	d012      	beq.n	8005952 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	3324      	adds	r3, #36	; 0x24
 8005930:	4618      	mov	r0, r3
 8005932:	f000 fc65 	bl	8006200 <xTaskRemoveFromEventList>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800593c:	f000 fd3a 	bl	80063b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005940:	7bfb      	ldrb	r3, [r7, #15]
 8005942:	3b01      	subs	r3, #1
 8005944:	b2db      	uxtb	r3, r3
 8005946:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005948:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800594c:	2b00      	cmp	r3, #0
 800594e:	dce9      	bgt.n	8005924 <prvUnlockQueue+0x16>
 8005950:	e000      	b.n	8005954 <prvUnlockQueue+0x46>
					break;
 8005952:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	22ff      	movs	r2, #255	; 0xff
 8005958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800595c:	f001 f976 	bl	8006c4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005960:	f001 f944 	bl	8006bec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800596a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800596c:	e011      	b.n	8005992 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d012      	beq.n	800599c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	3310      	adds	r3, #16
 800597a:	4618      	mov	r0, r3
 800597c:	f000 fc40 	bl	8006200 <xTaskRemoveFromEventList>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005986:	f000 fd15 	bl	80063b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800598a:	7bbb      	ldrb	r3, [r7, #14]
 800598c:	3b01      	subs	r3, #1
 800598e:	b2db      	uxtb	r3, r3
 8005990:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005992:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005996:	2b00      	cmp	r3, #0
 8005998:	dce9      	bgt.n	800596e <prvUnlockQueue+0x60>
 800599a:	e000      	b.n	800599e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800599c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	22ff      	movs	r2, #255	; 0xff
 80059a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80059a6:	f001 f951 	bl	8006c4c <vPortExitCritical>
}
 80059aa:	bf00      	nop
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b084      	sub	sp, #16
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059ba:	f001 f917 	bl	8006bec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d102      	bne.n	80059cc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80059c6:	2301      	movs	r3, #1
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	e001      	b.n	80059d0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80059cc:	2300      	movs	r3, #0
 80059ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059d0:	f001 f93c 	bl	8006c4c <vPortExitCritical>

	return xReturn;
 80059d4:	68fb      	ldr	r3, [r7, #12]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b084      	sub	sp, #16
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059e6:	f001 f901 	bl	8006bec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d102      	bne.n	80059fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80059f6:	2301      	movs	r3, #1
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	e001      	b.n	8005a00 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80059fc:	2300      	movs	r3, #0
 80059fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a00:	f001 f924 	bl	8006c4c <vPortExitCritical>

	return xReturn;
 8005a04:	68fb      	ldr	r3, [r7, #12]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b08e      	sub	sp, #56	; 0x38
 8005a12:	af04      	add	r7, sp, #16
 8005a14:	60f8      	str	r0, [r7, #12]
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	607a      	str	r2, [r7, #4]
 8005a1a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10a      	bne.n	8005a38 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	623b      	str	r3, [r7, #32]
}
 8005a34:	bf00      	nop
 8005a36:	e7fe      	b.n	8005a36 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10a      	bne.n	8005a54 <xTaskCreateStatic+0x46>
	__asm volatile
 8005a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	61fb      	str	r3, [r7, #28]
}
 8005a50:	bf00      	nop
 8005a52:	e7fe      	b.n	8005a52 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a54:	23b4      	movs	r3, #180	; 0xb4
 8005a56:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	2bb4      	cmp	r3, #180	; 0xb4
 8005a5c:	d00a      	beq.n	8005a74 <xTaskCreateStatic+0x66>
	__asm volatile
 8005a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	61bb      	str	r3, [r7, #24]
}
 8005a70:	bf00      	nop
 8005a72:	e7fe      	b.n	8005a72 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d01e      	beq.n	8005ab8 <xTaskCreateStatic+0xaa>
 8005a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d01b      	beq.n	8005ab8 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a82:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a88:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a92:	2300      	movs	r3, #0
 8005a94:	9303      	str	r3, [sp, #12]
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	9302      	str	r3, [sp, #8]
 8005a9a:	f107 0314 	add.w	r3, r7, #20
 8005a9e:	9301      	str	r3, [sp, #4]
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	68b9      	ldr	r1, [r7, #8]
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 f850 	bl	8005b50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ab2:	f000 f8e3 	bl	8005c7c <prvAddNewTaskToReadyList>
 8005ab6:	e001      	b.n	8005abc <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005abc:	697b      	ldr	r3, [r7, #20]
	}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3728      	adds	r7, #40	; 0x28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b08c      	sub	sp, #48	; 0x30
 8005aca:	af04      	add	r7, sp, #16
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	603b      	str	r3, [r7, #0]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ad6:	88fb      	ldrh	r3, [r7, #6]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4618      	mov	r0, r3
 8005adc:	f001 f986 	bl	8006dec <pvPortMalloc>
 8005ae0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00e      	beq.n	8005b06 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005ae8:	20b4      	movs	r0, #180	; 0xb4
 8005aea:	f001 f97f 	bl	8006dec <pvPortMalloc>
 8005aee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	631a      	str	r2, [r3, #48]	; 0x30
 8005afc:	e005      	b.n	8005b0a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005afe:	6978      	ldr	r0, [r7, #20]
 8005b00:	f001 fa38 	bl	8006f74 <vPortFree>
 8005b04:	e001      	b.n	8005b0a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d017      	beq.n	8005b40 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b18:	88fa      	ldrh	r2, [r7, #6]
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	9303      	str	r3, [sp, #12]
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	9302      	str	r3, [sp, #8]
 8005b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b24:	9301      	str	r3, [sp, #4]
 8005b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	68b9      	ldr	r1, [r7, #8]
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 f80e 	bl	8005b50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b34:	69f8      	ldr	r0, [r7, #28]
 8005b36:	f000 f8a1 	bl	8005c7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	61bb      	str	r3, [r7, #24]
 8005b3e:	e002      	b.n	8005b46 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b40:	f04f 33ff 	mov.w	r3, #4294967295
 8005b44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b46:	69bb      	ldr	r3, [r7, #24]
	}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3720      	adds	r7, #32
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b088      	sub	sp, #32
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	f023 0307 	bic.w	r3, r3, #7
 8005b76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	f003 0307 	and.w	r3, r3, #7
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b86:	f383 8811 	msr	BASEPRI, r3
 8005b8a:	f3bf 8f6f 	isb	sy
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	617b      	str	r3, [r7, #20]
}
 8005b94:	bf00      	nop
 8005b96:	e7fe      	b.n	8005b96 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b98:	2300      	movs	r3, #0
 8005b9a:	61fb      	str	r3, [r7, #28]
 8005b9c:	e012      	b.n	8005bc4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	7819      	ldrb	r1, [r3, #0]
 8005ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	4413      	add	r3, r2
 8005bac:	3334      	adds	r3, #52	; 0x34
 8005bae:	460a      	mov	r2, r1
 8005bb0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d006      	beq.n	8005bcc <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	61fb      	str	r3, [r7, #28]
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	2b0f      	cmp	r3, #15
 8005bc8:	d9e9      	bls.n	8005b9e <prvInitialiseNewTask+0x4e>
 8005bca:	e000      	b.n	8005bce <prvInitialiseNewTask+0x7e>
		{
			break;
 8005bcc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd8:	2b06      	cmp	r3, #6
 8005bda:	d901      	bls.n	8005be0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005bdc:	2306      	movs	r3, #6
 8005bde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005be4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bee:	2200      	movs	r2, #0
 8005bf0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7ff f802 	bl	8004c00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfe:	3318      	adds	r3, #24
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7fe fffd 	bl	8004c00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0e:	f1c3 0207 	rsb	r2, r3, #7
 8005c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2e:	334c      	adds	r3, #76	; 0x4c
 8005c30:	2260      	movs	r2, #96	; 0x60
 8005c32:	2100      	movs	r1, #0
 8005c34:	4618      	mov	r0, r3
 8005c36:	f001 fbe2 	bl	80073fe <memset>
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	4a0c      	ldr	r2, [pc, #48]	; (8005c70 <prvInitialiseNewTask+0x120>)
 8005c3e:	651a      	str	r2, [r3, #80]	; 0x50
 8005c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c42:	4a0c      	ldr	r2, [pc, #48]	; (8005c74 <prvInitialiseNewTask+0x124>)
 8005c44:	655a      	str	r2, [r3, #84]	; 0x54
 8005c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c48:	4a0b      	ldr	r2, [pc, #44]	; (8005c78 <prvInitialiseNewTask+0x128>)
 8005c4a:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	68f9      	ldr	r1, [r7, #12]
 8005c50:	69b8      	ldr	r0, [r7, #24]
 8005c52:	f000 fedd 	bl	8006a10 <pxPortInitialiseStack>
 8005c56:	4602      	mov	r2, r0
 8005c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d002      	beq.n	8005c68 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c68:	bf00      	nop
 8005c6a:	3720      	adds	r7, #32
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	08007f60 	.word	0x08007f60
 8005c74:	08007f80 	.word	0x08007f80
 8005c78:	08007f40 	.word	0x08007f40

08005c7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c84:	f000 ffb2 	bl	8006bec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c88:	4b2a      	ldr	r3, [pc, #168]	; (8005d34 <prvAddNewTaskToReadyList+0xb8>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	4a29      	ldr	r2, [pc, #164]	; (8005d34 <prvAddNewTaskToReadyList+0xb8>)
 8005c90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c92:	4b29      	ldr	r3, [pc, #164]	; (8005d38 <prvAddNewTaskToReadyList+0xbc>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d109      	bne.n	8005cae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c9a:	4a27      	ldr	r2, [pc, #156]	; (8005d38 <prvAddNewTaskToReadyList+0xbc>)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ca0:	4b24      	ldr	r3, [pc, #144]	; (8005d34 <prvAddNewTaskToReadyList+0xb8>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d110      	bne.n	8005cca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ca8:	f000 fba8 	bl	80063fc <prvInitialiseTaskLists>
 8005cac:	e00d      	b.n	8005cca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005cae:	4b23      	ldr	r3, [pc, #140]	; (8005d3c <prvAddNewTaskToReadyList+0xc0>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d109      	bne.n	8005cca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005cb6:	4b20      	ldr	r3, [pc, #128]	; (8005d38 <prvAddNewTaskToReadyList+0xbc>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d802      	bhi.n	8005cca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005cc4:	4a1c      	ldr	r2, [pc, #112]	; (8005d38 <prvAddNewTaskToReadyList+0xbc>)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005cca:	4b1d      	ldr	r3, [pc, #116]	; (8005d40 <prvAddNewTaskToReadyList+0xc4>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	4a1b      	ldr	r2, [pc, #108]	; (8005d40 <prvAddNewTaskToReadyList+0xc4>)
 8005cd2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd8:	2201      	movs	r2, #1
 8005cda:	409a      	lsls	r2, r3
 8005cdc:	4b19      	ldr	r3, [pc, #100]	; (8005d44 <prvAddNewTaskToReadyList+0xc8>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	4a18      	ldr	r2, [pc, #96]	; (8005d44 <prvAddNewTaskToReadyList+0xc8>)
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cea:	4613      	mov	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4a15      	ldr	r2, [pc, #84]	; (8005d48 <prvAddNewTaskToReadyList+0xcc>)
 8005cf4:	441a      	add	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	3304      	adds	r3, #4
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	f7fe ff8b 	bl	8004c18 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d02:	f000 ffa3 	bl	8006c4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d06:	4b0d      	ldr	r3, [pc, #52]	; (8005d3c <prvAddNewTaskToReadyList+0xc0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00e      	beq.n	8005d2c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d0e:	4b0a      	ldr	r3, [pc, #40]	; (8005d38 <prvAddNewTaskToReadyList+0xbc>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d207      	bcs.n	8005d2c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d1c:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <prvAddNewTaskToReadyList+0xd0>)
 8005d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d2c:	bf00      	nop
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	20000458 	.word	0x20000458
 8005d38:	20000358 	.word	0x20000358
 8005d3c:	20000464 	.word	0x20000464
 8005d40:	20000474 	.word	0x20000474
 8005d44:	20000460 	.word	0x20000460
 8005d48:	2000035c 	.word	0x2000035c
 8005d4c:	e000ed04 	.word	0xe000ed04

08005d50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b08a      	sub	sp, #40	; 0x28
 8005d54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d5e:	463a      	mov	r2, r7
 8005d60:	1d39      	adds	r1, r7, #4
 8005d62:	f107 0308 	add.w	r3, r7, #8
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fa f9fa 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d6c:	6839      	ldr	r1, [r7, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	9202      	str	r2, [sp, #8]
 8005d74:	9301      	str	r3, [sp, #4]
 8005d76:	2300      	movs	r3, #0
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	460a      	mov	r2, r1
 8005d7e:	4921      	ldr	r1, [pc, #132]	; (8005e04 <vTaskStartScheduler+0xb4>)
 8005d80:	4821      	ldr	r0, [pc, #132]	; (8005e08 <vTaskStartScheduler+0xb8>)
 8005d82:	f7ff fe44 	bl	8005a0e <xTaskCreateStatic>
 8005d86:	4603      	mov	r3, r0
 8005d88:	4a20      	ldr	r2, [pc, #128]	; (8005e0c <vTaskStartScheduler+0xbc>)
 8005d8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d8c:	4b1f      	ldr	r3, [pc, #124]	; (8005e0c <vTaskStartScheduler+0xbc>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d94:	2301      	movs	r3, #1
 8005d96:	617b      	str	r3, [r7, #20]
 8005d98:	e001      	b.n	8005d9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d11b      	bne.n	8005ddc <vTaskStartScheduler+0x8c>
	__asm volatile
 8005da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	613b      	str	r3, [r7, #16]
}
 8005db6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005db8:	4b15      	ldr	r3, [pc, #84]	; (8005e10 <vTaskStartScheduler+0xc0>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	334c      	adds	r3, #76	; 0x4c
 8005dbe:	4a15      	ldr	r2, [pc, #84]	; (8005e14 <vTaskStartScheduler+0xc4>)
 8005dc0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005dc2:	4b15      	ldr	r3, [pc, #84]	; (8005e18 <vTaskStartScheduler+0xc8>)
 8005dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005dca:	4b14      	ldr	r3, [pc, #80]	; (8005e1c <vTaskStartScheduler+0xcc>)
 8005dcc:	2201      	movs	r2, #1
 8005dce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005dd0:	4b13      	ldr	r3, [pc, #76]	; (8005e20 <vTaskStartScheduler+0xd0>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005dd6:	f000 fe97 	bl	8006b08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005dda:	e00e      	b.n	8005dfa <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de2:	d10a      	bne.n	8005dfa <vTaskStartScheduler+0xaa>
	__asm volatile
 8005de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	60fb      	str	r3, [r7, #12]
}
 8005df6:	bf00      	nop
 8005df8:	e7fe      	b.n	8005df8 <vTaskStartScheduler+0xa8>
}
 8005dfa:	bf00      	nop
 8005dfc:	3718      	adds	r7, #24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	08007f20 	.word	0x08007f20
 8005e08:	080063cd 	.word	0x080063cd
 8005e0c:	2000047c 	.word	0x2000047c
 8005e10:	20000358 	.word	0x20000358
 8005e14:	20000014 	.word	0x20000014
 8005e18:	20000478 	.word	0x20000478
 8005e1c:	20000464 	.word	0x20000464
 8005e20:	2000045c 	.word	0x2000045c

08005e24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e24:	b480      	push	{r7}
 8005e26:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005e28:	4b04      	ldr	r3, [pc, #16]	; (8005e3c <vTaskSuspendAll+0x18>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	4a03      	ldr	r2, [pc, #12]	; (8005e3c <vTaskSuspendAll+0x18>)
 8005e30:	6013      	str	r3, [r2, #0]
}
 8005e32:	bf00      	nop
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bc80      	pop	{r7}
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	20000480 	.word	0x20000480

08005e40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e46:	2300      	movs	r3, #0
 8005e48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e4e:	4b41      	ldr	r3, [pc, #260]	; (8005f54 <xTaskResumeAll+0x114>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10a      	bne.n	8005e6c <xTaskResumeAll+0x2c>
	__asm volatile
 8005e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	603b      	str	r3, [r7, #0]
}
 8005e68:	bf00      	nop
 8005e6a:	e7fe      	b.n	8005e6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e6c:	f000 febe 	bl	8006bec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e70:	4b38      	ldr	r3, [pc, #224]	; (8005f54 <xTaskResumeAll+0x114>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3b01      	subs	r3, #1
 8005e76:	4a37      	ldr	r2, [pc, #220]	; (8005f54 <xTaskResumeAll+0x114>)
 8005e78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e7a:	4b36      	ldr	r3, [pc, #216]	; (8005f54 <xTaskResumeAll+0x114>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d161      	bne.n	8005f46 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e82:	4b35      	ldr	r3, [pc, #212]	; (8005f58 <xTaskResumeAll+0x118>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d05d      	beq.n	8005f46 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e8a:	e02e      	b.n	8005eea <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005e8c:	4b33      	ldr	r3, [pc, #204]	; (8005f5c <xTaskResumeAll+0x11c>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3318      	adds	r3, #24
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7fe ff18 	bl	8004cce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fe ff13 	bl	8004cce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eac:	2201      	movs	r2, #1
 8005eae:	409a      	lsls	r2, r3
 8005eb0:	4b2b      	ldr	r3, [pc, #172]	; (8005f60 <xTaskResumeAll+0x120>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	4a2a      	ldr	r2, [pc, #168]	; (8005f60 <xTaskResumeAll+0x120>)
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4a27      	ldr	r2, [pc, #156]	; (8005f64 <xTaskResumeAll+0x124>)
 8005ec8:	441a      	add	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3304      	adds	r3, #4
 8005ece:	4619      	mov	r1, r3
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	f7fe fea1 	bl	8004c18 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eda:	4b23      	ldr	r3, [pc, #140]	; (8005f68 <xTaskResumeAll+0x128>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d302      	bcc.n	8005eea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005ee4:	4b21      	ldr	r3, [pc, #132]	; (8005f6c <xTaskResumeAll+0x12c>)
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005eea:	4b1c      	ldr	r3, [pc, #112]	; (8005f5c <xTaskResumeAll+0x11c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1cc      	bne.n	8005e8c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ef8:	f000 fb22 	bl	8006540 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005efc:	4b1c      	ldr	r3, [pc, #112]	; (8005f70 <xTaskResumeAll+0x130>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d010      	beq.n	8005f2a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f08:	f000 f836 	bl	8005f78 <xTaskIncrementTick>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005f12:	4b16      	ldr	r3, [pc, #88]	; (8005f6c <xTaskResumeAll+0x12c>)
 8005f14:	2201      	movs	r2, #1
 8005f16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1f1      	bne.n	8005f08 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005f24:	4b12      	ldr	r3, [pc, #72]	; (8005f70 <xTaskResumeAll+0x130>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f2a:	4b10      	ldr	r3, [pc, #64]	; (8005f6c <xTaskResumeAll+0x12c>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d009      	beq.n	8005f46 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f32:	2301      	movs	r3, #1
 8005f34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f36:	4b0f      	ldr	r3, [pc, #60]	; (8005f74 <xTaskResumeAll+0x134>)
 8005f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f46:	f000 fe81 	bl	8006c4c <vPortExitCritical>

	return xAlreadyYielded;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	20000480 	.word	0x20000480
 8005f58:	20000458 	.word	0x20000458
 8005f5c:	20000418 	.word	0x20000418
 8005f60:	20000460 	.word	0x20000460
 8005f64:	2000035c 	.word	0x2000035c
 8005f68:	20000358 	.word	0x20000358
 8005f6c:	2000046c 	.word	0x2000046c
 8005f70:	20000468 	.word	0x20000468
 8005f74:	e000ed04 	.word	0xe000ed04

08005f78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f82:	4b51      	ldr	r3, [pc, #324]	; (80060c8 <xTaskIncrementTick+0x150>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f040 808d 	bne.w	80060a6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f8c:	4b4f      	ldr	r3, [pc, #316]	; (80060cc <xTaskIncrementTick+0x154>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	3301      	adds	r3, #1
 8005f92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f94:	4a4d      	ldr	r2, [pc, #308]	; (80060cc <xTaskIncrementTick+0x154>)
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d120      	bne.n	8005fe2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005fa0:	4b4b      	ldr	r3, [pc, #300]	; (80060d0 <xTaskIncrementTick+0x158>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <xTaskIncrementTick+0x48>
	__asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	603b      	str	r3, [r7, #0]
}
 8005fbc:	bf00      	nop
 8005fbe:	e7fe      	b.n	8005fbe <xTaskIncrementTick+0x46>
 8005fc0:	4b43      	ldr	r3, [pc, #268]	; (80060d0 <xTaskIncrementTick+0x158>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	4b43      	ldr	r3, [pc, #268]	; (80060d4 <xTaskIncrementTick+0x15c>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a41      	ldr	r2, [pc, #260]	; (80060d0 <xTaskIncrementTick+0x158>)
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	4a41      	ldr	r2, [pc, #260]	; (80060d4 <xTaskIncrementTick+0x15c>)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	4b40      	ldr	r3, [pc, #256]	; (80060d8 <xTaskIncrementTick+0x160>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	4a3f      	ldr	r2, [pc, #252]	; (80060d8 <xTaskIncrementTick+0x160>)
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	f000 faaf 	bl	8006540 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005fe2:	4b3e      	ldr	r3, [pc, #248]	; (80060dc <xTaskIncrementTick+0x164>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d34d      	bcc.n	8006088 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fec:	4b38      	ldr	r3, [pc, #224]	; (80060d0 <xTaskIncrementTick+0x158>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <xTaskIncrementTick+0x82>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e000      	b.n	8005ffc <xTaskIncrementTick+0x84>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d004      	beq.n	800600a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006000:	4b36      	ldr	r3, [pc, #216]	; (80060dc <xTaskIncrementTick+0x164>)
 8006002:	f04f 32ff 	mov.w	r2, #4294967295
 8006006:	601a      	str	r2, [r3, #0]
					break;
 8006008:	e03e      	b.n	8006088 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800600a:	4b31      	ldr	r3, [pc, #196]	; (80060d0 <xTaskIncrementTick+0x158>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	429a      	cmp	r2, r3
 8006020:	d203      	bcs.n	800602a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006022:	4a2e      	ldr	r2, [pc, #184]	; (80060dc <xTaskIncrementTick+0x164>)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6013      	str	r3, [r2, #0]
						break;
 8006028:	e02e      	b.n	8006088 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	3304      	adds	r3, #4
 800602e:	4618      	mov	r0, r3
 8006030:	f7fe fe4d 	bl	8004cce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006038:	2b00      	cmp	r3, #0
 800603a:	d004      	beq.n	8006046 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	3318      	adds	r3, #24
 8006040:	4618      	mov	r0, r3
 8006042:	f7fe fe44 	bl	8004cce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604a:	2201      	movs	r2, #1
 800604c:	409a      	lsls	r2, r3
 800604e:	4b24      	ldr	r3, [pc, #144]	; (80060e0 <xTaskIncrementTick+0x168>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4313      	orrs	r3, r2
 8006054:	4a22      	ldr	r2, [pc, #136]	; (80060e0 <xTaskIncrementTick+0x168>)
 8006056:	6013      	str	r3, [r2, #0]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605c:	4613      	mov	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4a1f      	ldr	r2, [pc, #124]	; (80060e4 <xTaskIncrementTick+0x16c>)
 8006066:	441a      	add	r2, r3
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	3304      	adds	r3, #4
 800606c:	4619      	mov	r1, r3
 800606e:	4610      	mov	r0, r2
 8006070:	f7fe fdd2 	bl	8004c18 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006078:	4b1b      	ldr	r3, [pc, #108]	; (80060e8 <xTaskIncrementTick+0x170>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607e:	429a      	cmp	r2, r3
 8006080:	d3b4      	bcc.n	8005fec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006082:	2301      	movs	r3, #1
 8006084:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006086:	e7b1      	b.n	8005fec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006088:	4b17      	ldr	r3, [pc, #92]	; (80060e8 <xTaskIncrementTick+0x170>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608e:	4915      	ldr	r1, [pc, #84]	; (80060e4 <xTaskIncrementTick+0x16c>)
 8006090:	4613      	mov	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4413      	add	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	440b      	add	r3, r1
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d907      	bls.n	80060b0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80060a0:	2301      	movs	r3, #1
 80060a2:	617b      	str	r3, [r7, #20]
 80060a4:	e004      	b.n	80060b0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80060a6:	4b11      	ldr	r3, [pc, #68]	; (80060ec <xTaskIncrementTick+0x174>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3301      	adds	r3, #1
 80060ac:	4a0f      	ldr	r2, [pc, #60]	; (80060ec <xTaskIncrementTick+0x174>)
 80060ae:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80060b0:	4b0f      	ldr	r3, [pc, #60]	; (80060f0 <xTaskIncrementTick+0x178>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80060b8:	2301      	movs	r3, #1
 80060ba:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80060bc:	697b      	ldr	r3, [r7, #20]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3718      	adds	r7, #24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	20000480 	.word	0x20000480
 80060cc:	2000045c 	.word	0x2000045c
 80060d0:	20000410 	.word	0x20000410
 80060d4:	20000414 	.word	0x20000414
 80060d8:	20000470 	.word	0x20000470
 80060dc:	20000478 	.word	0x20000478
 80060e0:	20000460 	.word	0x20000460
 80060e4:	2000035c 	.word	0x2000035c
 80060e8:	20000358 	.word	0x20000358
 80060ec:	20000468 	.word	0x20000468
 80060f0:	2000046c 	.word	0x2000046c

080060f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060fa:	4b29      	ldr	r3, [pc, #164]	; (80061a0 <vTaskSwitchContext+0xac>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006102:	4b28      	ldr	r3, [pc, #160]	; (80061a4 <vTaskSwitchContext+0xb0>)
 8006104:	2201      	movs	r2, #1
 8006106:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006108:	e044      	b.n	8006194 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800610a:	4b26      	ldr	r3, [pc, #152]	; (80061a4 <vTaskSwitchContext+0xb0>)
 800610c:	2200      	movs	r2, #0
 800610e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006110:	4b25      	ldr	r3, [pc, #148]	; (80061a8 <vTaskSwitchContext+0xb4>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	fab3 f383 	clz	r3, r3
 800611c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800611e:	7afb      	ldrb	r3, [r7, #11]
 8006120:	f1c3 031f 	rsb	r3, r3, #31
 8006124:	617b      	str	r3, [r7, #20]
 8006126:	4921      	ldr	r1, [pc, #132]	; (80061ac <vTaskSwitchContext+0xb8>)
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	4613      	mov	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	440b      	add	r3, r1
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10a      	bne.n	8006150 <vTaskSwitchContext+0x5c>
	__asm volatile
 800613a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	607b      	str	r3, [r7, #4]
}
 800614c:	bf00      	nop
 800614e:	e7fe      	b.n	800614e <vTaskSwitchContext+0x5a>
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	4613      	mov	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4a14      	ldr	r2, [pc, #80]	; (80061ac <vTaskSwitchContext+0xb8>)
 800615c:	4413      	add	r3, r2
 800615e:	613b      	str	r3, [r7, #16]
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	605a      	str	r2, [r3, #4]
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	3308      	adds	r3, #8
 8006172:	429a      	cmp	r2, r3
 8006174:	d104      	bne.n	8006180 <vTaskSwitchContext+0x8c>
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	605a      	str	r2, [r3, #4]
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	4a0a      	ldr	r2, [pc, #40]	; (80061b0 <vTaskSwitchContext+0xbc>)
 8006188:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800618a:	4b09      	ldr	r3, [pc, #36]	; (80061b0 <vTaskSwitchContext+0xbc>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	334c      	adds	r3, #76	; 0x4c
 8006190:	4a08      	ldr	r2, [pc, #32]	; (80061b4 <vTaskSwitchContext+0xc0>)
 8006192:	6013      	str	r3, [r2, #0]
}
 8006194:	bf00      	nop
 8006196:	371c      	adds	r7, #28
 8006198:	46bd      	mov	sp, r7
 800619a:	bc80      	pop	{r7}
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	20000480 	.word	0x20000480
 80061a4:	2000046c 	.word	0x2000046c
 80061a8:	20000460 	.word	0x20000460
 80061ac:	2000035c 	.word	0x2000035c
 80061b0:	20000358 	.word	0x20000358
 80061b4:	20000014 	.word	0x20000014

080061b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10a      	bne.n	80061de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	60fb      	str	r3, [r7, #12]
}
 80061da:	bf00      	nop
 80061dc:	e7fe      	b.n	80061dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061de:	4b07      	ldr	r3, [pc, #28]	; (80061fc <vTaskPlaceOnEventList+0x44>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3318      	adds	r3, #24
 80061e4:	4619      	mov	r1, r3
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7fe fd39 	bl	8004c5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80061ec:	2101      	movs	r1, #1
 80061ee:	6838      	ldr	r0, [r7, #0]
 80061f0:	f000 fba8 	bl	8006944 <prvAddCurrentTaskToDelayedList>
}
 80061f4:	bf00      	nop
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	20000358 	.word	0x20000358

08006200 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10a      	bne.n	800622c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621a:	f383 8811 	msr	BASEPRI, r3
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	60fb      	str	r3, [r7, #12]
}
 8006228:	bf00      	nop
 800622a:	e7fe      	b.n	800622a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	3318      	adds	r3, #24
 8006230:	4618      	mov	r0, r3
 8006232:	f7fe fd4c 	bl	8004cce <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006236:	4b1d      	ldr	r3, [pc, #116]	; (80062ac <xTaskRemoveFromEventList+0xac>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d11c      	bne.n	8006278 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	3304      	adds	r3, #4
 8006242:	4618      	mov	r0, r3
 8006244:	f7fe fd43 	bl	8004cce <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624c:	2201      	movs	r2, #1
 800624e:	409a      	lsls	r2, r3
 8006250:	4b17      	ldr	r3, [pc, #92]	; (80062b0 <xTaskRemoveFromEventList+0xb0>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4313      	orrs	r3, r2
 8006256:	4a16      	ldr	r2, [pc, #88]	; (80062b0 <xTaskRemoveFromEventList+0xb0>)
 8006258:	6013      	str	r3, [r2, #0]
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800625e:	4613      	mov	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4a13      	ldr	r2, [pc, #76]	; (80062b4 <xTaskRemoveFromEventList+0xb4>)
 8006268:	441a      	add	r2, r3
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	3304      	adds	r3, #4
 800626e:	4619      	mov	r1, r3
 8006270:	4610      	mov	r0, r2
 8006272:	f7fe fcd1 	bl	8004c18 <vListInsertEnd>
 8006276:	e005      	b.n	8006284 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	3318      	adds	r3, #24
 800627c:	4619      	mov	r1, r3
 800627e:	480e      	ldr	r0, [pc, #56]	; (80062b8 <xTaskRemoveFromEventList+0xb8>)
 8006280:	f7fe fcca 	bl	8004c18 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006288:	4b0c      	ldr	r3, [pc, #48]	; (80062bc <xTaskRemoveFromEventList+0xbc>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628e:	429a      	cmp	r2, r3
 8006290:	d905      	bls.n	800629e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006292:	2301      	movs	r3, #1
 8006294:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006296:	4b0a      	ldr	r3, [pc, #40]	; (80062c0 <xTaskRemoveFromEventList+0xc0>)
 8006298:	2201      	movs	r2, #1
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	e001      	b.n	80062a2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800629e:	2300      	movs	r3, #0
 80062a0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80062a2:	697b      	ldr	r3, [r7, #20]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3718      	adds	r7, #24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	20000480 	.word	0x20000480
 80062b0:	20000460 	.word	0x20000460
 80062b4:	2000035c 	.word	0x2000035c
 80062b8:	20000418 	.word	0x20000418
 80062bc:	20000358 	.word	0x20000358
 80062c0:	2000046c 	.word	0x2000046c

080062c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80062cc:	4b06      	ldr	r3, [pc, #24]	; (80062e8 <vTaskInternalSetTimeOutState+0x24>)
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80062d4:	4b05      	ldr	r3, [pc, #20]	; (80062ec <vTaskInternalSetTimeOutState+0x28>)
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	605a      	str	r2, [r3, #4]
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bc80      	pop	{r7}
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	20000470 	.word	0x20000470
 80062ec:	2000045c 	.word	0x2000045c

080062f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b088      	sub	sp, #32
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10a      	bne.n	8006316 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	613b      	str	r3, [r7, #16]
}
 8006312:	bf00      	nop
 8006314:	e7fe      	b.n	8006314 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10a      	bne.n	8006332 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800631c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006320:	f383 8811 	msr	BASEPRI, r3
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	60fb      	str	r3, [r7, #12]
}
 800632e:	bf00      	nop
 8006330:	e7fe      	b.n	8006330 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006332:	f000 fc5b 	bl	8006bec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006336:	4b1d      	ldr	r3, [pc, #116]	; (80063ac <xTaskCheckForTimeOut+0xbc>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634e:	d102      	bne.n	8006356 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006350:	2300      	movs	r3, #0
 8006352:	61fb      	str	r3, [r7, #28]
 8006354:	e023      	b.n	800639e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	4b15      	ldr	r3, [pc, #84]	; (80063b0 <xTaskCheckForTimeOut+0xc0>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	429a      	cmp	r2, r3
 8006360:	d007      	beq.n	8006372 <xTaskCheckForTimeOut+0x82>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	69ba      	ldr	r2, [r7, #24]
 8006368:	429a      	cmp	r2, r3
 800636a:	d302      	bcc.n	8006372 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800636c:	2301      	movs	r3, #1
 800636e:	61fb      	str	r3, [r7, #28]
 8006370:	e015      	b.n	800639e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	429a      	cmp	r2, r3
 800637a:	d20b      	bcs.n	8006394 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	1ad2      	subs	r2, r2, r3
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f7ff ff9b 	bl	80062c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800638e:	2300      	movs	r3, #0
 8006390:	61fb      	str	r3, [r7, #28]
 8006392:	e004      	b.n	800639e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	2200      	movs	r2, #0
 8006398:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800639a:	2301      	movs	r3, #1
 800639c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800639e:	f000 fc55 	bl	8006c4c <vPortExitCritical>

	return xReturn;
 80063a2:	69fb      	ldr	r3, [r7, #28]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3720      	adds	r7, #32
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	2000045c 	.word	0x2000045c
 80063b0:	20000470 	.word	0x20000470

080063b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80063b8:	4b03      	ldr	r3, [pc, #12]	; (80063c8 <vTaskMissedYield+0x14>)
 80063ba:	2201      	movs	r2, #1
 80063bc:	601a      	str	r2, [r3, #0]
}
 80063be:	bf00      	nop
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bc80      	pop	{r7}
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	2000046c 	.word	0x2000046c

080063cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80063d4:	f000 f852 	bl	800647c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80063d8:	4b06      	ldr	r3, [pc, #24]	; (80063f4 <prvIdleTask+0x28>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d9f9      	bls.n	80063d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80063e0:	4b05      	ldr	r3, [pc, #20]	; (80063f8 <prvIdleTask+0x2c>)
 80063e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80063f0:	e7f0      	b.n	80063d4 <prvIdleTask+0x8>
 80063f2:	bf00      	nop
 80063f4:	2000035c 	.word	0x2000035c
 80063f8:	e000ed04 	.word	0xe000ed04

080063fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006402:	2300      	movs	r3, #0
 8006404:	607b      	str	r3, [r7, #4]
 8006406:	e00c      	b.n	8006422 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	4613      	mov	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4413      	add	r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4a12      	ldr	r2, [pc, #72]	; (800645c <prvInitialiseTaskLists+0x60>)
 8006414:	4413      	add	r3, r2
 8006416:	4618      	mov	r0, r3
 8006418:	f7fe fbd3 	bl	8004bc2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	3301      	adds	r3, #1
 8006420:	607b      	str	r3, [r7, #4]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b06      	cmp	r3, #6
 8006426:	d9ef      	bls.n	8006408 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006428:	480d      	ldr	r0, [pc, #52]	; (8006460 <prvInitialiseTaskLists+0x64>)
 800642a:	f7fe fbca 	bl	8004bc2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800642e:	480d      	ldr	r0, [pc, #52]	; (8006464 <prvInitialiseTaskLists+0x68>)
 8006430:	f7fe fbc7 	bl	8004bc2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006434:	480c      	ldr	r0, [pc, #48]	; (8006468 <prvInitialiseTaskLists+0x6c>)
 8006436:	f7fe fbc4 	bl	8004bc2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800643a:	480c      	ldr	r0, [pc, #48]	; (800646c <prvInitialiseTaskLists+0x70>)
 800643c:	f7fe fbc1 	bl	8004bc2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006440:	480b      	ldr	r0, [pc, #44]	; (8006470 <prvInitialiseTaskLists+0x74>)
 8006442:	f7fe fbbe 	bl	8004bc2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006446:	4b0b      	ldr	r3, [pc, #44]	; (8006474 <prvInitialiseTaskLists+0x78>)
 8006448:	4a05      	ldr	r2, [pc, #20]	; (8006460 <prvInitialiseTaskLists+0x64>)
 800644a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800644c:	4b0a      	ldr	r3, [pc, #40]	; (8006478 <prvInitialiseTaskLists+0x7c>)
 800644e:	4a05      	ldr	r2, [pc, #20]	; (8006464 <prvInitialiseTaskLists+0x68>)
 8006450:	601a      	str	r2, [r3, #0]
}
 8006452:	bf00      	nop
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	2000035c 	.word	0x2000035c
 8006460:	200003e8 	.word	0x200003e8
 8006464:	200003fc 	.word	0x200003fc
 8006468:	20000418 	.word	0x20000418
 800646c:	2000042c 	.word	0x2000042c
 8006470:	20000444 	.word	0x20000444
 8006474:	20000410 	.word	0x20000410
 8006478:	20000414 	.word	0x20000414

0800647c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006482:	e019      	b.n	80064b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006484:	f000 fbb2 	bl	8006bec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006488:	4b10      	ldr	r3, [pc, #64]	; (80064cc <prvCheckTasksWaitingTermination+0x50>)
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	3304      	adds	r3, #4
 8006494:	4618      	mov	r0, r3
 8006496:	f7fe fc1a 	bl	8004cce <uxListRemove>
				--uxCurrentNumberOfTasks;
 800649a:	4b0d      	ldr	r3, [pc, #52]	; (80064d0 <prvCheckTasksWaitingTermination+0x54>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3b01      	subs	r3, #1
 80064a0:	4a0b      	ldr	r2, [pc, #44]	; (80064d0 <prvCheckTasksWaitingTermination+0x54>)
 80064a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80064a4:	4b0b      	ldr	r3, [pc, #44]	; (80064d4 <prvCheckTasksWaitingTermination+0x58>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	3b01      	subs	r3, #1
 80064aa:	4a0a      	ldr	r2, [pc, #40]	; (80064d4 <prvCheckTasksWaitingTermination+0x58>)
 80064ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80064ae:	f000 fbcd 	bl	8006c4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f810 	bl	80064d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064b8:	4b06      	ldr	r3, [pc, #24]	; (80064d4 <prvCheckTasksWaitingTermination+0x58>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1e1      	bne.n	8006484 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80064c0:	bf00      	nop
 80064c2:	bf00      	nop
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	2000042c 	.word	0x2000042c
 80064d0:	20000458 	.word	0x20000458
 80064d4:	20000440 	.word	0x20000440

080064d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	334c      	adds	r3, #76	; 0x4c
 80064e4:	4618      	mov	r0, r3
 80064e6:	f001 f89d 	bl	8007624 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d108      	bne.n	8006506 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f8:	4618      	mov	r0, r3
 80064fa:	f000 fd3b 	bl	8006f74 <vPortFree>
				vPortFree( pxTCB );
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fd38 	bl	8006f74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006504:	e018      	b.n	8006538 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800650c:	2b01      	cmp	r3, #1
 800650e:	d103      	bne.n	8006518 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fd2f 	bl	8006f74 <vPortFree>
	}
 8006516:	e00f      	b.n	8006538 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800651e:	2b02      	cmp	r3, #2
 8006520:	d00a      	beq.n	8006538 <prvDeleteTCB+0x60>
	__asm volatile
 8006522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006526:	f383 8811 	msr	BASEPRI, r3
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	60fb      	str	r3, [r7, #12]
}
 8006534:	bf00      	nop
 8006536:	e7fe      	b.n	8006536 <prvDeleteTCB+0x5e>
	}
 8006538:	bf00      	nop
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006546:	4b0e      	ldr	r3, [pc, #56]	; (8006580 <prvResetNextTaskUnblockTime+0x40>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <prvResetNextTaskUnblockTime+0x14>
 8006550:	2301      	movs	r3, #1
 8006552:	e000      	b.n	8006556 <prvResetNextTaskUnblockTime+0x16>
 8006554:	2300      	movs	r3, #0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d004      	beq.n	8006564 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800655a:	4b0a      	ldr	r3, [pc, #40]	; (8006584 <prvResetNextTaskUnblockTime+0x44>)
 800655c:	f04f 32ff 	mov.w	r2, #4294967295
 8006560:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006562:	e008      	b.n	8006576 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006564:	4b06      	ldr	r3, [pc, #24]	; (8006580 <prvResetNextTaskUnblockTime+0x40>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	4a04      	ldr	r2, [pc, #16]	; (8006584 <prvResetNextTaskUnblockTime+0x44>)
 8006574:	6013      	str	r3, [r2, #0]
}
 8006576:	bf00      	nop
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	bc80      	pop	{r7}
 800657e:	4770      	bx	lr
 8006580:	20000410 	.word	0x20000410
 8006584:	20000478 	.word	0x20000478

08006588 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800658e:	4b0b      	ldr	r3, [pc, #44]	; (80065bc <xTaskGetSchedulerState+0x34>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d102      	bne.n	800659c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006596:	2301      	movs	r3, #1
 8006598:	607b      	str	r3, [r7, #4]
 800659a:	e008      	b.n	80065ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800659c:	4b08      	ldr	r3, [pc, #32]	; (80065c0 <xTaskGetSchedulerState+0x38>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d102      	bne.n	80065aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80065a4:	2302      	movs	r3, #2
 80065a6:	607b      	str	r3, [r7, #4]
 80065a8:	e001      	b.n	80065ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80065aa:	2300      	movs	r3, #0
 80065ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80065ae:	687b      	ldr	r3, [r7, #4]
	}
 80065b0:	4618      	mov	r0, r3
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bc80      	pop	{r7}
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	20000464 	.word	0x20000464
 80065c0:	20000480 	.word	0x20000480

080065c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d06e      	beq.n	80066b8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065de:	4b39      	ldr	r3, [pc, #228]	; (80066c4 <xTaskPriorityInherit+0x100>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d25e      	bcs.n	80066a6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	db06      	blt.n	80065fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065f0:	4b34      	ldr	r3, [pc, #208]	; (80066c4 <xTaskPriorityInherit+0x100>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f6:	f1c3 0207 	rsb	r2, r3, #7
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	6959      	ldr	r1, [r3, #20]
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006606:	4613      	mov	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4a2e      	ldr	r2, [pc, #184]	; (80066c8 <xTaskPriorityInherit+0x104>)
 8006610:	4413      	add	r3, r2
 8006612:	4299      	cmp	r1, r3
 8006614:	d101      	bne.n	800661a <xTaskPriorityInherit+0x56>
 8006616:	2301      	movs	r3, #1
 8006618:	e000      	b.n	800661c <xTaskPriorityInherit+0x58>
 800661a:	2300      	movs	r3, #0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d03a      	beq.n	8006696 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	3304      	adds	r3, #4
 8006624:	4618      	mov	r0, r3
 8006626:	f7fe fb52 	bl	8004cce <uxListRemove>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d115      	bne.n	800665c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006634:	4924      	ldr	r1, [pc, #144]	; (80066c8 <xTaskPriorityInherit+0x104>)
 8006636:	4613      	mov	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4413      	add	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	440b      	add	r3, r1
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10a      	bne.n	800665c <xTaskPriorityInherit+0x98>
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664a:	2201      	movs	r2, #1
 800664c:	fa02 f303 	lsl.w	r3, r2, r3
 8006650:	43da      	mvns	r2, r3
 8006652:	4b1e      	ldr	r3, [pc, #120]	; (80066cc <xTaskPriorityInherit+0x108>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4013      	ands	r3, r2
 8006658:	4a1c      	ldr	r2, [pc, #112]	; (80066cc <xTaskPriorityInherit+0x108>)
 800665a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800665c:	4b19      	ldr	r3, [pc, #100]	; (80066c4 <xTaskPriorityInherit+0x100>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666a:	2201      	movs	r2, #1
 800666c:	409a      	lsls	r2, r3
 800666e:	4b17      	ldr	r3, [pc, #92]	; (80066cc <xTaskPriorityInherit+0x108>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4313      	orrs	r3, r2
 8006674:	4a15      	ldr	r2, [pc, #84]	; (80066cc <xTaskPriorityInherit+0x108>)
 8006676:	6013      	str	r3, [r2, #0]
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800667c:	4613      	mov	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4a10      	ldr	r2, [pc, #64]	; (80066c8 <xTaskPriorityInherit+0x104>)
 8006686:	441a      	add	r2, r3
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	3304      	adds	r3, #4
 800668c:	4619      	mov	r1, r3
 800668e:	4610      	mov	r0, r2
 8006690:	f7fe fac2 	bl	8004c18 <vListInsertEnd>
 8006694:	e004      	b.n	80066a0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006696:	4b0b      	ldr	r3, [pc, #44]	; (80066c4 <xTaskPriorityInherit+0x100>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80066a0:	2301      	movs	r3, #1
 80066a2:	60fb      	str	r3, [r7, #12]
 80066a4:	e008      	b.n	80066b8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066aa:	4b06      	ldr	r3, [pc, #24]	; (80066c4 <xTaskPriorityInherit+0x100>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d201      	bcs.n	80066b8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80066b4:	2301      	movs	r3, #1
 80066b6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80066b8:	68fb      	ldr	r3, [r7, #12]
	}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20000358 	.word	0x20000358
 80066c8:	2000035c 	.word	0x2000035c
 80066cc:	20000460 	.word	0x20000460

080066d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80066dc:	2300      	movs	r3, #0
 80066de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d06e      	beq.n	80067c4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80066e6:	4b3a      	ldr	r3, [pc, #232]	; (80067d0 <xTaskPriorityDisinherit+0x100>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d00a      	beq.n	8006706 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80066f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	60fb      	str	r3, [r7, #12]
}
 8006702:	bf00      	nop
 8006704:	e7fe      	b.n	8006704 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10a      	bne.n	8006724 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	60bb      	str	r3, [r7, #8]
}
 8006720:	bf00      	nop
 8006722:	e7fe      	b.n	8006722 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006728:	1e5a      	subs	r2, r3, #1
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006736:	429a      	cmp	r2, r3
 8006738:	d044      	beq.n	80067c4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800673e:	2b00      	cmp	r3, #0
 8006740:	d140      	bne.n	80067c4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	3304      	adds	r3, #4
 8006746:	4618      	mov	r0, r3
 8006748:	f7fe fac1 	bl	8004cce <uxListRemove>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d115      	bne.n	800677e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006756:	491f      	ldr	r1, [pc, #124]	; (80067d4 <xTaskPriorityDisinherit+0x104>)
 8006758:	4613      	mov	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	440b      	add	r3, r1
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10a      	bne.n	800677e <xTaskPriorityDisinherit+0xae>
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676c:	2201      	movs	r2, #1
 800676e:	fa02 f303 	lsl.w	r3, r2, r3
 8006772:	43da      	mvns	r2, r3
 8006774:	4b18      	ldr	r3, [pc, #96]	; (80067d8 <xTaskPriorityDisinherit+0x108>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4013      	ands	r3, r2
 800677a:	4a17      	ldr	r2, [pc, #92]	; (80067d8 <xTaskPriorityDisinherit+0x108>)
 800677c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678a:	f1c3 0207 	rsb	r2, r3, #7
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006796:	2201      	movs	r2, #1
 8006798:	409a      	lsls	r2, r3
 800679a:	4b0f      	ldr	r3, [pc, #60]	; (80067d8 <xTaskPriorityDisinherit+0x108>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4313      	orrs	r3, r2
 80067a0:	4a0d      	ldr	r2, [pc, #52]	; (80067d8 <xTaskPriorityDisinherit+0x108>)
 80067a2:	6013      	str	r3, [r2, #0]
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a8:	4613      	mov	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4a08      	ldr	r2, [pc, #32]	; (80067d4 <xTaskPriorityDisinherit+0x104>)
 80067b2:	441a      	add	r2, r3
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	3304      	adds	r3, #4
 80067b8:	4619      	mov	r1, r3
 80067ba:	4610      	mov	r0, r2
 80067bc:	f7fe fa2c 	bl	8004c18 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80067c0:	2301      	movs	r3, #1
 80067c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067c4:	697b      	ldr	r3, [r7, #20]
	}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	20000358 	.word	0x20000358
 80067d4:	2000035c 	.word	0x2000035c
 80067d8:	20000460 	.word	0x20000460

080067dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b088      	sub	sp, #32
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80067ea:	2301      	movs	r3, #1
 80067ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 8088 	beq.w	8006906 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10a      	bne.n	8006814 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	60fb      	str	r3, [r7, #12]
}
 8006810:	bf00      	nop
 8006812:	e7fe      	b.n	8006812 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d902      	bls.n	8006824 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	61fb      	str	r3, [r7, #28]
 8006822:	e002      	b.n	800682a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006828:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682e:	69fa      	ldr	r2, [r7, #28]
 8006830:	429a      	cmp	r2, r3
 8006832:	d068      	beq.n	8006906 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	429a      	cmp	r2, r3
 800683c:	d163      	bne.n	8006906 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800683e:	4b34      	ldr	r3, [pc, #208]	; (8006910 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	69ba      	ldr	r2, [r7, #24]
 8006844:	429a      	cmp	r2, r3
 8006846:	d10a      	bne.n	800685e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	60bb      	str	r3, [r7, #8]
}
 800685a:	bf00      	nop
 800685c:	e7fe      	b.n	800685c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006862:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	69fa      	ldr	r2, [r7, #28]
 8006868:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	2b00      	cmp	r3, #0
 8006870:	db04      	blt.n	800687c <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	f1c3 0207 	rsb	r2, r3, #7
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	6959      	ldr	r1, [r3, #20]
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4613      	mov	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4413      	add	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4a22      	ldr	r2, [pc, #136]	; (8006914 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800688c:	4413      	add	r3, r2
 800688e:	4299      	cmp	r1, r3
 8006890:	d101      	bne.n	8006896 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8006892:	2301      	movs	r3, #1
 8006894:	e000      	b.n	8006898 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8006896:	2300      	movs	r3, #0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d034      	beq.n	8006906 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	3304      	adds	r3, #4
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7fe fa14 	bl	8004cce <uxListRemove>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d115      	bne.n	80068d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b0:	4918      	ldr	r1, [pc, #96]	; (8006914 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80068b2:	4613      	mov	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	4413      	add	r3, r2
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	440b      	add	r3, r1
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10a      	bne.n	80068d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c6:	2201      	movs	r2, #1
 80068c8:	fa02 f303 	lsl.w	r3, r2, r3
 80068cc:	43da      	mvns	r2, r3
 80068ce:	4b12      	ldr	r3, [pc, #72]	; (8006918 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4013      	ands	r3, r2
 80068d4:	4a10      	ldr	r2, [pc, #64]	; (8006918 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80068d6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068dc:	2201      	movs	r2, #1
 80068de:	409a      	lsls	r2, r3
 80068e0:	4b0d      	ldr	r3, [pc, #52]	; (8006918 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	4a0c      	ldr	r2, [pc, #48]	; (8006918 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80068e8:	6013      	str	r3, [r2, #0]
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ee:	4613      	mov	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4413      	add	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4a07      	ldr	r2, [pc, #28]	; (8006914 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80068f8:	441a      	add	r2, r3
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	3304      	adds	r3, #4
 80068fe:	4619      	mov	r1, r3
 8006900:	4610      	mov	r0, r2
 8006902:	f7fe f989 	bl	8004c18 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006906:	bf00      	nop
 8006908:	3720      	adds	r7, #32
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	20000358 	.word	0x20000358
 8006914:	2000035c 	.word	0x2000035c
 8006918:	20000460 	.word	0x20000460

0800691c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800691c:	b480      	push	{r7}
 800691e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006920:	4b07      	ldr	r3, [pc, #28]	; (8006940 <pvTaskIncrementMutexHeldCount+0x24>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d004      	beq.n	8006932 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006928:	4b05      	ldr	r3, [pc, #20]	; (8006940 <pvTaskIncrementMutexHeldCount+0x24>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800692e:	3201      	adds	r2, #1
 8006930:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006932:	4b03      	ldr	r3, [pc, #12]	; (8006940 <pvTaskIncrementMutexHeldCount+0x24>)
 8006934:	681b      	ldr	r3, [r3, #0]
	}
 8006936:	4618      	mov	r0, r3
 8006938:	46bd      	mov	sp, r7
 800693a:	bc80      	pop	{r7}
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	20000358 	.word	0x20000358

08006944 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800694e:	4b29      	ldr	r3, [pc, #164]	; (80069f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006954:	4b28      	ldr	r3, [pc, #160]	; (80069f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	3304      	adds	r3, #4
 800695a:	4618      	mov	r0, r3
 800695c:	f7fe f9b7 	bl	8004cce <uxListRemove>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10b      	bne.n	800697e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006966:	4b24      	ldr	r3, [pc, #144]	; (80069f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696c:	2201      	movs	r2, #1
 800696e:	fa02 f303 	lsl.w	r3, r2, r3
 8006972:	43da      	mvns	r2, r3
 8006974:	4b21      	ldr	r3, [pc, #132]	; (80069fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4013      	ands	r3, r2
 800697a:	4a20      	ldr	r2, [pc, #128]	; (80069fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800697c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006984:	d10a      	bne.n	800699c <prvAddCurrentTaskToDelayedList+0x58>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d007      	beq.n	800699c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800698c:	4b1a      	ldr	r3, [pc, #104]	; (80069f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3304      	adds	r3, #4
 8006992:	4619      	mov	r1, r3
 8006994:	481a      	ldr	r0, [pc, #104]	; (8006a00 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006996:	f7fe f93f 	bl	8004c18 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800699a:	e026      	b.n	80069ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4413      	add	r3, r2
 80069a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80069a4:	4b14      	ldr	r3, [pc, #80]	; (80069f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d209      	bcs.n	80069c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069b4:	4b13      	ldr	r3, [pc, #76]	; (8006a04 <prvAddCurrentTaskToDelayedList+0xc0>)
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	4b0f      	ldr	r3, [pc, #60]	; (80069f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3304      	adds	r3, #4
 80069be:	4619      	mov	r1, r3
 80069c0:	4610      	mov	r0, r2
 80069c2:	f7fe f94c 	bl	8004c5e <vListInsert>
}
 80069c6:	e010      	b.n	80069ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069c8:	4b0f      	ldr	r3, [pc, #60]	; (8006a08 <prvAddCurrentTaskToDelayedList+0xc4>)
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	4b0a      	ldr	r3, [pc, #40]	; (80069f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3304      	adds	r3, #4
 80069d2:	4619      	mov	r1, r3
 80069d4:	4610      	mov	r0, r2
 80069d6:	f7fe f942 	bl	8004c5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80069da:	4b0c      	ldr	r3, [pc, #48]	; (8006a0c <prvAddCurrentTaskToDelayedList+0xc8>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d202      	bcs.n	80069ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80069e4:	4a09      	ldr	r2, [pc, #36]	; (8006a0c <prvAddCurrentTaskToDelayedList+0xc8>)
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	6013      	str	r3, [r2, #0]
}
 80069ea:	bf00      	nop
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	2000045c 	.word	0x2000045c
 80069f8:	20000358 	.word	0x20000358
 80069fc:	20000460 	.word	0x20000460
 8006a00:	20000444 	.word	0x20000444
 8006a04:	20000414 	.word	0x20000414
 8006a08:	20000410 	.word	0x20000410
 8006a0c:	20000478 	.word	0x20000478

08006a10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	3b04      	subs	r3, #4
 8006a20:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	3b04      	subs	r3, #4
 8006a2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	f023 0201 	bic.w	r2, r3, #1
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	3b04      	subs	r3, #4
 8006a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a40:	4a08      	ldr	r2, [pc, #32]	; (8006a64 <pxPortInitialiseStack+0x54>)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	3b14      	subs	r3, #20
 8006a4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	3b20      	subs	r3, #32
 8006a56:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a58:	68fb      	ldr	r3, [r7, #12]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3714      	adds	r7, #20
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bc80      	pop	{r7}
 8006a62:	4770      	bx	lr
 8006a64:	08006a69 	.word	0x08006a69

08006a68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a72:	4b12      	ldr	r3, [pc, #72]	; (8006abc <prvTaskExitError+0x54>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7a:	d00a      	beq.n	8006a92 <prvTaskExitError+0x2a>
	__asm volatile
 8006a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	60fb      	str	r3, [r7, #12]
}
 8006a8e:	bf00      	nop
 8006a90:	e7fe      	b.n	8006a90 <prvTaskExitError+0x28>
	__asm volatile
 8006a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	60bb      	str	r3, [r7, #8]
}
 8006aa4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006aa6:	bf00      	nop
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d0fc      	beq.n	8006aa8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006aae:	bf00      	nop
 8006ab0:	bf00      	nop
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bc80      	pop	{r7}
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	20000010 	.word	0x20000010

08006ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ac0:	4b07      	ldr	r3, [pc, #28]	; (8006ae0 <pxCurrentTCBConst2>)
 8006ac2:	6819      	ldr	r1, [r3, #0]
 8006ac4:	6808      	ldr	r0, [r1, #0]
 8006ac6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006aca:	f380 8809 	msr	PSP, r0
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	f04f 0000 	mov.w	r0, #0
 8006ad6:	f380 8811 	msr	BASEPRI, r0
 8006ada:	f04e 0e0d 	orr.w	lr, lr, #13
 8006ade:	4770      	bx	lr

08006ae0 <pxCurrentTCBConst2>:
 8006ae0:	20000358 	.word	0x20000358
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ae4:	bf00      	nop
 8006ae6:	bf00      	nop

08006ae8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006ae8:	4806      	ldr	r0, [pc, #24]	; (8006b04 <prvPortStartFirstTask+0x1c>)
 8006aea:	6800      	ldr	r0, [r0, #0]
 8006aec:	6800      	ldr	r0, [r0, #0]
 8006aee:	f380 8808 	msr	MSP, r0
 8006af2:	b662      	cpsie	i
 8006af4:	b661      	cpsie	f
 8006af6:	f3bf 8f4f 	dsb	sy
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	df00      	svc	0
 8006b00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b02:	bf00      	nop
 8006b04:	e000ed08 	.word	0xe000ed08

08006b08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b0e:	4b32      	ldr	r3, [pc, #200]	; (8006bd8 <xPortStartScheduler+0xd0>)
 8006b10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	22ff      	movs	r2, #255	; 0xff
 8006b1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b28:	78fb      	ldrb	r3, [r7, #3]
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b30:	b2da      	uxtb	r2, r3
 8006b32:	4b2a      	ldr	r3, [pc, #168]	; (8006bdc <xPortStartScheduler+0xd4>)
 8006b34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b36:	4b2a      	ldr	r3, [pc, #168]	; (8006be0 <xPortStartScheduler+0xd8>)
 8006b38:	2207      	movs	r2, #7
 8006b3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b3c:	e009      	b.n	8006b52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006b3e:	4b28      	ldr	r3, [pc, #160]	; (8006be0 <xPortStartScheduler+0xd8>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	4a26      	ldr	r2, [pc, #152]	; (8006be0 <xPortStartScheduler+0xd8>)
 8006b46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b48:	78fb      	ldrb	r3, [r7, #3]
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	005b      	lsls	r3, r3, #1
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b52:	78fb      	ldrb	r3, [r7, #3]
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b5a:	2b80      	cmp	r3, #128	; 0x80
 8006b5c:	d0ef      	beq.n	8006b3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b5e:	4b20      	ldr	r3, [pc, #128]	; (8006be0 <xPortStartScheduler+0xd8>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f1c3 0307 	rsb	r3, r3, #7
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	d00a      	beq.n	8006b80 <xPortStartScheduler+0x78>
	__asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	60bb      	str	r3, [r7, #8]
}
 8006b7c:	bf00      	nop
 8006b7e:	e7fe      	b.n	8006b7e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b80:	4b17      	ldr	r3, [pc, #92]	; (8006be0 <xPortStartScheduler+0xd8>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	021b      	lsls	r3, r3, #8
 8006b86:	4a16      	ldr	r2, [pc, #88]	; (8006be0 <xPortStartScheduler+0xd8>)
 8006b88:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b8a:	4b15      	ldr	r3, [pc, #84]	; (8006be0 <xPortStartScheduler+0xd8>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b92:	4a13      	ldr	r2, [pc, #76]	; (8006be0 <xPortStartScheduler+0xd8>)
 8006b94:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b9e:	4b11      	ldr	r3, [pc, #68]	; (8006be4 <xPortStartScheduler+0xdc>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a10      	ldr	r2, [pc, #64]	; (8006be4 <xPortStartScheduler+0xdc>)
 8006ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ba8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006baa:	4b0e      	ldr	r3, [pc, #56]	; (8006be4 <xPortStartScheduler+0xdc>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a0d      	ldr	r2, [pc, #52]	; (8006be4 <xPortStartScheduler+0xdc>)
 8006bb0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006bb4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006bb6:	f000 f8b9 	bl	8006d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006bba:	4b0b      	ldr	r3, [pc, #44]	; (8006be8 <xPortStartScheduler+0xe0>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006bc0:	f7ff ff92 	bl	8006ae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006bc4:	f7ff fa96 	bl	80060f4 <vTaskSwitchContext>
	prvTaskExitError();
 8006bc8:	f7ff ff4e 	bl	8006a68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	e000e400 	.word	0xe000e400
 8006bdc:	20000484 	.word	0x20000484
 8006be0:	20000488 	.word	0x20000488
 8006be4:	e000ed20 	.word	0xe000ed20
 8006be8:	20000010 	.word	0x20000010

08006bec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
	__asm volatile
 8006bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	607b      	str	r3, [r7, #4]
}
 8006c04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c06:	4b0f      	ldr	r3, [pc, #60]	; (8006c44 <vPortEnterCritical+0x58>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	4a0d      	ldr	r2, [pc, #52]	; (8006c44 <vPortEnterCritical+0x58>)
 8006c0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c10:	4b0c      	ldr	r3, [pc, #48]	; (8006c44 <vPortEnterCritical+0x58>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d10f      	bne.n	8006c38 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c18:	4b0b      	ldr	r3, [pc, #44]	; (8006c48 <vPortEnterCritical+0x5c>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00a      	beq.n	8006c38 <vPortEnterCritical+0x4c>
	__asm volatile
 8006c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	603b      	str	r3, [r7, #0]
}
 8006c34:	bf00      	nop
 8006c36:	e7fe      	b.n	8006c36 <vPortEnterCritical+0x4a>
	}
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bc80      	pop	{r7}
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	20000010 	.word	0x20000010
 8006c48:	e000ed04 	.word	0xe000ed04

08006c4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c52:	4b11      	ldr	r3, [pc, #68]	; (8006c98 <vPortExitCritical+0x4c>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10a      	bne.n	8006c70 <vPortExitCritical+0x24>
	__asm volatile
 8006c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5e:	f383 8811 	msr	BASEPRI, r3
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	607b      	str	r3, [r7, #4]
}
 8006c6c:	bf00      	nop
 8006c6e:	e7fe      	b.n	8006c6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c70:	4b09      	ldr	r3, [pc, #36]	; (8006c98 <vPortExitCritical+0x4c>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	3b01      	subs	r3, #1
 8006c76:	4a08      	ldr	r2, [pc, #32]	; (8006c98 <vPortExitCritical+0x4c>)
 8006c78:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c7a:	4b07      	ldr	r3, [pc, #28]	; (8006c98 <vPortExitCritical+0x4c>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d105      	bne.n	8006c8e <vPortExitCritical+0x42>
 8006c82:	2300      	movs	r3, #0
 8006c84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	f383 8811 	msr	BASEPRI, r3
}
 8006c8c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c8e:	bf00      	nop
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bc80      	pop	{r7}
 8006c96:	4770      	bx	lr
 8006c98:	20000010 	.word	0x20000010
 8006c9c:	00000000 	.word	0x00000000

08006ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ca0:	f3ef 8009 	mrs	r0, PSP
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	4b0d      	ldr	r3, [pc, #52]	; (8006ce0 <pxCurrentTCBConst>)
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006cb0:	6010      	str	r0, [r2, #0]
 8006cb2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006cb6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006cba:	f380 8811 	msr	BASEPRI, r0
 8006cbe:	f7ff fa19 	bl	80060f4 <vTaskSwitchContext>
 8006cc2:	f04f 0000 	mov.w	r0, #0
 8006cc6:	f380 8811 	msr	BASEPRI, r0
 8006cca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006cce:	6819      	ldr	r1, [r3, #0]
 8006cd0:	6808      	ldr	r0, [r1, #0]
 8006cd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006cd6:	f380 8809 	msr	PSP, r0
 8006cda:	f3bf 8f6f 	isb	sy
 8006cde:	4770      	bx	lr

08006ce0 <pxCurrentTCBConst>:
 8006ce0:	20000358 	.word	0x20000358
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ce4:	bf00      	nop
 8006ce6:	bf00      	nop

08006ce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
	__asm volatile
 8006cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	607b      	str	r3, [r7, #4]
}
 8006d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d02:	f7ff f939 	bl	8005f78 <xTaskIncrementTick>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d003      	beq.n	8006d14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d0c:	4b06      	ldr	r3, [pc, #24]	; (8006d28 <SysTick_Handler+0x40>)
 8006d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	2300      	movs	r3, #0
 8006d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	f383 8811 	msr	BASEPRI, r3
}
 8006d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d20:	bf00      	nop
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	e000ed04 	.word	0xe000ed04

08006d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d30:	4b0a      	ldr	r3, [pc, #40]	; (8006d5c <vPortSetupTimerInterrupt+0x30>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d36:	4b0a      	ldr	r3, [pc, #40]	; (8006d60 <vPortSetupTimerInterrupt+0x34>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d3c:	4b09      	ldr	r3, [pc, #36]	; (8006d64 <vPortSetupTimerInterrupt+0x38>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a09      	ldr	r2, [pc, #36]	; (8006d68 <vPortSetupTimerInterrupt+0x3c>)
 8006d42:	fba2 2303 	umull	r2, r3, r2, r3
 8006d46:	099b      	lsrs	r3, r3, #6
 8006d48:	4a08      	ldr	r2, [pc, #32]	; (8006d6c <vPortSetupTimerInterrupt+0x40>)
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d4e:	4b03      	ldr	r3, [pc, #12]	; (8006d5c <vPortSetupTimerInterrupt+0x30>)
 8006d50:	2207      	movs	r2, #7
 8006d52:	601a      	str	r2, [r3, #0]
}
 8006d54:	bf00      	nop
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bc80      	pop	{r7}
 8006d5a:	4770      	bx	lr
 8006d5c:	e000e010 	.word	0xe000e010
 8006d60:	e000e018 	.word	0xe000e018
 8006d64:	20000000 	.word	0x20000000
 8006d68:	10624dd3 	.word	0x10624dd3
 8006d6c:	e000e014 	.word	0xe000e014

08006d70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d76:	f3ef 8305 	mrs	r3, IPSR
 8006d7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2b0f      	cmp	r3, #15
 8006d80:	d914      	bls.n	8006dac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d82:	4a16      	ldr	r2, [pc, #88]	; (8006ddc <vPortValidateInterruptPriority+0x6c>)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	4413      	add	r3, r2
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d8c:	4b14      	ldr	r3, [pc, #80]	; (8006de0 <vPortValidateInterruptPriority+0x70>)
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	7afa      	ldrb	r2, [r7, #11]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d20a      	bcs.n	8006dac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	607b      	str	r3, [r7, #4]
}
 8006da8:	bf00      	nop
 8006daa:	e7fe      	b.n	8006daa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006dac:	4b0d      	ldr	r3, [pc, #52]	; (8006de4 <vPortValidateInterruptPriority+0x74>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006db4:	4b0c      	ldr	r3, [pc, #48]	; (8006de8 <vPortValidateInterruptPriority+0x78>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d90a      	bls.n	8006dd2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	603b      	str	r3, [r7, #0]
}
 8006dce:	bf00      	nop
 8006dd0:	e7fe      	b.n	8006dd0 <vPortValidateInterruptPriority+0x60>
	}
 8006dd2:	bf00      	nop
 8006dd4:	3714      	adds	r7, #20
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bc80      	pop	{r7}
 8006dda:	4770      	bx	lr
 8006ddc:	e000e3f0 	.word	0xe000e3f0
 8006de0:	20000484 	.word	0x20000484
 8006de4:	e000ed0c 	.word	0xe000ed0c
 8006de8:	20000488 	.word	0x20000488

08006dec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b08a      	sub	sp, #40	; 0x28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006df4:	2300      	movs	r3, #0
 8006df6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006df8:	f7ff f814 	bl	8005e24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006dfc:	4b58      	ldr	r3, [pc, #352]	; (8006f60 <pvPortMalloc+0x174>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e04:	f000 f910 	bl	8007028 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e08:	4b56      	ldr	r3, [pc, #344]	; (8006f64 <pvPortMalloc+0x178>)
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4013      	ands	r3, r2
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f040 808e 	bne.w	8006f32 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d01d      	beq.n	8006e58 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006e1c:	2208      	movs	r2, #8
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4413      	add	r3, r2
 8006e22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d014      	beq.n	8006e58 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f023 0307 	bic.w	r3, r3, #7
 8006e34:	3308      	adds	r3, #8
 8006e36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f003 0307 	and.w	r3, r3, #7
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00a      	beq.n	8006e58 <pvPortMalloc+0x6c>
	__asm volatile
 8006e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e46:	f383 8811 	msr	BASEPRI, r3
 8006e4a:	f3bf 8f6f 	isb	sy
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	617b      	str	r3, [r7, #20]
}
 8006e54:	bf00      	nop
 8006e56:	e7fe      	b.n	8006e56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d069      	beq.n	8006f32 <pvPortMalloc+0x146>
 8006e5e:	4b42      	ldr	r3, [pc, #264]	; (8006f68 <pvPortMalloc+0x17c>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d864      	bhi.n	8006f32 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e68:	4b40      	ldr	r3, [pc, #256]	; (8006f6c <pvPortMalloc+0x180>)
 8006e6a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e6c:	4b3f      	ldr	r3, [pc, #252]	; (8006f6c <pvPortMalloc+0x180>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e72:	e004      	b.n	8006e7e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e76:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d903      	bls.n	8006e90 <pvPortMalloc+0xa4>
 8006e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1f1      	bne.n	8006e74 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e90:	4b33      	ldr	r3, [pc, #204]	; (8006f60 <pvPortMalloc+0x174>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d04b      	beq.n	8006f32 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2208      	movs	r2, #8
 8006ea0:	4413      	add	r3, r2
 8006ea2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	6a3b      	ldr	r3, [r7, #32]
 8006eaa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	1ad2      	subs	r2, r2, r3
 8006eb4:	2308      	movs	r3, #8
 8006eb6:	005b      	lsls	r3, r3, #1
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d91f      	bls.n	8006efc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	f003 0307 	and.w	r3, r3, #7
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00a      	beq.n	8006ee4 <pvPortMalloc+0xf8>
	__asm volatile
 8006ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	613b      	str	r3, [r7, #16]
}
 8006ee0:	bf00      	nop
 8006ee2:	e7fe      	b.n	8006ee2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	1ad2      	subs	r2, r2, r3
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ef6:	69b8      	ldr	r0, [r7, #24]
 8006ef8:	f000 f8f8 	bl	80070ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006efc:	4b1a      	ldr	r3, [pc, #104]	; (8006f68 <pvPortMalloc+0x17c>)
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	4a18      	ldr	r2, [pc, #96]	; (8006f68 <pvPortMalloc+0x17c>)
 8006f08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f0a:	4b17      	ldr	r3, [pc, #92]	; (8006f68 <pvPortMalloc+0x17c>)
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	4b18      	ldr	r3, [pc, #96]	; (8006f70 <pvPortMalloc+0x184>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d203      	bcs.n	8006f1e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f16:	4b14      	ldr	r3, [pc, #80]	; (8006f68 <pvPortMalloc+0x17c>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a15      	ldr	r2, [pc, #84]	; (8006f70 <pvPortMalloc+0x184>)
 8006f1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	4b10      	ldr	r3, [pc, #64]	; (8006f64 <pvPortMalloc+0x178>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	431a      	orrs	r2, r3
 8006f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2e:	2200      	movs	r2, #0
 8006f30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f32:	f7fe ff85 	bl	8005e40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	f003 0307 	and.w	r3, r3, #7
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00a      	beq.n	8006f56 <pvPortMalloc+0x16a>
	__asm volatile
 8006f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f44:	f383 8811 	msr	BASEPRI, r3
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	60fb      	str	r3, [r7, #12]
}
 8006f52:	bf00      	nop
 8006f54:	e7fe      	b.n	8006f54 <pvPortMalloc+0x168>
	return pvReturn;
 8006f56:	69fb      	ldr	r3, [r7, #28]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3728      	adds	r7, #40	; 0x28
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	20004494 	.word	0x20004494
 8006f64:	200044a0 	.word	0x200044a0
 8006f68:	20004498 	.word	0x20004498
 8006f6c:	2000448c 	.word	0x2000448c
 8006f70:	2000449c 	.word	0x2000449c

08006f74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d048      	beq.n	8007018 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f86:	2308      	movs	r3, #8
 8006f88:	425b      	negs	r3, r3
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	4b21      	ldr	r3, [pc, #132]	; (8007020 <vPortFree+0xac>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10a      	bne.n	8006fb8 <vPortFree+0x44>
	__asm volatile
 8006fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa6:	f383 8811 	msr	BASEPRI, r3
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	60fb      	str	r3, [r7, #12]
}
 8006fb4:	bf00      	nop
 8006fb6:	e7fe      	b.n	8006fb6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00a      	beq.n	8006fd6 <vPortFree+0x62>
	__asm volatile
 8006fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc4:	f383 8811 	msr	BASEPRI, r3
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	60bb      	str	r3, [r7, #8]
}
 8006fd2:	bf00      	nop
 8006fd4:	e7fe      	b.n	8006fd4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	4b11      	ldr	r3, [pc, #68]	; (8007020 <vPortFree+0xac>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4013      	ands	r3, r2
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d019      	beq.n	8007018 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d115      	bne.n	8007018 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	4b0b      	ldr	r3, [pc, #44]	; (8007020 <vPortFree+0xac>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	43db      	mvns	r3, r3
 8006ff6:	401a      	ands	r2, r3
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ffc:	f7fe ff12 	bl	8005e24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	4b07      	ldr	r3, [pc, #28]	; (8007024 <vPortFree+0xb0>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4413      	add	r3, r2
 800700a:	4a06      	ldr	r2, [pc, #24]	; (8007024 <vPortFree+0xb0>)
 800700c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800700e:	6938      	ldr	r0, [r7, #16]
 8007010:	f000 f86c 	bl	80070ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007014:	f7fe ff14 	bl	8005e40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007018:	bf00      	nop
 800701a:	3718      	adds	r7, #24
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	200044a0 	.word	0x200044a0
 8007024:	20004498 	.word	0x20004498

08007028 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800702e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007032:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007034:	4b27      	ldr	r3, [pc, #156]	; (80070d4 <prvHeapInit+0xac>)
 8007036:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f003 0307 	and.w	r3, r3, #7
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00c      	beq.n	800705c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3307      	adds	r3, #7
 8007046:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f023 0307 	bic.w	r3, r3, #7
 800704e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	4a1f      	ldr	r2, [pc, #124]	; (80070d4 <prvHeapInit+0xac>)
 8007058:	4413      	add	r3, r2
 800705a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007060:	4a1d      	ldr	r2, [pc, #116]	; (80070d8 <prvHeapInit+0xb0>)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007066:	4b1c      	ldr	r3, [pc, #112]	; (80070d8 <prvHeapInit+0xb0>)
 8007068:	2200      	movs	r2, #0
 800706a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68ba      	ldr	r2, [r7, #8]
 8007070:	4413      	add	r3, r2
 8007072:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007074:	2208      	movs	r2, #8
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	1a9b      	subs	r3, r3, r2
 800707a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f023 0307 	bic.w	r3, r3, #7
 8007082:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4a15      	ldr	r2, [pc, #84]	; (80070dc <prvHeapInit+0xb4>)
 8007088:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800708a:	4b14      	ldr	r3, [pc, #80]	; (80070dc <prvHeapInit+0xb4>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2200      	movs	r2, #0
 8007090:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007092:	4b12      	ldr	r3, [pc, #72]	; (80070dc <prvHeapInit+0xb4>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2200      	movs	r2, #0
 8007098:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	1ad2      	subs	r2, r2, r3
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070a8:	4b0c      	ldr	r3, [pc, #48]	; (80070dc <prvHeapInit+0xb4>)
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	4a0a      	ldr	r2, [pc, #40]	; (80070e0 <prvHeapInit+0xb8>)
 80070b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	4a09      	ldr	r2, [pc, #36]	; (80070e4 <prvHeapInit+0xbc>)
 80070be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070c0:	4b09      	ldr	r3, [pc, #36]	; (80070e8 <prvHeapInit+0xc0>)
 80070c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80070c6:	601a      	str	r2, [r3, #0]
}
 80070c8:	bf00      	nop
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bc80      	pop	{r7}
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	2000048c 	.word	0x2000048c
 80070d8:	2000448c 	.word	0x2000448c
 80070dc:	20004494 	.word	0x20004494
 80070e0:	2000449c 	.word	0x2000449c
 80070e4:	20004498 	.word	0x20004498
 80070e8:	200044a0 	.word	0x200044a0

080070ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070f4:	4b27      	ldr	r3, [pc, #156]	; (8007194 <prvInsertBlockIntoFreeList+0xa8>)
 80070f6:	60fb      	str	r3, [r7, #12]
 80070f8:	e002      	b.n	8007100 <prvInsertBlockIntoFreeList+0x14>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	60fb      	str	r3, [r7, #12]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	429a      	cmp	r2, r3
 8007108:	d8f7      	bhi.n	80070fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	4413      	add	r3, r2
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	429a      	cmp	r2, r3
 800711a:	d108      	bne.n	800712e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	685a      	ldr	r2, [r3, #4]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	441a      	add	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	441a      	add	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	429a      	cmp	r2, r3
 8007140:	d118      	bne.n	8007174 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	4b14      	ldr	r3, [pc, #80]	; (8007198 <prvInsertBlockIntoFreeList+0xac>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	429a      	cmp	r2, r3
 800714c:	d00d      	beq.n	800716a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	441a      	add	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	e008      	b.n	800717c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800716a:	4b0b      	ldr	r3, [pc, #44]	; (8007198 <prvInsertBlockIntoFreeList+0xac>)
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	601a      	str	r2, [r3, #0]
 8007172:	e003      	b.n	800717c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	429a      	cmp	r2, r3
 8007182:	d002      	beq.n	800718a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800718a:	bf00      	nop
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	bc80      	pop	{r7}
 8007192:	4770      	bx	lr
 8007194:	2000448c 	.word	0x2000448c
 8007198:	20004494 	.word	0x20004494

0800719c <__errno>:
 800719c:	4b01      	ldr	r3, [pc, #4]	; (80071a4 <__errno+0x8>)
 800719e:	6818      	ldr	r0, [r3, #0]
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	20000014 	.word	0x20000014

080071a8 <std>:
 80071a8:	2300      	movs	r3, #0
 80071aa:	b510      	push	{r4, lr}
 80071ac:	4604      	mov	r4, r0
 80071ae:	e9c0 3300 	strd	r3, r3, [r0]
 80071b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071b6:	6083      	str	r3, [r0, #8]
 80071b8:	8181      	strh	r1, [r0, #12]
 80071ba:	6643      	str	r3, [r0, #100]	; 0x64
 80071bc:	81c2      	strh	r2, [r0, #14]
 80071be:	6183      	str	r3, [r0, #24]
 80071c0:	4619      	mov	r1, r3
 80071c2:	2208      	movs	r2, #8
 80071c4:	305c      	adds	r0, #92	; 0x5c
 80071c6:	f000 f91a 	bl	80073fe <memset>
 80071ca:	4b05      	ldr	r3, [pc, #20]	; (80071e0 <std+0x38>)
 80071cc:	6224      	str	r4, [r4, #32]
 80071ce:	6263      	str	r3, [r4, #36]	; 0x24
 80071d0:	4b04      	ldr	r3, [pc, #16]	; (80071e4 <std+0x3c>)
 80071d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80071d4:	4b04      	ldr	r3, [pc, #16]	; (80071e8 <std+0x40>)
 80071d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071d8:	4b04      	ldr	r3, [pc, #16]	; (80071ec <std+0x44>)
 80071da:	6323      	str	r3, [r4, #48]	; 0x30
 80071dc:	bd10      	pop	{r4, pc}
 80071de:	bf00      	nop
 80071e0:	080076fd 	.word	0x080076fd
 80071e4:	0800771f 	.word	0x0800771f
 80071e8:	08007757 	.word	0x08007757
 80071ec:	0800777b 	.word	0x0800777b

080071f0 <_cleanup_r>:
 80071f0:	4901      	ldr	r1, [pc, #4]	; (80071f8 <_cleanup_r+0x8>)
 80071f2:	f000 b8af 	b.w	8007354 <_fwalk_reent>
 80071f6:	bf00      	nop
 80071f8:	08007ca5 	.word	0x08007ca5

080071fc <__sfmoreglue>:
 80071fc:	b570      	push	{r4, r5, r6, lr}
 80071fe:	2568      	movs	r5, #104	; 0x68
 8007200:	1e4a      	subs	r2, r1, #1
 8007202:	4355      	muls	r5, r2
 8007204:	460e      	mov	r6, r1
 8007206:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800720a:	f000 f901 	bl	8007410 <_malloc_r>
 800720e:	4604      	mov	r4, r0
 8007210:	b140      	cbz	r0, 8007224 <__sfmoreglue+0x28>
 8007212:	2100      	movs	r1, #0
 8007214:	e9c0 1600 	strd	r1, r6, [r0]
 8007218:	300c      	adds	r0, #12
 800721a:	60a0      	str	r0, [r4, #8]
 800721c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007220:	f000 f8ed 	bl	80073fe <memset>
 8007224:	4620      	mov	r0, r4
 8007226:	bd70      	pop	{r4, r5, r6, pc}

08007228 <__sfp_lock_acquire>:
 8007228:	4801      	ldr	r0, [pc, #4]	; (8007230 <__sfp_lock_acquire+0x8>)
 800722a:	f000 b8d8 	b.w	80073de <__retarget_lock_acquire_recursive>
 800722e:	bf00      	nop
 8007230:	20004624 	.word	0x20004624

08007234 <__sfp_lock_release>:
 8007234:	4801      	ldr	r0, [pc, #4]	; (800723c <__sfp_lock_release+0x8>)
 8007236:	f000 b8d3 	b.w	80073e0 <__retarget_lock_release_recursive>
 800723a:	bf00      	nop
 800723c:	20004624 	.word	0x20004624

08007240 <__sinit_lock_acquire>:
 8007240:	4801      	ldr	r0, [pc, #4]	; (8007248 <__sinit_lock_acquire+0x8>)
 8007242:	f000 b8cc 	b.w	80073de <__retarget_lock_acquire_recursive>
 8007246:	bf00      	nop
 8007248:	2000461f 	.word	0x2000461f

0800724c <__sinit_lock_release>:
 800724c:	4801      	ldr	r0, [pc, #4]	; (8007254 <__sinit_lock_release+0x8>)
 800724e:	f000 b8c7 	b.w	80073e0 <__retarget_lock_release_recursive>
 8007252:	bf00      	nop
 8007254:	2000461f 	.word	0x2000461f

08007258 <__sinit>:
 8007258:	b510      	push	{r4, lr}
 800725a:	4604      	mov	r4, r0
 800725c:	f7ff fff0 	bl	8007240 <__sinit_lock_acquire>
 8007260:	69a3      	ldr	r3, [r4, #24]
 8007262:	b11b      	cbz	r3, 800726c <__sinit+0x14>
 8007264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007268:	f7ff bff0 	b.w	800724c <__sinit_lock_release>
 800726c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007270:	6523      	str	r3, [r4, #80]	; 0x50
 8007272:	4b13      	ldr	r3, [pc, #76]	; (80072c0 <__sinit+0x68>)
 8007274:	4a13      	ldr	r2, [pc, #76]	; (80072c4 <__sinit+0x6c>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	62a2      	str	r2, [r4, #40]	; 0x28
 800727a:	42a3      	cmp	r3, r4
 800727c:	bf08      	it	eq
 800727e:	2301      	moveq	r3, #1
 8007280:	4620      	mov	r0, r4
 8007282:	bf08      	it	eq
 8007284:	61a3      	streq	r3, [r4, #24]
 8007286:	f000 f81f 	bl	80072c8 <__sfp>
 800728a:	6060      	str	r0, [r4, #4]
 800728c:	4620      	mov	r0, r4
 800728e:	f000 f81b 	bl	80072c8 <__sfp>
 8007292:	60a0      	str	r0, [r4, #8]
 8007294:	4620      	mov	r0, r4
 8007296:	f000 f817 	bl	80072c8 <__sfp>
 800729a:	2200      	movs	r2, #0
 800729c:	2104      	movs	r1, #4
 800729e:	60e0      	str	r0, [r4, #12]
 80072a0:	6860      	ldr	r0, [r4, #4]
 80072a2:	f7ff ff81 	bl	80071a8 <std>
 80072a6:	2201      	movs	r2, #1
 80072a8:	2109      	movs	r1, #9
 80072aa:	68a0      	ldr	r0, [r4, #8]
 80072ac:	f7ff ff7c 	bl	80071a8 <std>
 80072b0:	2202      	movs	r2, #2
 80072b2:	2112      	movs	r1, #18
 80072b4:	68e0      	ldr	r0, [r4, #12]
 80072b6:	f7ff ff77 	bl	80071a8 <std>
 80072ba:	2301      	movs	r3, #1
 80072bc:	61a3      	str	r3, [r4, #24]
 80072be:	e7d1      	b.n	8007264 <__sinit+0xc>
 80072c0:	08007fa0 	.word	0x08007fa0
 80072c4:	080071f1 	.word	0x080071f1

080072c8 <__sfp>:
 80072c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ca:	4607      	mov	r7, r0
 80072cc:	f7ff ffac 	bl	8007228 <__sfp_lock_acquire>
 80072d0:	4b1e      	ldr	r3, [pc, #120]	; (800734c <__sfp+0x84>)
 80072d2:	681e      	ldr	r6, [r3, #0]
 80072d4:	69b3      	ldr	r3, [r6, #24]
 80072d6:	b913      	cbnz	r3, 80072de <__sfp+0x16>
 80072d8:	4630      	mov	r0, r6
 80072da:	f7ff ffbd 	bl	8007258 <__sinit>
 80072de:	3648      	adds	r6, #72	; 0x48
 80072e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80072e4:	3b01      	subs	r3, #1
 80072e6:	d503      	bpl.n	80072f0 <__sfp+0x28>
 80072e8:	6833      	ldr	r3, [r6, #0]
 80072ea:	b30b      	cbz	r3, 8007330 <__sfp+0x68>
 80072ec:	6836      	ldr	r6, [r6, #0]
 80072ee:	e7f7      	b.n	80072e0 <__sfp+0x18>
 80072f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80072f4:	b9d5      	cbnz	r5, 800732c <__sfp+0x64>
 80072f6:	4b16      	ldr	r3, [pc, #88]	; (8007350 <__sfp+0x88>)
 80072f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072fc:	60e3      	str	r3, [r4, #12]
 80072fe:	6665      	str	r5, [r4, #100]	; 0x64
 8007300:	f000 f86c 	bl	80073dc <__retarget_lock_init_recursive>
 8007304:	f7ff ff96 	bl	8007234 <__sfp_lock_release>
 8007308:	2208      	movs	r2, #8
 800730a:	4629      	mov	r1, r5
 800730c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007310:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007314:	6025      	str	r5, [r4, #0]
 8007316:	61a5      	str	r5, [r4, #24]
 8007318:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800731c:	f000 f86f 	bl	80073fe <memset>
 8007320:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007324:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007328:	4620      	mov	r0, r4
 800732a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800732c:	3468      	adds	r4, #104	; 0x68
 800732e:	e7d9      	b.n	80072e4 <__sfp+0x1c>
 8007330:	2104      	movs	r1, #4
 8007332:	4638      	mov	r0, r7
 8007334:	f7ff ff62 	bl	80071fc <__sfmoreglue>
 8007338:	4604      	mov	r4, r0
 800733a:	6030      	str	r0, [r6, #0]
 800733c:	2800      	cmp	r0, #0
 800733e:	d1d5      	bne.n	80072ec <__sfp+0x24>
 8007340:	f7ff ff78 	bl	8007234 <__sfp_lock_release>
 8007344:	230c      	movs	r3, #12
 8007346:	603b      	str	r3, [r7, #0]
 8007348:	e7ee      	b.n	8007328 <__sfp+0x60>
 800734a:	bf00      	nop
 800734c:	08007fa0 	.word	0x08007fa0
 8007350:	ffff0001 	.word	0xffff0001

08007354 <_fwalk_reent>:
 8007354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007358:	4606      	mov	r6, r0
 800735a:	4688      	mov	r8, r1
 800735c:	2700      	movs	r7, #0
 800735e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007362:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007366:	f1b9 0901 	subs.w	r9, r9, #1
 800736a:	d505      	bpl.n	8007378 <_fwalk_reent+0x24>
 800736c:	6824      	ldr	r4, [r4, #0]
 800736e:	2c00      	cmp	r4, #0
 8007370:	d1f7      	bne.n	8007362 <_fwalk_reent+0xe>
 8007372:	4638      	mov	r0, r7
 8007374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007378:	89ab      	ldrh	r3, [r5, #12]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d907      	bls.n	800738e <_fwalk_reent+0x3a>
 800737e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007382:	3301      	adds	r3, #1
 8007384:	d003      	beq.n	800738e <_fwalk_reent+0x3a>
 8007386:	4629      	mov	r1, r5
 8007388:	4630      	mov	r0, r6
 800738a:	47c0      	blx	r8
 800738c:	4307      	orrs	r7, r0
 800738e:	3568      	adds	r5, #104	; 0x68
 8007390:	e7e9      	b.n	8007366 <_fwalk_reent+0x12>
	...

08007394 <__libc_init_array>:
 8007394:	b570      	push	{r4, r5, r6, lr}
 8007396:	2600      	movs	r6, #0
 8007398:	4d0c      	ldr	r5, [pc, #48]	; (80073cc <__libc_init_array+0x38>)
 800739a:	4c0d      	ldr	r4, [pc, #52]	; (80073d0 <__libc_init_array+0x3c>)
 800739c:	1b64      	subs	r4, r4, r5
 800739e:	10a4      	asrs	r4, r4, #2
 80073a0:	42a6      	cmp	r6, r4
 80073a2:	d109      	bne.n	80073b8 <__libc_init_array+0x24>
 80073a4:	f000 fd74 	bl	8007e90 <_init>
 80073a8:	2600      	movs	r6, #0
 80073aa:	4d0a      	ldr	r5, [pc, #40]	; (80073d4 <__libc_init_array+0x40>)
 80073ac:	4c0a      	ldr	r4, [pc, #40]	; (80073d8 <__libc_init_array+0x44>)
 80073ae:	1b64      	subs	r4, r4, r5
 80073b0:	10a4      	asrs	r4, r4, #2
 80073b2:	42a6      	cmp	r6, r4
 80073b4:	d105      	bne.n	80073c2 <__libc_init_array+0x2e>
 80073b6:	bd70      	pop	{r4, r5, r6, pc}
 80073b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073bc:	4798      	blx	r3
 80073be:	3601      	adds	r6, #1
 80073c0:	e7ee      	b.n	80073a0 <__libc_init_array+0xc>
 80073c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073c6:	4798      	blx	r3
 80073c8:	3601      	adds	r6, #1
 80073ca:	e7f2      	b.n	80073b2 <__libc_init_array+0x1e>
 80073cc:	08008640 	.word	0x08008640
 80073d0:	08008640 	.word	0x08008640
 80073d4:	08008640 	.word	0x08008640
 80073d8:	08008644 	.word	0x08008644

080073dc <__retarget_lock_init_recursive>:
 80073dc:	4770      	bx	lr

080073de <__retarget_lock_acquire_recursive>:
 80073de:	4770      	bx	lr

080073e0 <__retarget_lock_release_recursive>:
 80073e0:	4770      	bx	lr

080073e2 <memcpy>:
 80073e2:	440a      	add	r2, r1
 80073e4:	4291      	cmp	r1, r2
 80073e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80073ea:	d100      	bne.n	80073ee <memcpy+0xc>
 80073ec:	4770      	bx	lr
 80073ee:	b510      	push	{r4, lr}
 80073f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073f4:	4291      	cmp	r1, r2
 80073f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073fa:	d1f9      	bne.n	80073f0 <memcpy+0xe>
 80073fc:	bd10      	pop	{r4, pc}

080073fe <memset>:
 80073fe:	4603      	mov	r3, r0
 8007400:	4402      	add	r2, r0
 8007402:	4293      	cmp	r3, r2
 8007404:	d100      	bne.n	8007408 <memset+0xa>
 8007406:	4770      	bx	lr
 8007408:	f803 1b01 	strb.w	r1, [r3], #1
 800740c:	e7f9      	b.n	8007402 <memset+0x4>
	...

08007410 <_malloc_r>:
 8007410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007412:	1ccd      	adds	r5, r1, #3
 8007414:	f025 0503 	bic.w	r5, r5, #3
 8007418:	3508      	adds	r5, #8
 800741a:	2d0c      	cmp	r5, #12
 800741c:	bf38      	it	cc
 800741e:	250c      	movcc	r5, #12
 8007420:	2d00      	cmp	r5, #0
 8007422:	4606      	mov	r6, r0
 8007424:	db01      	blt.n	800742a <_malloc_r+0x1a>
 8007426:	42a9      	cmp	r1, r5
 8007428:	d903      	bls.n	8007432 <_malloc_r+0x22>
 800742a:	230c      	movs	r3, #12
 800742c:	6033      	str	r3, [r6, #0]
 800742e:	2000      	movs	r0, #0
 8007430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007432:	f000 fcc3 	bl	8007dbc <__malloc_lock>
 8007436:	4921      	ldr	r1, [pc, #132]	; (80074bc <_malloc_r+0xac>)
 8007438:	680a      	ldr	r2, [r1, #0]
 800743a:	4614      	mov	r4, r2
 800743c:	b99c      	cbnz	r4, 8007466 <_malloc_r+0x56>
 800743e:	4f20      	ldr	r7, [pc, #128]	; (80074c0 <_malloc_r+0xb0>)
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	b923      	cbnz	r3, 800744e <_malloc_r+0x3e>
 8007444:	4621      	mov	r1, r4
 8007446:	4630      	mov	r0, r6
 8007448:	f000 f948 	bl	80076dc <_sbrk_r>
 800744c:	6038      	str	r0, [r7, #0]
 800744e:	4629      	mov	r1, r5
 8007450:	4630      	mov	r0, r6
 8007452:	f000 f943 	bl	80076dc <_sbrk_r>
 8007456:	1c43      	adds	r3, r0, #1
 8007458:	d123      	bne.n	80074a2 <_malloc_r+0x92>
 800745a:	230c      	movs	r3, #12
 800745c:	4630      	mov	r0, r6
 800745e:	6033      	str	r3, [r6, #0]
 8007460:	f000 fcb2 	bl	8007dc8 <__malloc_unlock>
 8007464:	e7e3      	b.n	800742e <_malloc_r+0x1e>
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	1b5b      	subs	r3, r3, r5
 800746a:	d417      	bmi.n	800749c <_malloc_r+0x8c>
 800746c:	2b0b      	cmp	r3, #11
 800746e:	d903      	bls.n	8007478 <_malloc_r+0x68>
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	441c      	add	r4, r3
 8007474:	6025      	str	r5, [r4, #0]
 8007476:	e004      	b.n	8007482 <_malloc_r+0x72>
 8007478:	6863      	ldr	r3, [r4, #4]
 800747a:	42a2      	cmp	r2, r4
 800747c:	bf0c      	ite	eq
 800747e:	600b      	streq	r3, [r1, #0]
 8007480:	6053      	strne	r3, [r2, #4]
 8007482:	4630      	mov	r0, r6
 8007484:	f000 fca0 	bl	8007dc8 <__malloc_unlock>
 8007488:	f104 000b 	add.w	r0, r4, #11
 800748c:	1d23      	adds	r3, r4, #4
 800748e:	f020 0007 	bic.w	r0, r0, #7
 8007492:	1ac2      	subs	r2, r0, r3
 8007494:	d0cc      	beq.n	8007430 <_malloc_r+0x20>
 8007496:	1a1b      	subs	r3, r3, r0
 8007498:	50a3      	str	r3, [r4, r2]
 800749a:	e7c9      	b.n	8007430 <_malloc_r+0x20>
 800749c:	4622      	mov	r2, r4
 800749e:	6864      	ldr	r4, [r4, #4]
 80074a0:	e7cc      	b.n	800743c <_malloc_r+0x2c>
 80074a2:	1cc4      	adds	r4, r0, #3
 80074a4:	f024 0403 	bic.w	r4, r4, #3
 80074a8:	42a0      	cmp	r0, r4
 80074aa:	d0e3      	beq.n	8007474 <_malloc_r+0x64>
 80074ac:	1a21      	subs	r1, r4, r0
 80074ae:	4630      	mov	r0, r6
 80074b0:	f000 f914 	bl	80076dc <_sbrk_r>
 80074b4:	3001      	adds	r0, #1
 80074b6:	d1dd      	bne.n	8007474 <_malloc_r+0x64>
 80074b8:	e7cf      	b.n	800745a <_malloc_r+0x4a>
 80074ba:	bf00      	nop
 80074bc:	200044a4 	.word	0x200044a4
 80074c0:	200044a8 	.word	0x200044a8

080074c4 <_perror_r>:
 80074c4:	6983      	ldr	r3, [r0, #24]
 80074c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074c8:	4605      	mov	r5, r0
 80074ca:	460e      	mov	r6, r1
 80074cc:	68c4      	ldr	r4, [r0, #12]
 80074ce:	b90b      	cbnz	r3, 80074d4 <_perror_r+0x10>
 80074d0:	f7ff fec2 	bl	8007258 <__sinit>
 80074d4:	4b43      	ldr	r3, [pc, #268]	; (80075e4 <_perror_r+0x120>)
 80074d6:	429c      	cmp	r4, r3
 80074d8:	d132      	bne.n	8007540 <_perror_r+0x7c>
 80074da:	686c      	ldr	r4, [r5, #4]
 80074dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074de:	07d8      	lsls	r0, r3, #31
 80074e0:	d405      	bmi.n	80074ee <_perror_r+0x2a>
 80074e2:	89a3      	ldrh	r3, [r4, #12]
 80074e4:	0599      	lsls	r1, r3, #22
 80074e6:	d402      	bmi.n	80074ee <_perror_r+0x2a>
 80074e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074ea:	f7ff ff78 	bl	80073de <__retarget_lock_acquire_recursive>
 80074ee:	4621      	mov	r1, r4
 80074f0:	4628      	mov	r0, r5
 80074f2:	f000 fbd7 	bl	8007ca4 <_fflush_r>
 80074f6:	bb6e      	cbnz	r6, 8007554 <_perror_r+0x90>
 80074f8:	2201      	movs	r2, #1
 80074fa:	4628      	mov	r0, r5
 80074fc:	6829      	ldr	r1, [r5, #0]
 80074fe:	ab01      	add	r3, sp, #4
 8007500:	f000 f940 	bl	8007784 <_strerror_r>
 8007504:	4607      	mov	r7, r0
 8007506:	2800      	cmp	r0, #0
 8007508:	d14f      	bne.n	80075aa <_perror_r+0xe6>
 800750a:	4837      	ldr	r0, [pc, #220]	; (80075e8 <_perror_r+0x124>)
 800750c:	f7f8 fe20 	bl	8000150 <strlen>
 8007510:	4606      	mov	r6, r0
 8007512:	4f35      	ldr	r7, [pc, #212]	; (80075e8 <_perror_r+0x124>)
 8007514:	b156      	cbz	r6, 800752c <_perror_r+0x68>
 8007516:	4620      	mov	r0, r4
 8007518:	f000 fc00 	bl	8007d1c <fileno>
 800751c:	4633      	mov	r3, r6
 800751e:	4601      	mov	r1, r0
 8007520:	463a      	mov	r2, r7
 8007522:	4628      	mov	r0, r5
 8007524:	f000 fb16 	bl	8007b54 <_write_r>
 8007528:	2800      	cmp	r0, #0
 800752a:	da51      	bge.n	80075d0 <_perror_r+0x10c>
 800752c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007530:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007532:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007536:	07d2      	lsls	r2, r2, #31
 8007538:	81a3      	strh	r3, [r4, #12]
 800753a:	d54c      	bpl.n	80075d6 <_perror_r+0x112>
 800753c:	b003      	add	sp, #12
 800753e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007540:	4b2a      	ldr	r3, [pc, #168]	; (80075ec <_perror_r+0x128>)
 8007542:	429c      	cmp	r4, r3
 8007544:	d101      	bne.n	800754a <_perror_r+0x86>
 8007546:	68ac      	ldr	r4, [r5, #8]
 8007548:	e7c8      	b.n	80074dc <_perror_r+0x18>
 800754a:	4b29      	ldr	r3, [pc, #164]	; (80075f0 <_perror_r+0x12c>)
 800754c:	429c      	cmp	r4, r3
 800754e:	bf08      	it	eq
 8007550:	68ec      	ldreq	r4, [r5, #12]
 8007552:	e7c3      	b.n	80074dc <_perror_r+0x18>
 8007554:	7833      	ldrb	r3, [r6, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d0ce      	beq.n	80074f8 <_perror_r+0x34>
 800755a:	4630      	mov	r0, r6
 800755c:	f7f8 fdf8 	bl	8000150 <strlen>
 8007560:	4607      	mov	r7, r0
 8007562:	b157      	cbz	r7, 800757a <_perror_r+0xb6>
 8007564:	4620      	mov	r0, r4
 8007566:	f000 fbd9 	bl	8007d1c <fileno>
 800756a:	463b      	mov	r3, r7
 800756c:	4601      	mov	r1, r0
 800756e:	4632      	mov	r2, r6
 8007570:	4628      	mov	r0, r5
 8007572:	f000 faef 	bl	8007b54 <_write_r>
 8007576:	2800      	cmp	r0, #0
 8007578:	da14      	bge.n	80075a4 <_perror_r+0xe0>
 800757a:	481e      	ldr	r0, [pc, #120]	; (80075f4 <_perror_r+0x130>)
 800757c:	f7f8 fde8 	bl	8000150 <strlen>
 8007580:	4606      	mov	r6, r0
 8007582:	4f1c      	ldr	r7, [pc, #112]	; (80075f4 <_perror_r+0x130>)
 8007584:	2e00      	cmp	r6, #0
 8007586:	d0b7      	beq.n	80074f8 <_perror_r+0x34>
 8007588:	4620      	mov	r0, r4
 800758a:	f000 fbc7 	bl	8007d1c <fileno>
 800758e:	4633      	mov	r3, r6
 8007590:	4601      	mov	r1, r0
 8007592:	463a      	mov	r2, r7
 8007594:	4628      	mov	r0, r5
 8007596:	f000 fadd 	bl	8007b54 <_write_r>
 800759a:	2800      	cmp	r0, #0
 800759c:	dbac      	blt.n	80074f8 <_perror_r+0x34>
 800759e:	1a36      	subs	r6, r6, r0
 80075a0:	4407      	add	r7, r0
 80075a2:	e7ef      	b.n	8007584 <_perror_r+0xc0>
 80075a4:	1a3f      	subs	r7, r7, r0
 80075a6:	4406      	add	r6, r0
 80075a8:	e7db      	b.n	8007562 <_perror_r+0x9e>
 80075aa:	f7f8 fdd1 	bl	8000150 <strlen>
 80075ae:	4606      	mov	r6, r0
 80075b0:	2e00      	cmp	r6, #0
 80075b2:	d0aa      	beq.n	800750a <_perror_r+0x46>
 80075b4:	4620      	mov	r0, r4
 80075b6:	f000 fbb1 	bl	8007d1c <fileno>
 80075ba:	4633      	mov	r3, r6
 80075bc:	4601      	mov	r1, r0
 80075be:	463a      	mov	r2, r7
 80075c0:	4628      	mov	r0, r5
 80075c2:	f000 fac7 	bl	8007b54 <_write_r>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	db9f      	blt.n	800750a <_perror_r+0x46>
 80075ca:	1a36      	subs	r6, r6, r0
 80075cc:	4407      	add	r7, r0
 80075ce:	e7ef      	b.n	80075b0 <_perror_r+0xec>
 80075d0:	1a36      	subs	r6, r6, r0
 80075d2:	4407      	add	r7, r0
 80075d4:	e79e      	b.n	8007514 <_perror_r+0x50>
 80075d6:	059b      	lsls	r3, r3, #22
 80075d8:	d4b0      	bmi.n	800753c <_perror_r+0x78>
 80075da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075dc:	f7ff ff00 	bl	80073e0 <__retarget_lock_release_recursive>
 80075e0:	e7ac      	b.n	800753c <_perror_r+0x78>
 80075e2:	bf00      	nop
 80075e4:	08007f60 	.word	0x08007f60
 80075e8:	08007fa7 	.word	0x08007fa7
 80075ec:	08007f80 	.word	0x08007f80
 80075f0:	08007f40 	.word	0x08007f40
 80075f4:	08007fa4 	.word	0x08007fa4

080075f8 <perror>:
 80075f8:	4b02      	ldr	r3, [pc, #8]	; (8007604 <perror+0xc>)
 80075fa:	4601      	mov	r1, r0
 80075fc:	6818      	ldr	r0, [r3, #0]
 80075fe:	f7ff bf61 	b.w	80074c4 <_perror_r>
 8007602:	bf00      	nop
 8007604:	20000014 	.word	0x20000014

08007608 <cleanup_glue>:
 8007608:	b538      	push	{r3, r4, r5, lr}
 800760a:	460c      	mov	r4, r1
 800760c:	6809      	ldr	r1, [r1, #0]
 800760e:	4605      	mov	r5, r0
 8007610:	b109      	cbz	r1, 8007616 <cleanup_glue+0xe>
 8007612:	f7ff fff9 	bl	8007608 <cleanup_glue>
 8007616:	4621      	mov	r1, r4
 8007618:	4628      	mov	r0, r5
 800761a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800761e:	f000 bbd9 	b.w	8007dd4 <_free_r>
	...

08007624 <_reclaim_reent>:
 8007624:	4b2c      	ldr	r3, [pc, #176]	; (80076d8 <_reclaim_reent+0xb4>)
 8007626:	b570      	push	{r4, r5, r6, lr}
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4604      	mov	r4, r0
 800762c:	4283      	cmp	r3, r0
 800762e:	d051      	beq.n	80076d4 <_reclaim_reent+0xb0>
 8007630:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007632:	b143      	cbz	r3, 8007646 <_reclaim_reent+0x22>
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d14a      	bne.n	80076d0 <_reclaim_reent+0xac>
 800763a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800763c:	6819      	ldr	r1, [r3, #0]
 800763e:	b111      	cbz	r1, 8007646 <_reclaim_reent+0x22>
 8007640:	4620      	mov	r0, r4
 8007642:	f000 fbc7 	bl	8007dd4 <_free_r>
 8007646:	6961      	ldr	r1, [r4, #20]
 8007648:	b111      	cbz	r1, 8007650 <_reclaim_reent+0x2c>
 800764a:	4620      	mov	r0, r4
 800764c:	f000 fbc2 	bl	8007dd4 <_free_r>
 8007650:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007652:	b111      	cbz	r1, 800765a <_reclaim_reent+0x36>
 8007654:	4620      	mov	r0, r4
 8007656:	f000 fbbd 	bl	8007dd4 <_free_r>
 800765a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800765c:	b111      	cbz	r1, 8007664 <_reclaim_reent+0x40>
 800765e:	4620      	mov	r0, r4
 8007660:	f000 fbb8 	bl	8007dd4 <_free_r>
 8007664:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007666:	b111      	cbz	r1, 800766e <_reclaim_reent+0x4a>
 8007668:	4620      	mov	r0, r4
 800766a:	f000 fbb3 	bl	8007dd4 <_free_r>
 800766e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007670:	b111      	cbz	r1, 8007678 <_reclaim_reent+0x54>
 8007672:	4620      	mov	r0, r4
 8007674:	f000 fbae 	bl	8007dd4 <_free_r>
 8007678:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800767a:	b111      	cbz	r1, 8007682 <_reclaim_reent+0x5e>
 800767c:	4620      	mov	r0, r4
 800767e:	f000 fba9 	bl	8007dd4 <_free_r>
 8007682:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007684:	b111      	cbz	r1, 800768c <_reclaim_reent+0x68>
 8007686:	4620      	mov	r0, r4
 8007688:	f000 fba4 	bl	8007dd4 <_free_r>
 800768c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800768e:	b111      	cbz	r1, 8007696 <_reclaim_reent+0x72>
 8007690:	4620      	mov	r0, r4
 8007692:	f000 fb9f 	bl	8007dd4 <_free_r>
 8007696:	69a3      	ldr	r3, [r4, #24]
 8007698:	b1e3      	cbz	r3, 80076d4 <_reclaim_reent+0xb0>
 800769a:	4620      	mov	r0, r4
 800769c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800769e:	4798      	blx	r3
 80076a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80076a2:	b1b9      	cbz	r1, 80076d4 <_reclaim_reent+0xb0>
 80076a4:	4620      	mov	r0, r4
 80076a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80076aa:	f7ff bfad 	b.w	8007608 <cleanup_glue>
 80076ae:	5949      	ldr	r1, [r1, r5]
 80076b0:	b941      	cbnz	r1, 80076c4 <_reclaim_reent+0xa0>
 80076b2:	3504      	adds	r5, #4
 80076b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076b6:	2d80      	cmp	r5, #128	; 0x80
 80076b8:	68d9      	ldr	r1, [r3, #12]
 80076ba:	d1f8      	bne.n	80076ae <_reclaim_reent+0x8a>
 80076bc:	4620      	mov	r0, r4
 80076be:	f000 fb89 	bl	8007dd4 <_free_r>
 80076c2:	e7ba      	b.n	800763a <_reclaim_reent+0x16>
 80076c4:	680e      	ldr	r6, [r1, #0]
 80076c6:	4620      	mov	r0, r4
 80076c8:	f000 fb84 	bl	8007dd4 <_free_r>
 80076cc:	4631      	mov	r1, r6
 80076ce:	e7ef      	b.n	80076b0 <_reclaim_reent+0x8c>
 80076d0:	2500      	movs	r5, #0
 80076d2:	e7ef      	b.n	80076b4 <_reclaim_reent+0x90>
 80076d4:	bd70      	pop	{r4, r5, r6, pc}
 80076d6:	bf00      	nop
 80076d8:	20000014 	.word	0x20000014

080076dc <_sbrk_r>:
 80076dc:	b538      	push	{r3, r4, r5, lr}
 80076de:	2300      	movs	r3, #0
 80076e0:	4d05      	ldr	r5, [pc, #20]	; (80076f8 <_sbrk_r+0x1c>)
 80076e2:	4604      	mov	r4, r0
 80076e4:	4608      	mov	r0, r1
 80076e6:	602b      	str	r3, [r5, #0]
 80076e8:	f7f9 f9b4 	bl	8000a54 <_sbrk>
 80076ec:	1c43      	adds	r3, r0, #1
 80076ee:	d102      	bne.n	80076f6 <_sbrk_r+0x1a>
 80076f0:	682b      	ldr	r3, [r5, #0]
 80076f2:	b103      	cbz	r3, 80076f6 <_sbrk_r+0x1a>
 80076f4:	6023      	str	r3, [r4, #0]
 80076f6:	bd38      	pop	{r3, r4, r5, pc}
 80076f8:	20004628 	.word	0x20004628

080076fc <__sread>:
 80076fc:	b510      	push	{r4, lr}
 80076fe:	460c      	mov	r4, r1
 8007700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007704:	f000 fbb2 	bl	8007e6c <_read_r>
 8007708:	2800      	cmp	r0, #0
 800770a:	bfab      	itete	ge
 800770c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800770e:	89a3      	ldrhlt	r3, [r4, #12]
 8007710:	181b      	addge	r3, r3, r0
 8007712:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007716:	bfac      	ite	ge
 8007718:	6563      	strge	r3, [r4, #84]	; 0x54
 800771a:	81a3      	strhlt	r3, [r4, #12]
 800771c:	bd10      	pop	{r4, pc}

0800771e <__swrite>:
 800771e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007722:	461f      	mov	r7, r3
 8007724:	898b      	ldrh	r3, [r1, #12]
 8007726:	4605      	mov	r5, r0
 8007728:	05db      	lsls	r3, r3, #23
 800772a:	460c      	mov	r4, r1
 800772c:	4616      	mov	r6, r2
 800772e:	d505      	bpl.n	800773c <__swrite+0x1e>
 8007730:	2302      	movs	r3, #2
 8007732:	2200      	movs	r2, #0
 8007734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007738:	f000 fb2e 	bl	8007d98 <_lseek_r>
 800773c:	89a3      	ldrh	r3, [r4, #12]
 800773e:	4632      	mov	r2, r6
 8007740:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007744:	81a3      	strh	r3, [r4, #12]
 8007746:	4628      	mov	r0, r5
 8007748:	463b      	mov	r3, r7
 800774a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800774e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007752:	f000 b9ff 	b.w	8007b54 <_write_r>

08007756 <__sseek>:
 8007756:	b510      	push	{r4, lr}
 8007758:	460c      	mov	r4, r1
 800775a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800775e:	f000 fb1b 	bl	8007d98 <_lseek_r>
 8007762:	1c43      	adds	r3, r0, #1
 8007764:	89a3      	ldrh	r3, [r4, #12]
 8007766:	bf15      	itete	ne
 8007768:	6560      	strne	r0, [r4, #84]	; 0x54
 800776a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800776e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007772:	81a3      	strheq	r3, [r4, #12]
 8007774:	bf18      	it	ne
 8007776:	81a3      	strhne	r3, [r4, #12]
 8007778:	bd10      	pop	{r4, pc}

0800777a <__sclose>:
 800777a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800777e:	f000 b9fb 	b.w	8007b78 <_close_r>
	...

08007784 <_strerror_r>:
 8007784:	b510      	push	{r4, lr}
 8007786:	4604      	mov	r4, r0
 8007788:	4608      	mov	r0, r1
 800778a:	4611      	mov	r1, r2
 800778c:	288e      	cmp	r0, #142	; 0x8e
 800778e:	f200 812f 	bhi.w	80079f0 <_strerror_r+0x26c>
 8007792:	e8df f010 	tbh	[pc, r0, lsl #1]
 8007796:	0138      	.short	0x0138
 8007798:	0091008f 	.word	0x0091008f
 800779c:	00950093 	.word	0x00950093
 80077a0:	00990097 	.word	0x00990097
 80077a4:	009d009b 	.word	0x009d009b
 80077a8:	00a300a1 	.word	0x00a300a1
 80077ac:	00a900a7 	.word	0x00a900a7
 80077b0:	00ad00ab 	.word	0x00ad00ab
 80077b4:	00af012d 	.word	0x00af012d
 80077b8:	00b300b1 	.word	0x00b300b1
 80077bc:	00b700b5 	.word	0x00b700b5
 80077c0:	00bf00bd 	.word	0x00bf00bd
 80077c4:	00c700c5 	.word	0x00c700c5
 80077c8:	00cb00c9 	.word	0x00cb00c9
 80077cc:	00d100cd 	.word	0x00d100cd
 80077d0:	00d700d5 	.word	0x00d700d5
 80077d4:	00db00d9 	.word	0x00db00d9
 80077d8:	00df00dd 	.word	0x00df00dd
 80077dc:	00e300e1 	.word	0x00e300e1
 80077e0:	012d012d 	.word	0x012d012d
 80077e4:	012d012d 	.word	0x012d012d
 80077e8:	012d012d 	.word	0x012d012d
 80077ec:	012d012d 	.word	0x012d012d
 80077f0:	00eb00e7 	.word	0x00eb00e7
 80077f4:	012d012d 	.word	0x012d012d
 80077f8:	012d012d 	.word	0x012d012d
 80077fc:	012d012d 	.word	0x012d012d
 8007800:	012d012d 	.word	0x012d012d
 8007804:	012d012d 	.word	0x012d012d
 8007808:	012d012d 	.word	0x012d012d
 800780c:	00ed012d 	.word	0x00ed012d
 8007810:	00ef0107 	.word	0x00ef0107
 8007814:	012d00f1 	.word	0x012d00f1
 8007818:	012d012d 	.word	0x012d012d
 800781c:	012d00f3 	.word	0x012d00f3
 8007820:	012d012d 	.word	0x012d012d
 8007824:	012d00f5 	.word	0x012d00f5
 8007828:	00f9012d 	.word	0x00f9012d
 800782c:	012d012d 	.word	0x012d012d
 8007830:	012d00fb 	.word	0x012d00fb
 8007834:	012d012d 	.word	0x012d012d
 8007838:	012d012d 	.word	0x012d012d
 800783c:	012d012d 	.word	0x012d012d
 8007840:	012d012d 	.word	0x012d012d
 8007844:	00fd012d 	.word	0x00fd012d
 8007848:	00ff012d 	.word	0x00ff012d
 800784c:	01030101 	.word	0x01030101
 8007850:	012d012d 	.word	0x012d012d
 8007854:	012d0125 	.word	0x012d0125
 8007858:	012d012d 	.word	0x012d012d
 800785c:	012d012d 	.word	0x012d012d
 8007860:	012d012d 	.word	0x012d012d
 8007864:	0113012d 	.word	0x0113012d
 8007868:	01090105 	.word	0x01090105
 800786c:	010d010b 	.word	0x010d010b
 8007870:	012d010f 	.word	0x012d010f
 8007874:	01150111 	.word	0x01150111
 8007878:	00e90119 	.word	0x00e90119
 800787c:	012b00c1 	.word	0x012b00c1
 8007880:	00cf00b9 	.word	0x00cf00b9
 8007884:	009f00bb 	.word	0x009f00bb
 8007888:	012900a5 	.word	0x012900a5
 800788c:	012d00f7 	.word	0x012d00f7
 8007890:	00c30117 	.word	0x00c30117
 8007894:	011b011d 	.word	0x011b011d
 8007898:	012d012d 	.word	0x012d012d
 800789c:	012d012d 	.word	0x012d012d
 80078a0:	00d3012d 	.word	0x00d3012d
 80078a4:	012d012d 	.word	0x012d012d
 80078a8:	00e5012d 	.word	0x00e5012d
 80078ac:	011f0127 	.word	0x011f0127
 80078b0:	01230121 	.word	0x01230121
 80078b4:	4855      	ldr	r0, [pc, #340]	; (8007a0c <_strerror_r+0x288>)
 80078b6:	bd10      	pop	{r4, pc}
 80078b8:	4855      	ldr	r0, [pc, #340]	; (8007a10 <_strerror_r+0x28c>)
 80078ba:	e7fc      	b.n	80078b6 <_strerror_r+0x132>
 80078bc:	4855      	ldr	r0, [pc, #340]	; (8007a14 <_strerror_r+0x290>)
 80078be:	e7fa      	b.n	80078b6 <_strerror_r+0x132>
 80078c0:	4855      	ldr	r0, [pc, #340]	; (8007a18 <_strerror_r+0x294>)
 80078c2:	e7f8      	b.n	80078b6 <_strerror_r+0x132>
 80078c4:	4855      	ldr	r0, [pc, #340]	; (8007a1c <_strerror_r+0x298>)
 80078c6:	e7f6      	b.n	80078b6 <_strerror_r+0x132>
 80078c8:	4855      	ldr	r0, [pc, #340]	; (8007a20 <_strerror_r+0x29c>)
 80078ca:	e7f4      	b.n	80078b6 <_strerror_r+0x132>
 80078cc:	4855      	ldr	r0, [pc, #340]	; (8007a24 <_strerror_r+0x2a0>)
 80078ce:	e7f2      	b.n	80078b6 <_strerror_r+0x132>
 80078d0:	4855      	ldr	r0, [pc, #340]	; (8007a28 <_strerror_r+0x2a4>)
 80078d2:	e7f0      	b.n	80078b6 <_strerror_r+0x132>
 80078d4:	4855      	ldr	r0, [pc, #340]	; (8007a2c <_strerror_r+0x2a8>)
 80078d6:	e7ee      	b.n	80078b6 <_strerror_r+0x132>
 80078d8:	4855      	ldr	r0, [pc, #340]	; (8007a30 <_strerror_r+0x2ac>)
 80078da:	e7ec      	b.n	80078b6 <_strerror_r+0x132>
 80078dc:	4855      	ldr	r0, [pc, #340]	; (8007a34 <_strerror_r+0x2b0>)
 80078de:	e7ea      	b.n	80078b6 <_strerror_r+0x132>
 80078e0:	4855      	ldr	r0, [pc, #340]	; (8007a38 <_strerror_r+0x2b4>)
 80078e2:	e7e8      	b.n	80078b6 <_strerror_r+0x132>
 80078e4:	4855      	ldr	r0, [pc, #340]	; (8007a3c <_strerror_r+0x2b8>)
 80078e6:	e7e6      	b.n	80078b6 <_strerror_r+0x132>
 80078e8:	4855      	ldr	r0, [pc, #340]	; (8007a40 <_strerror_r+0x2bc>)
 80078ea:	e7e4      	b.n	80078b6 <_strerror_r+0x132>
 80078ec:	4855      	ldr	r0, [pc, #340]	; (8007a44 <_strerror_r+0x2c0>)
 80078ee:	e7e2      	b.n	80078b6 <_strerror_r+0x132>
 80078f0:	4855      	ldr	r0, [pc, #340]	; (8007a48 <_strerror_r+0x2c4>)
 80078f2:	e7e0      	b.n	80078b6 <_strerror_r+0x132>
 80078f4:	4855      	ldr	r0, [pc, #340]	; (8007a4c <_strerror_r+0x2c8>)
 80078f6:	e7de      	b.n	80078b6 <_strerror_r+0x132>
 80078f8:	4855      	ldr	r0, [pc, #340]	; (8007a50 <_strerror_r+0x2cc>)
 80078fa:	e7dc      	b.n	80078b6 <_strerror_r+0x132>
 80078fc:	4855      	ldr	r0, [pc, #340]	; (8007a54 <_strerror_r+0x2d0>)
 80078fe:	e7da      	b.n	80078b6 <_strerror_r+0x132>
 8007900:	4855      	ldr	r0, [pc, #340]	; (8007a58 <_strerror_r+0x2d4>)
 8007902:	e7d8      	b.n	80078b6 <_strerror_r+0x132>
 8007904:	4855      	ldr	r0, [pc, #340]	; (8007a5c <_strerror_r+0x2d8>)
 8007906:	e7d6      	b.n	80078b6 <_strerror_r+0x132>
 8007908:	4855      	ldr	r0, [pc, #340]	; (8007a60 <_strerror_r+0x2dc>)
 800790a:	e7d4      	b.n	80078b6 <_strerror_r+0x132>
 800790c:	4855      	ldr	r0, [pc, #340]	; (8007a64 <_strerror_r+0x2e0>)
 800790e:	e7d2      	b.n	80078b6 <_strerror_r+0x132>
 8007910:	4855      	ldr	r0, [pc, #340]	; (8007a68 <_strerror_r+0x2e4>)
 8007912:	e7d0      	b.n	80078b6 <_strerror_r+0x132>
 8007914:	4855      	ldr	r0, [pc, #340]	; (8007a6c <_strerror_r+0x2e8>)
 8007916:	e7ce      	b.n	80078b6 <_strerror_r+0x132>
 8007918:	4855      	ldr	r0, [pc, #340]	; (8007a70 <_strerror_r+0x2ec>)
 800791a:	e7cc      	b.n	80078b6 <_strerror_r+0x132>
 800791c:	4855      	ldr	r0, [pc, #340]	; (8007a74 <_strerror_r+0x2f0>)
 800791e:	e7ca      	b.n	80078b6 <_strerror_r+0x132>
 8007920:	4855      	ldr	r0, [pc, #340]	; (8007a78 <_strerror_r+0x2f4>)
 8007922:	e7c8      	b.n	80078b6 <_strerror_r+0x132>
 8007924:	4855      	ldr	r0, [pc, #340]	; (8007a7c <_strerror_r+0x2f8>)
 8007926:	e7c6      	b.n	80078b6 <_strerror_r+0x132>
 8007928:	4855      	ldr	r0, [pc, #340]	; (8007a80 <_strerror_r+0x2fc>)
 800792a:	e7c4      	b.n	80078b6 <_strerror_r+0x132>
 800792c:	4855      	ldr	r0, [pc, #340]	; (8007a84 <_strerror_r+0x300>)
 800792e:	e7c2      	b.n	80078b6 <_strerror_r+0x132>
 8007930:	4855      	ldr	r0, [pc, #340]	; (8007a88 <_strerror_r+0x304>)
 8007932:	e7c0      	b.n	80078b6 <_strerror_r+0x132>
 8007934:	4855      	ldr	r0, [pc, #340]	; (8007a8c <_strerror_r+0x308>)
 8007936:	e7be      	b.n	80078b6 <_strerror_r+0x132>
 8007938:	4855      	ldr	r0, [pc, #340]	; (8007a90 <_strerror_r+0x30c>)
 800793a:	e7bc      	b.n	80078b6 <_strerror_r+0x132>
 800793c:	4855      	ldr	r0, [pc, #340]	; (8007a94 <_strerror_r+0x310>)
 800793e:	e7ba      	b.n	80078b6 <_strerror_r+0x132>
 8007940:	4855      	ldr	r0, [pc, #340]	; (8007a98 <_strerror_r+0x314>)
 8007942:	e7b8      	b.n	80078b6 <_strerror_r+0x132>
 8007944:	4855      	ldr	r0, [pc, #340]	; (8007a9c <_strerror_r+0x318>)
 8007946:	e7b6      	b.n	80078b6 <_strerror_r+0x132>
 8007948:	4855      	ldr	r0, [pc, #340]	; (8007aa0 <_strerror_r+0x31c>)
 800794a:	e7b4      	b.n	80078b6 <_strerror_r+0x132>
 800794c:	4855      	ldr	r0, [pc, #340]	; (8007aa4 <_strerror_r+0x320>)
 800794e:	e7b2      	b.n	80078b6 <_strerror_r+0x132>
 8007950:	4855      	ldr	r0, [pc, #340]	; (8007aa8 <_strerror_r+0x324>)
 8007952:	e7b0      	b.n	80078b6 <_strerror_r+0x132>
 8007954:	4855      	ldr	r0, [pc, #340]	; (8007aac <_strerror_r+0x328>)
 8007956:	e7ae      	b.n	80078b6 <_strerror_r+0x132>
 8007958:	4855      	ldr	r0, [pc, #340]	; (8007ab0 <_strerror_r+0x32c>)
 800795a:	e7ac      	b.n	80078b6 <_strerror_r+0x132>
 800795c:	4855      	ldr	r0, [pc, #340]	; (8007ab4 <_strerror_r+0x330>)
 800795e:	e7aa      	b.n	80078b6 <_strerror_r+0x132>
 8007960:	4855      	ldr	r0, [pc, #340]	; (8007ab8 <_strerror_r+0x334>)
 8007962:	e7a8      	b.n	80078b6 <_strerror_r+0x132>
 8007964:	4855      	ldr	r0, [pc, #340]	; (8007abc <_strerror_r+0x338>)
 8007966:	e7a6      	b.n	80078b6 <_strerror_r+0x132>
 8007968:	4855      	ldr	r0, [pc, #340]	; (8007ac0 <_strerror_r+0x33c>)
 800796a:	e7a4      	b.n	80078b6 <_strerror_r+0x132>
 800796c:	4855      	ldr	r0, [pc, #340]	; (8007ac4 <_strerror_r+0x340>)
 800796e:	e7a2      	b.n	80078b6 <_strerror_r+0x132>
 8007970:	4855      	ldr	r0, [pc, #340]	; (8007ac8 <_strerror_r+0x344>)
 8007972:	e7a0      	b.n	80078b6 <_strerror_r+0x132>
 8007974:	4855      	ldr	r0, [pc, #340]	; (8007acc <_strerror_r+0x348>)
 8007976:	e79e      	b.n	80078b6 <_strerror_r+0x132>
 8007978:	4855      	ldr	r0, [pc, #340]	; (8007ad0 <_strerror_r+0x34c>)
 800797a:	e79c      	b.n	80078b6 <_strerror_r+0x132>
 800797c:	4855      	ldr	r0, [pc, #340]	; (8007ad4 <_strerror_r+0x350>)
 800797e:	e79a      	b.n	80078b6 <_strerror_r+0x132>
 8007980:	4855      	ldr	r0, [pc, #340]	; (8007ad8 <_strerror_r+0x354>)
 8007982:	e798      	b.n	80078b6 <_strerror_r+0x132>
 8007984:	4855      	ldr	r0, [pc, #340]	; (8007adc <_strerror_r+0x358>)
 8007986:	e796      	b.n	80078b6 <_strerror_r+0x132>
 8007988:	4855      	ldr	r0, [pc, #340]	; (8007ae0 <_strerror_r+0x35c>)
 800798a:	e794      	b.n	80078b6 <_strerror_r+0x132>
 800798c:	4855      	ldr	r0, [pc, #340]	; (8007ae4 <_strerror_r+0x360>)
 800798e:	e792      	b.n	80078b6 <_strerror_r+0x132>
 8007990:	4855      	ldr	r0, [pc, #340]	; (8007ae8 <_strerror_r+0x364>)
 8007992:	e790      	b.n	80078b6 <_strerror_r+0x132>
 8007994:	4855      	ldr	r0, [pc, #340]	; (8007aec <_strerror_r+0x368>)
 8007996:	e78e      	b.n	80078b6 <_strerror_r+0x132>
 8007998:	4855      	ldr	r0, [pc, #340]	; (8007af0 <_strerror_r+0x36c>)
 800799a:	e78c      	b.n	80078b6 <_strerror_r+0x132>
 800799c:	4855      	ldr	r0, [pc, #340]	; (8007af4 <_strerror_r+0x370>)
 800799e:	e78a      	b.n	80078b6 <_strerror_r+0x132>
 80079a0:	4855      	ldr	r0, [pc, #340]	; (8007af8 <_strerror_r+0x374>)
 80079a2:	e788      	b.n	80078b6 <_strerror_r+0x132>
 80079a4:	4855      	ldr	r0, [pc, #340]	; (8007afc <_strerror_r+0x378>)
 80079a6:	e786      	b.n	80078b6 <_strerror_r+0x132>
 80079a8:	4855      	ldr	r0, [pc, #340]	; (8007b00 <_strerror_r+0x37c>)
 80079aa:	e784      	b.n	80078b6 <_strerror_r+0x132>
 80079ac:	4855      	ldr	r0, [pc, #340]	; (8007b04 <_strerror_r+0x380>)
 80079ae:	e782      	b.n	80078b6 <_strerror_r+0x132>
 80079b0:	4855      	ldr	r0, [pc, #340]	; (8007b08 <_strerror_r+0x384>)
 80079b2:	e780      	b.n	80078b6 <_strerror_r+0x132>
 80079b4:	4855      	ldr	r0, [pc, #340]	; (8007b0c <_strerror_r+0x388>)
 80079b6:	e77e      	b.n	80078b6 <_strerror_r+0x132>
 80079b8:	4855      	ldr	r0, [pc, #340]	; (8007b10 <_strerror_r+0x38c>)
 80079ba:	e77c      	b.n	80078b6 <_strerror_r+0x132>
 80079bc:	4855      	ldr	r0, [pc, #340]	; (8007b14 <_strerror_r+0x390>)
 80079be:	e77a      	b.n	80078b6 <_strerror_r+0x132>
 80079c0:	4855      	ldr	r0, [pc, #340]	; (8007b18 <_strerror_r+0x394>)
 80079c2:	e778      	b.n	80078b6 <_strerror_r+0x132>
 80079c4:	4855      	ldr	r0, [pc, #340]	; (8007b1c <_strerror_r+0x398>)
 80079c6:	e776      	b.n	80078b6 <_strerror_r+0x132>
 80079c8:	4855      	ldr	r0, [pc, #340]	; (8007b20 <_strerror_r+0x39c>)
 80079ca:	e774      	b.n	80078b6 <_strerror_r+0x132>
 80079cc:	4855      	ldr	r0, [pc, #340]	; (8007b24 <_strerror_r+0x3a0>)
 80079ce:	e772      	b.n	80078b6 <_strerror_r+0x132>
 80079d0:	4855      	ldr	r0, [pc, #340]	; (8007b28 <_strerror_r+0x3a4>)
 80079d2:	e770      	b.n	80078b6 <_strerror_r+0x132>
 80079d4:	4855      	ldr	r0, [pc, #340]	; (8007b2c <_strerror_r+0x3a8>)
 80079d6:	e76e      	b.n	80078b6 <_strerror_r+0x132>
 80079d8:	4855      	ldr	r0, [pc, #340]	; (8007b30 <_strerror_r+0x3ac>)
 80079da:	e76c      	b.n	80078b6 <_strerror_r+0x132>
 80079dc:	4855      	ldr	r0, [pc, #340]	; (8007b34 <_strerror_r+0x3b0>)
 80079de:	e76a      	b.n	80078b6 <_strerror_r+0x132>
 80079e0:	4855      	ldr	r0, [pc, #340]	; (8007b38 <_strerror_r+0x3b4>)
 80079e2:	e768      	b.n	80078b6 <_strerror_r+0x132>
 80079e4:	4855      	ldr	r0, [pc, #340]	; (8007b3c <_strerror_r+0x3b8>)
 80079e6:	e766      	b.n	80078b6 <_strerror_r+0x132>
 80079e8:	4855      	ldr	r0, [pc, #340]	; (8007b40 <_strerror_r+0x3bc>)
 80079ea:	e764      	b.n	80078b6 <_strerror_r+0x132>
 80079ec:	4855      	ldr	r0, [pc, #340]	; (8007b44 <_strerror_r+0x3c0>)
 80079ee:	e762      	b.n	80078b6 <_strerror_r+0x132>
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	bf14      	ite	ne
 80079f4:	461a      	movne	r2, r3
 80079f6:	4622      	moveq	r2, r4
 80079f8:	f000 f8aa 	bl	8007b50 <_user_strerror>
 80079fc:	4b52      	ldr	r3, [pc, #328]	; (8007b48 <_strerror_r+0x3c4>)
 80079fe:	2800      	cmp	r0, #0
 8007a00:	bf08      	it	eq
 8007a02:	4618      	moveq	r0, r3
 8007a04:	e757      	b.n	80078b6 <_strerror_r+0x132>
 8007a06:	4851      	ldr	r0, [pc, #324]	; (8007b4c <_strerror_r+0x3c8>)
 8007a08:	e755      	b.n	80078b6 <_strerror_r+0x132>
 8007a0a:	bf00      	nop
 8007a0c:	08007fa9 	.word	0x08007fa9
 8007a10:	08007fb3 	.word	0x08007fb3
 8007a14:	08007fcd 	.word	0x08007fcd
 8007a18:	08007fdd 	.word	0x08007fdd
 8007a1c:	08007ff5 	.word	0x08007ff5
 8007a20:	08007fff 	.word	0x08007fff
 8007a24:	08008019 	.word	0x08008019
 8007a28:	0800802b 	.word	0x0800802b
 8007a2c:	0800803d 	.word	0x0800803d
 8007a30:	08008056 	.word	0x08008056
 8007a34:	08008066 	.word	0x08008066
 8007a38:	08008072 	.word	0x08008072
 8007a3c:	0800808f 	.word	0x0800808f
 8007a40:	080080a1 	.word	0x080080a1
 8007a44:	080080b2 	.word	0x080080b2
 8007a48:	080080c4 	.word	0x080080c4
 8007a4c:	080080d0 	.word	0x080080d0
 8007a50:	080080e8 	.word	0x080080e8
 8007a54:	080080f4 	.word	0x080080f4
 8007a58:	08008106 	.word	0x08008106
 8007a5c:	08008115 	.word	0x08008115
 8007a60:	08008125 	.word	0x08008125
 8007a64:	08008132 	.word	0x08008132
 8007a68:	08008151 	.word	0x08008151
 8007a6c:	08008160 	.word	0x08008160
 8007a70:	08008171 	.word	0x08008171
 8007a74:	08008195 	.word	0x08008195
 8007a78:	080081b3 	.word	0x080081b3
 8007a7c:	080081d1 	.word	0x080081d1
 8007a80:	080081f1 	.word	0x080081f1
 8007a84:	08008208 	.word	0x08008208
 8007a88:	08008217 	.word	0x08008217
 8007a8c:	08008226 	.word	0x08008226
 8007a90:	0800823a 	.word	0x0800823a
 8007a94:	08008252 	.word	0x08008252
 8007a98:	08008260 	.word	0x08008260
 8007a9c:	0800826d 	.word	0x0800826d
 8007aa0:	08008283 	.word	0x08008283
 8007aa4:	08008292 	.word	0x08008292
 8007aa8:	0800829e 	.word	0x0800829e
 8007aac:	080082cd 	.word	0x080082cd
 8007ab0:	080082de 	.word	0x080082de
 8007ab4:	080082f9 	.word	0x080082f9
 8007ab8:	0800830c 	.word	0x0800830c
 8007abc:	08008322 	.word	0x08008322
 8007ac0:	0800832b 	.word	0x0800832b
 8007ac4:	08008342 	.word	0x08008342
 8007ac8:	0800834a 	.word	0x0800834a
 8007acc:	08008357 	.word	0x08008357
 8007ad0:	0800836c 	.word	0x0800836c
 8007ad4:	08008380 	.word	0x08008380
 8007ad8:	08008398 	.word	0x08008398
 8007adc:	080083a7 	.word	0x080083a7
 8007ae0:	080083b8 	.word	0x080083b8
 8007ae4:	080083cb 	.word	0x080083cb
 8007ae8:	080083d7 	.word	0x080083d7
 8007aec:	080083f0 	.word	0x080083f0
 8007af0:	08008404 	.word	0x08008404
 8007af4:	0800841f 	.word	0x0800841f
 8007af8:	08008437 	.word	0x08008437
 8007afc:	08008451 	.word	0x08008451
 8007b00:	08008459 	.word	0x08008459
 8007b04:	08008489 	.word	0x08008489
 8007b08:	080084a8 	.word	0x080084a8
 8007b0c:	080084c7 	.word	0x080084c7
 8007b10:	080084de 	.word	0x080084de
 8007b14:	080084f1 	.word	0x080084f1
 8007b18:	0800850a 	.word	0x0800850a
 8007b1c:	08008521 	.word	0x08008521
 8007b20:	08008537 	.word	0x08008537
 8007b24:	08008558 	.word	0x08008558
 8007b28:	08008570 	.word	0x08008570
 8007b2c:	0800858c 	.word	0x0800858c
 8007b30:	0800859f 	.word	0x0800859f
 8007b34:	080085b5 	.word	0x080085b5
 8007b38:	080085c9 	.word	0x080085c9
 8007b3c:	080085eb 	.word	0x080085eb
 8007b40:	08008611 	.word	0x08008611
 8007b44:	08008622 	.word	0x08008622
 8007b48:	08007fa8 	.word	0x08007fa8
 8007b4c:	08008637 	.word	0x08008637

08007b50 <_user_strerror>:
 8007b50:	2000      	movs	r0, #0
 8007b52:	4770      	bx	lr

08007b54 <_write_r>:
 8007b54:	b538      	push	{r3, r4, r5, lr}
 8007b56:	4604      	mov	r4, r0
 8007b58:	4608      	mov	r0, r1
 8007b5a:	4611      	mov	r1, r2
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	4d05      	ldr	r5, [pc, #20]	; (8007b74 <_write_r+0x20>)
 8007b60:	602a      	str	r2, [r5, #0]
 8007b62:	461a      	mov	r2, r3
 8007b64:	f7f8 ff43 	bl	80009ee <_write>
 8007b68:	1c43      	adds	r3, r0, #1
 8007b6a:	d102      	bne.n	8007b72 <_write_r+0x1e>
 8007b6c:	682b      	ldr	r3, [r5, #0]
 8007b6e:	b103      	cbz	r3, 8007b72 <_write_r+0x1e>
 8007b70:	6023      	str	r3, [r4, #0]
 8007b72:	bd38      	pop	{r3, r4, r5, pc}
 8007b74:	20004628 	.word	0x20004628

08007b78 <_close_r>:
 8007b78:	b538      	push	{r3, r4, r5, lr}
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	4d05      	ldr	r5, [pc, #20]	; (8007b94 <_close_r+0x1c>)
 8007b7e:	4604      	mov	r4, r0
 8007b80:	4608      	mov	r0, r1
 8007b82:	602b      	str	r3, [r5, #0]
 8007b84:	f7f8 ff4f 	bl	8000a26 <_close>
 8007b88:	1c43      	adds	r3, r0, #1
 8007b8a:	d102      	bne.n	8007b92 <_close_r+0x1a>
 8007b8c:	682b      	ldr	r3, [r5, #0]
 8007b8e:	b103      	cbz	r3, 8007b92 <_close_r+0x1a>
 8007b90:	6023      	str	r3, [r4, #0]
 8007b92:	bd38      	pop	{r3, r4, r5, pc}
 8007b94:	20004628 	.word	0x20004628

08007b98 <__sflush_r>:
 8007b98:	898a      	ldrh	r2, [r1, #12]
 8007b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b9e:	4605      	mov	r5, r0
 8007ba0:	0710      	lsls	r0, r2, #28
 8007ba2:	460c      	mov	r4, r1
 8007ba4:	d458      	bmi.n	8007c58 <__sflush_r+0xc0>
 8007ba6:	684b      	ldr	r3, [r1, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	dc05      	bgt.n	8007bb8 <__sflush_r+0x20>
 8007bac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	dc02      	bgt.n	8007bb8 <__sflush_r+0x20>
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bba:	2e00      	cmp	r6, #0
 8007bbc:	d0f9      	beq.n	8007bb2 <__sflush_r+0x1a>
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bc4:	682f      	ldr	r7, [r5, #0]
 8007bc6:	602b      	str	r3, [r5, #0]
 8007bc8:	d032      	beq.n	8007c30 <__sflush_r+0x98>
 8007bca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bcc:	89a3      	ldrh	r3, [r4, #12]
 8007bce:	075a      	lsls	r2, r3, #29
 8007bd0:	d505      	bpl.n	8007bde <__sflush_r+0x46>
 8007bd2:	6863      	ldr	r3, [r4, #4]
 8007bd4:	1ac0      	subs	r0, r0, r3
 8007bd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bd8:	b10b      	cbz	r3, 8007bde <__sflush_r+0x46>
 8007bda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bdc:	1ac0      	subs	r0, r0, r3
 8007bde:	2300      	movs	r3, #0
 8007be0:	4602      	mov	r2, r0
 8007be2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007be4:	4628      	mov	r0, r5
 8007be6:	6a21      	ldr	r1, [r4, #32]
 8007be8:	47b0      	blx	r6
 8007bea:	1c43      	adds	r3, r0, #1
 8007bec:	89a3      	ldrh	r3, [r4, #12]
 8007bee:	d106      	bne.n	8007bfe <__sflush_r+0x66>
 8007bf0:	6829      	ldr	r1, [r5, #0]
 8007bf2:	291d      	cmp	r1, #29
 8007bf4:	d82c      	bhi.n	8007c50 <__sflush_r+0xb8>
 8007bf6:	4a2a      	ldr	r2, [pc, #168]	; (8007ca0 <__sflush_r+0x108>)
 8007bf8:	40ca      	lsrs	r2, r1
 8007bfa:	07d6      	lsls	r6, r2, #31
 8007bfc:	d528      	bpl.n	8007c50 <__sflush_r+0xb8>
 8007bfe:	2200      	movs	r2, #0
 8007c00:	6062      	str	r2, [r4, #4]
 8007c02:	6922      	ldr	r2, [r4, #16]
 8007c04:	04d9      	lsls	r1, r3, #19
 8007c06:	6022      	str	r2, [r4, #0]
 8007c08:	d504      	bpl.n	8007c14 <__sflush_r+0x7c>
 8007c0a:	1c42      	adds	r2, r0, #1
 8007c0c:	d101      	bne.n	8007c12 <__sflush_r+0x7a>
 8007c0e:	682b      	ldr	r3, [r5, #0]
 8007c10:	b903      	cbnz	r3, 8007c14 <__sflush_r+0x7c>
 8007c12:	6560      	str	r0, [r4, #84]	; 0x54
 8007c14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c16:	602f      	str	r7, [r5, #0]
 8007c18:	2900      	cmp	r1, #0
 8007c1a:	d0ca      	beq.n	8007bb2 <__sflush_r+0x1a>
 8007c1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c20:	4299      	cmp	r1, r3
 8007c22:	d002      	beq.n	8007c2a <__sflush_r+0x92>
 8007c24:	4628      	mov	r0, r5
 8007c26:	f000 f8d5 	bl	8007dd4 <_free_r>
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	6360      	str	r0, [r4, #52]	; 0x34
 8007c2e:	e7c1      	b.n	8007bb4 <__sflush_r+0x1c>
 8007c30:	6a21      	ldr	r1, [r4, #32]
 8007c32:	2301      	movs	r3, #1
 8007c34:	4628      	mov	r0, r5
 8007c36:	47b0      	blx	r6
 8007c38:	1c41      	adds	r1, r0, #1
 8007c3a:	d1c7      	bne.n	8007bcc <__sflush_r+0x34>
 8007c3c:	682b      	ldr	r3, [r5, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d0c4      	beq.n	8007bcc <__sflush_r+0x34>
 8007c42:	2b1d      	cmp	r3, #29
 8007c44:	d001      	beq.n	8007c4a <__sflush_r+0xb2>
 8007c46:	2b16      	cmp	r3, #22
 8007c48:	d101      	bne.n	8007c4e <__sflush_r+0xb6>
 8007c4a:	602f      	str	r7, [r5, #0]
 8007c4c:	e7b1      	b.n	8007bb2 <__sflush_r+0x1a>
 8007c4e:	89a3      	ldrh	r3, [r4, #12]
 8007c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c54:	81a3      	strh	r3, [r4, #12]
 8007c56:	e7ad      	b.n	8007bb4 <__sflush_r+0x1c>
 8007c58:	690f      	ldr	r7, [r1, #16]
 8007c5a:	2f00      	cmp	r7, #0
 8007c5c:	d0a9      	beq.n	8007bb2 <__sflush_r+0x1a>
 8007c5e:	0793      	lsls	r3, r2, #30
 8007c60:	bf18      	it	ne
 8007c62:	2300      	movne	r3, #0
 8007c64:	680e      	ldr	r6, [r1, #0]
 8007c66:	bf08      	it	eq
 8007c68:	694b      	ldreq	r3, [r1, #20]
 8007c6a:	eba6 0807 	sub.w	r8, r6, r7
 8007c6e:	600f      	str	r7, [r1, #0]
 8007c70:	608b      	str	r3, [r1, #8]
 8007c72:	f1b8 0f00 	cmp.w	r8, #0
 8007c76:	dd9c      	ble.n	8007bb2 <__sflush_r+0x1a>
 8007c78:	4643      	mov	r3, r8
 8007c7a:	463a      	mov	r2, r7
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	6a21      	ldr	r1, [r4, #32]
 8007c80:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c82:	47b0      	blx	r6
 8007c84:	2800      	cmp	r0, #0
 8007c86:	dc06      	bgt.n	8007c96 <__sflush_r+0xfe>
 8007c88:	89a3      	ldrh	r3, [r4, #12]
 8007c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c92:	81a3      	strh	r3, [r4, #12]
 8007c94:	e78e      	b.n	8007bb4 <__sflush_r+0x1c>
 8007c96:	4407      	add	r7, r0
 8007c98:	eba8 0800 	sub.w	r8, r8, r0
 8007c9c:	e7e9      	b.n	8007c72 <__sflush_r+0xda>
 8007c9e:	bf00      	nop
 8007ca0:	20400001 	.word	0x20400001

08007ca4 <_fflush_r>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	690b      	ldr	r3, [r1, #16]
 8007ca8:	4605      	mov	r5, r0
 8007caa:	460c      	mov	r4, r1
 8007cac:	b913      	cbnz	r3, 8007cb4 <_fflush_r+0x10>
 8007cae:	2500      	movs	r5, #0
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	bd38      	pop	{r3, r4, r5, pc}
 8007cb4:	b118      	cbz	r0, 8007cbe <_fflush_r+0x1a>
 8007cb6:	6983      	ldr	r3, [r0, #24]
 8007cb8:	b90b      	cbnz	r3, 8007cbe <_fflush_r+0x1a>
 8007cba:	f7ff facd 	bl	8007258 <__sinit>
 8007cbe:	4b14      	ldr	r3, [pc, #80]	; (8007d10 <_fflush_r+0x6c>)
 8007cc0:	429c      	cmp	r4, r3
 8007cc2:	d11b      	bne.n	8007cfc <_fflush_r+0x58>
 8007cc4:	686c      	ldr	r4, [r5, #4]
 8007cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d0ef      	beq.n	8007cae <_fflush_r+0xa>
 8007cce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007cd0:	07d0      	lsls	r0, r2, #31
 8007cd2:	d404      	bmi.n	8007cde <_fflush_r+0x3a>
 8007cd4:	0599      	lsls	r1, r3, #22
 8007cd6:	d402      	bmi.n	8007cde <_fflush_r+0x3a>
 8007cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cda:	f7ff fb80 	bl	80073de <__retarget_lock_acquire_recursive>
 8007cde:	4628      	mov	r0, r5
 8007ce0:	4621      	mov	r1, r4
 8007ce2:	f7ff ff59 	bl	8007b98 <__sflush_r>
 8007ce6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ce8:	4605      	mov	r5, r0
 8007cea:	07da      	lsls	r2, r3, #31
 8007cec:	d4e0      	bmi.n	8007cb0 <_fflush_r+0xc>
 8007cee:	89a3      	ldrh	r3, [r4, #12]
 8007cf0:	059b      	lsls	r3, r3, #22
 8007cf2:	d4dd      	bmi.n	8007cb0 <_fflush_r+0xc>
 8007cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cf6:	f7ff fb73 	bl	80073e0 <__retarget_lock_release_recursive>
 8007cfa:	e7d9      	b.n	8007cb0 <_fflush_r+0xc>
 8007cfc:	4b05      	ldr	r3, [pc, #20]	; (8007d14 <_fflush_r+0x70>)
 8007cfe:	429c      	cmp	r4, r3
 8007d00:	d101      	bne.n	8007d06 <_fflush_r+0x62>
 8007d02:	68ac      	ldr	r4, [r5, #8]
 8007d04:	e7df      	b.n	8007cc6 <_fflush_r+0x22>
 8007d06:	4b04      	ldr	r3, [pc, #16]	; (8007d18 <_fflush_r+0x74>)
 8007d08:	429c      	cmp	r4, r3
 8007d0a:	bf08      	it	eq
 8007d0c:	68ec      	ldreq	r4, [r5, #12]
 8007d0e:	e7da      	b.n	8007cc6 <_fflush_r+0x22>
 8007d10:	08007f60 	.word	0x08007f60
 8007d14:	08007f80 	.word	0x08007f80
 8007d18:	08007f40 	.word	0x08007f40

08007d1c <fileno>:
 8007d1c:	b570      	push	{r4, r5, r6, lr}
 8007d1e:	4e1a      	ldr	r6, [pc, #104]	; (8007d88 <fileno+0x6c>)
 8007d20:	4604      	mov	r4, r0
 8007d22:	6835      	ldr	r5, [r6, #0]
 8007d24:	b125      	cbz	r5, 8007d30 <fileno+0x14>
 8007d26:	69ab      	ldr	r3, [r5, #24]
 8007d28:	b913      	cbnz	r3, 8007d30 <fileno+0x14>
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	f7ff fa94 	bl	8007258 <__sinit>
 8007d30:	4b16      	ldr	r3, [pc, #88]	; (8007d8c <fileno+0x70>)
 8007d32:	429c      	cmp	r4, r3
 8007d34:	d118      	bne.n	8007d68 <fileno+0x4c>
 8007d36:	686c      	ldr	r4, [r5, #4]
 8007d38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d3a:	07d8      	lsls	r0, r3, #31
 8007d3c:	d405      	bmi.n	8007d4a <fileno+0x2e>
 8007d3e:	89a3      	ldrh	r3, [r4, #12]
 8007d40:	0599      	lsls	r1, r3, #22
 8007d42:	d402      	bmi.n	8007d4a <fileno+0x2e>
 8007d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d46:	f7ff fb4a 	bl	80073de <__retarget_lock_acquire_recursive>
 8007d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d4e:	b1ab      	cbz	r3, 8007d7c <fileno+0x60>
 8007d50:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 8007d54:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d56:	07d2      	lsls	r2, r2, #31
 8007d58:	d404      	bmi.n	8007d64 <fileno+0x48>
 8007d5a:	059b      	lsls	r3, r3, #22
 8007d5c:	d402      	bmi.n	8007d64 <fileno+0x48>
 8007d5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d60:	f7ff fb3e 	bl	80073e0 <__retarget_lock_release_recursive>
 8007d64:	4628      	mov	r0, r5
 8007d66:	bd70      	pop	{r4, r5, r6, pc}
 8007d68:	4b09      	ldr	r3, [pc, #36]	; (8007d90 <fileno+0x74>)
 8007d6a:	429c      	cmp	r4, r3
 8007d6c:	d101      	bne.n	8007d72 <fileno+0x56>
 8007d6e:	68ac      	ldr	r4, [r5, #8]
 8007d70:	e7e2      	b.n	8007d38 <fileno+0x1c>
 8007d72:	4b08      	ldr	r3, [pc, #32]	; (8007d94 <fileno+0x78>)
 8007d74:	429c      	cmp	r4, r3
 8007d76:	bf08      	it	eq
 8007d78:	68ec      	ldreq	r4, [r5, #12]
 8007d7a:	e7dd      	b.n	8007d38 <fileno+0x1c>
 8007d7c:	2109      	movs	r1, #9
 8007d7e:	6832      	ldr	r2, [r6, #0]
 8007d80:	f04f 35ff 	mov.w	r5, #4294967295
 8007d84:	6011      	str	r1, [r2, #0]
 8007d86:	e7e5      	b.n	8007d54 <fileno+0x38>
 8007d88:	20000014 	.word	0x20000014
 8007d8c:	08007f60 	.word	0x08007f60
 8007d90:	08007f80 	.word	0x08007f80
 8007d94:	08007f40 	.word	0x08007f40

08007d98 <_lseek_r>:
 8007d98:	b538      	push	{r3, r4, r5, lr}
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	4608      	mov	r0, r1
 8007d9e:	4611      	mov	r1, r2
 8007da0:	2200      	movs	r2, #0
 8007da2:	4d05      	ldr	r5, [pc, #20]	; (8007db8 <_lseek_r+0x20>)
 8007da4:	602a      	str	r2, [r5, #0]
 8007da6:	461a      	mov	r2, r3
 8007da8:	f7f8 fe48 	bl	8000a3c <_lseek>
 8007dac:	1c43      	adds	r3, r0, #1
 8007dae:	d102      	bne.n	8007db6 <_lseek_r+0x1e>
 8007db0:	682b      	ldr	r3, [r5, #0]
 8007db2:	b103      	cbz	r3, 8007db6 <_lseek_r+0x1e>
 8007db4:	6023      	str	r3, [r4, #0]
 8007db6:	bd38      	pop	{r3, r4, r5, pc}
 8007db8:	20004628 	.word	0x20004628

08007dbc <__malloc_lock>:
 8007dbc:	4801      	ldr	r0, [pc, #4]	; (8007dc4 <__malloc_lock+0x8>)
 8007dbe:	f7ff bb0e 	b.w	80073de <__retarget_lock_acquire_recursive>
 8007dc2:	bf00      	nop
 8007dc4:	20004620 	.word	0x20004620

08007dc8 <__malloc_unlock>:
 8007dc8:	4801      	ldr	r0, [pc, #4]	; (8007dd0 <__malloc_unlock+0x8>)
 8007dca:	f7ff bb09 	b.w	80073e0 <__retarget_lock_release_recursive>
 8007dce:	bf00      	nop
 8007dd0:	20004620 	.word	0x20004620

08007dd4 <_free_r>:
 8007dd4:	b538      	push	{r3, r4, r5, lr}
 8007dd6:	4605      	mov	r5, r0
 8007dd8:	2900      	cmp	r1, #0
 8007dda:	d043      	beq.n	8007e64 <_free_r+0x90>
 8007ddc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007de0:	1f0c      	subs	r4, r1, #4
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	bfb8      	it	lt
 8007de6:	18e4      	addlt	r4, r4, r3
 8007de8:	f7ff ffe8 	bl	8007dbc <__malloc_lock>
 8007dec:	4a1e      	ldr	r2, [pc, #120]	; (8007e68 <_free_r+0x94>)
 8007dee:	6813      	ldr	r3, [r2, #0]
 8007df0:	4610      	mov	r0, r2
 8007df2:	b933      	cbnz	r3, 8007e02 <_free_r+0x2e>
 8007df4:	6063      	str	r3, [r4, #4]
 8007df6:	6014      	str	r4, [r2, #0]
 8007df8:	4628      	mov	r0, r5
 8007dfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dfe:	f7ff bfe3 	b.w	8007dc8 <__malloc_unlock>
 8007e02:	42a3      	cmp	r3, r4
 8007e04:	d90a      	bls.n	8007e1c <_free_r+0x48>
 8007e06:	6821      	ldr	r1, [r4, #0]
 8007e08:	1862      	adds	r2, r4, r1
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	bf01      	itttt	eq
 8007e0e:	681a      	ldreq	r2, [r3, #0]
 8007e10:	685b      	ldreq	r3, [r3, #4]
 8007e12:	1852      	addeq	r2, r2, r1
 8007e14:	6022      	streq	r2, [r4, #0]
 8007e16:	6063      	str	r3, [r4, #4]
 8007e18:	6004      	str	r4, [r0, #0]
 8007e1a:	e7ed      	b.n	8007df8 <_free_r+0x24>
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	b10b      	cbz	r3, 8007e26 <_free_r+0x52>
 8007e22:	42a3      	cmp	r3, r4
 8007e24:	d9fa      	bls.n	8007e1c <_free_r+0x48>
 8007e26:	6811      	ldr	r1, [r2, #0]
 8007e28:	1850      	adds	r0, r2, r1
 8007e2a:	42a0      	cmp	r0, r4
 8007e2c:	d10b      	bne.n	8007e46 <_free_r+0x72>
 8007e2e:	6820      	ldr	r0, [r4, #0]
 8007e30:	4401      	add	r1, r0
 8007e32:	1850      	adds	r0, r2, r1
 8007e34:	4283      	cmp	r3, r0
 8007e36:	6011      	str	r1, [r2, #0]
 8007e38:	d1de      	bne.n	8007df8 <_free_r+0x24>
 8007e3a:	6818      	ldr	r0, [r3, #0]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	4401      	add	r1, r0
 8007e40:	6011      	str	r1, [r2, #0]
 8007e42:	6053      	str	r3, [r2, #4]
 8007e44:	e7d8      	b.n	8007df8 <_free_r+0x24>
 8007e46:	d902      	bls.n	8007e4e <_free_r+0x7a>
 8007e48:	230c      	movs	r3, #12
 8007e4a:	602b      	str	r3, [r5, #0]
 8007e4c:	e7d4      	b.n	8007df8 <_free_r+0x24>
 8007e4e:	6820      	ldr	r0, [r4, #0]
 8007e50:	1821      	adds	r1, r4, r0
 8007e52:	428b      	cmp	r3, r1
 8007e54:	bf01      	itttt	eq
 8007e56:	6819      	ldreq	r1, [r3, #0]
 8007e58:	685b      	ldreq	r3, [r3, #4]
 8007e5a:	1809      	addeq	r1, r1, r0
 8007e5c:	6021      	streq	r1, [r4, #0]
 8007e5e:	6063      	str	r3, [r4, #4]
 8007e60:	6054      	str	r4, [r2, #4]
 8007e62:	e7c9      	b.n	8007df8 <_free_r+0x24>
 8007e64:	bd38      	pop	{r3, r4, r5, pc}
 8007e66:	bf00      	nop
 8007e68:	200044a4 	.word	0x200044a4

08007e6c <_read_r>:
 8007e6c:	b538      	push	{r3, r4, r5, lr}
 8007e6e:	4604      	mov	r4, r0
 8007e70:	4608      	mov	r0, r1
 8007e72:	4611      	mov	r1, r2
 8007e74:	2200      	movs	r2, #0
 8007e76:	4d05      	ldr	r5, [pc, #20]	; (8007e8c <_read_r+0x20>)
 8007e78:	602a      	str	r2, [r5, #0]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	f7f8 fd9a 	bl	80009b4 <_read>
 8007e80:	1c43      	adds	r3, r0, #1
 8007e82:	d102      	bne.n	8007e8a <_read_r+0x1e>
 8007e84:	682b      	ldr	r3, [r5, #0]
 8007e86:	b103      	cbz	r3, 8007e8a <_read_r+0x1e>
 8007e88:	6023      	str	r3, [r4, #0]
 8007e8a:	bd38      	pop	{r3, r4, r5, pc}
 8007e8c:	20004628 	.word	0x20004628

08007e90 <_init>:
 8007e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e92:	bf00      	nop
 8007e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e96:	bc08      	pop	{r3}
 8007e98:	469e      	mov	lr, r3
 8007e9a:	4770      	bx	lr

08007e9c <_fini>:
 8007e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9e:	bf00      	nop
 8007ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ea2:	bc08      	pop	{r3}
 8007ea4:	469e      	mov	lr, r3
 8007ea6:	4770      	bx	lr
